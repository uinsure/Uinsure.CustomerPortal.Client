/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Uinsure.CustomerPortal.Client.Client;
using Uinsure.CustomerPortal.Client.Client.Auth;
using Uinsure.CustomerPortal.Client.Model;

namespace Uinsure.CustomerPortal.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesQueryApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Finds policies matching any or all from agreement number, surname, date of birth, risk address postcode, telephone number or policy status.
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findPoliciesRequest">The search request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult&gt;</returns>
        List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult> ApiAdminPoliciesFindPost(FindPoliciesRequest? findPoliciesRequest = default(FindPoliciesRequest?), int operationIndex = 0);

        /// <summary>
        /// Finds policies matching any or all from agreement number, surname, date of birth, risk address postcode, telephone number or policy status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findPoliciesRequest">The search request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult&gt;</returns>
        ApiResponse<List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult>> ApiAdminPoliciesFindPostWithHttpInfo(FindPoliciesRequest? findPoliciesRequest = default(FindPoliciesRequest?), int operationIndex = 0);
        /// <summary>
        /// Returns the policy details for a specified policy number
        /// </summary>
        /// <remarks>
        /// If the specified policy number is a renewal (policy number contains a &#39;/&#39;) then it must be URL encoded.
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyNumber">Sanitised URL-safe policy number</param>
        /// <param name="useAccountReference">An optional flag to determine whether or not to search for details using the Policy Number or the Account Reference  The policy number can contain version information (e.g. UINH0123456/7) whereas an Account Reference should never contain  it (e.g. UINH0123456) (optional)</param>
        /// <param name="policyStatus">An optional filter parameter which will look for any details matching a valid policy status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPolicyDetailsResponse</returns>
        GetPolicyDetailsResponse ApiAdminPoliciesPolicyNumberGet(string policyNumber, bool? useAccountReference = default(bool?), string? policyStatus = default(string?), int operationIndex = 0);

        /// <summary>
        /// Returns the policy details for a specified policy number
        /// </summary>
        /// <remarks>
        /// If the specified policy number is a renewal (policy number contains a &#39;/&#39;) then it must be URL encoded.
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyNumber">Sanitised URL-safe policy number</param>
        /// <param name="useAccountReference">An optional flag to determine whether or not to search for details using the Policy Number or the Account Reference  The policy number can contain version information (e.g. UINH0123456/7) whereas an Account Reference should never contain  it (e.g. UINH0123456) (optional)</param>
        /// <param name="policyStatus">An optional filter parameter which will look for any details matching a valid policy status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPolicyDetailsResponse</returns>
        ApiResponse<GetPolicyDetailsResponse> ApiAdminPoliciesPolicyNumberGetWithHttpInfo(string policyNumber, bool? useAccountReference = default(bool?), string? policyStatus = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesQueryApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Finds policies matching any or all from agreement number, surname, date of birth, risk address postcode, telephone number or policy status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findPoliciesRequest">The search request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult&gt;</returns>
        System.Threading.Tasks.Task<List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult>> ApiAdminPoliciesFindPostAsync(FindPoliciesRequest? findPoliciesRequest = default(FindPoliciesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Finds policies matching any or all from agreement number, surname, date of birth, risk address postcode, telephone number or policy status.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findPoliciesRequest">The search request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult>>> ApiAdminPoliciesFindPostWithHttpInfoAsync(FindPoliciesRequest? findPoliciesRequest = default(FindPoliciesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Returns the policy details for a specified policy number
        /// </summary>
        /// <remarks>
        /// If the specified policy number is a renewal (policy number contains a &#39;/&#39;) then it must be URL encoded.
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyNumber">Sanitised URL-safe policy number</param>
        /// <param name="useAccountReference">An optional flag to determine whether or not to search for details using the Policy Number or the Account Reference  The policy number can contain version information (e.g. UINH0123456/7) whereas an Account Reference should never contain  it (e.g. UINH0123456) (optional)</param>
        /// <param name="policyStatus">An optional filter parameter which will look for any details matching a valid policy status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPolicyDetailsResponse</returns>
        System.Threading.Tasks.Task<GetPolicyDetailsResponse> ApiAdminPoliciesPolicyNumberGetAsync(string policyNumber, bool? useAccountReference = default(bool?), string? policyStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Returns the policy details for a specified policy number
        /// </summary>
        /// <remarks>
        /// If the specified policy number is a renewal (policy number contains a &#39;/&#39;) then it must be URL encoded.
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyNumber">Sanitised URL-safe policy number</param>
        /// <param name="useAccountReference">An optional flag to determine whether or not to search for details using the Policy Number or the Account Reference  The policy number can contain version information (e.g. UINH0123456/7) whereas an Account Reference should never contain  it (e.g. UINH0123456) (optional)</param>
        /// <param name="policyStatus">An optional filter parameter which will look for any details matching a valid policy status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPolicyDetailsResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<GetPolicyDetailsResponse>> ApiAdminPoliciesPolicyNumberGetWithHttpInfoAsync(string policyNumber, bool? useAccountReference = default(bool?), string? policyStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPoliciesQueryApi : IPoliciesQueryApiSync, IPoliciesQueryApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PoliciesQueryApi : IPoliciesQueryApi
    {
        private Uinsure.CustomerPortal.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesQueryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoliciesQueryApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesQueryApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PoliciesQueryApi(string basePath)
        {
            this.Configuration = Uinsure.CustomerPortal.Client.Client.Configuration.MergeConfigurations(
                Uinsure.CustomerPortal.Client.Client.GlobalConfiguration.Instance,
                new Uinsure.CustomerPortal.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Uinsure.CustomerPortal.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesQueryApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PoliciesQueryApi(Uinsure.CustomerPortal.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Uinsure.CustomerPortal.Client.Client.Configuration.MergeConfigurations(
                Uinsure.CustomerPortal.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Uinsure.CustomerPortal.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PoliciesQueryApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PoliciesQueryApi(Uinsure.CustomerPortal.Client.Client.ISynchronousClient client, Uinsure.CustomerPortal.Client.Client.IAsynchronousClient asyncClient, Uinsure.CustomerPortal.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Uinsure.CustomerPortal.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Uinsure.CustomerPortal.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Uinsure.CustomerPortal.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Uinsure.CustomerPortal.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Uinsure.CustomerPortal.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Finds policies matching any or all from agreement number, surname, date of birth, risk address postcode, telephone number or policy status. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findPoliciesRequest">The search request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult&gt;</returns>
        public List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult> ApiAdminPoliciesFindPost(FindPoliciesRequest? findPoliciesRequest = default(FindPoliciesRequest?), int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.ApiResponse<List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult>> localVarResponse = ApiAdminPoliciesFindPostWithHttpInfo(findPoliciesRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finds policies matching any or all from agreement number, surname, date of birth, risk address postcode, telephone number or policy status. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findPoliciesRequest">The search request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult&gt;</returns>
        public Uinsure.CustomerPortal.Client.Client.ApiResponse<List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult>> ApiAdminPoliciesFindPostWithHttpInfo(FindPoliciesRequest? findPoliciesRequest = default(FindPoliciesRequest?), int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = findPoliciesRequest;

            localVarRequestOptions.Operation = "PoliciesQueryApi.ApiAdminPoliciesFindPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult>>("/api/admin/policies/find", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminPoliciesFindPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Finds policies matching any or all from agreement number, surname, date of birth, risk address postcode, telephone number or policy status. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findPoliciesRequest">The search request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult&gt;</returns>
        public async System.Threading.Tasks.Task<List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult>> ApiAdminPoliciesFindPostAsync(FindPoliciesRequest? findPoliciesRequest = default(FindPoliciesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Uinsure.CustomerPortal.Client.Client.ApiResponse<List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult>> localVarResponse = await ApiAdminPoliciesFindPostWithHttpInfoAsync(findPoliciesRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Finds policies matching any or all from agreement number, surname, date of birth, risk address postcode, telephone number or policy status. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="findPoliciesRequest">The search request (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult&gt;)</returns>
        public async System.Threading.Tasks.Task<Uinsure.CustomerPortal.Client.Client.ApiResponse<List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult>>> ApiAdminPoliciesFindPostWithHttpInfoAsync(FindPoliciesRequest? findPoliciesRequest = default(FindPoliciesRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = findPoliciesRequest;

            localVarRequestOptions.Operation = "PoliciesQueryApi.ApiAdminPoliciesFindPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<UinsureCustomerPortalInfrastructureQueryDTOFindPoliciesResult>>("/api/admin/policies/find", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminPoliciesFindPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the policy details for a specified policy number If the specified policy number is a renewal (policy number contains a &#39;/&#39;) then it must be URL encoded.
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyNumber">Sanitised URL-safe policy number</param>
        /// <param name="useAccountReference">An optional flag to determine whether or not to search for details using the Policy Number or the Account Reference  The policy number can contain version information (e.g. UINH0123456/7) whereas an Account Reference should never contain  it (e.g. UINH0123456) (optional)</param>
        /// <param name="policyStatus">An optional filter parameter which will look for any details matching a valid policy status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetPolicyDetailsResponse</returns>
        public GetPolicyDetailsResponse ApiAdminPoliciesPolicyNumberGet(string policyNumber, bool? useAccountReference = default(bool?), string? policyStatus = default(string?), int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.ApiResponse<GetPolicyDetailsResponse> localVarResponse = ApiAdminPoliciesPolicyNumberGetWithHttpInfo(policyNumber, useAccountReference, policyStatus);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the policy details for a specified policy number If the specified policy number is a renewal (policy number contains a &#39;/&#39;) then it must be URL encoded.
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyNumber">Sanitised URL-safe policy number</param>
        /// <param name="useAccountReference">An optional flag to determine whether or not to search for details using the Policy Number or the Account Reference  The policy number can contain version information (e.g. UINH0123456/7) whereas an Account Reference should never contain  it (e.g. UINH0123456) (optional)</param>
        /// <param name="policyStatus">An optional filter parameter which will look for any details matching a valid policy status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetPolicyDetailsResponse</returns>
        public Uinsure.CustomerPortal.Client.Client.ApiResponse<GetPolicyDetailsResponse> ApiAdminPoliciesPolicyNumberGetWithHttpInfo(string policyNumber, bool? useAccountReference = default(bool?), string? policyStatus = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'policyNumber' is set
            if (policyNumber == null)
            {
                throw new Uinsure.CustomerPortal.Client.Client.ApiException(400, "Missing required parameter 'policyNumber' when calling PoliciesQueryApi->ApiAdminPoliciesPolicyNumberGet");
            }

            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyNumber", Uinsure.CustomerPortal.Client.Client.ClientUtils.ParameterToString(policyNumber)); // path parameter
            if (useAccountReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(Uinsure.CustomerPortal.Client.Client.ClientUtils.ParameterToMultiMap("", "useAccountReference", useAccountReference));
            }
            if (policyStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Uinsure.CustomerPortal.Client.Client.ClientUtils.ParameterToMultiMap("", "policyStatus", policyStatus));
            }

            localVarRequestOptions.Operation = "PoliciesQueryApi.ApiAdminPoliciesPolicyNumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetPolicyDetailsResponse>("/api/admin/policies/{policyNumber}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminPoliciesPolicyNumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Returns the policy details for a specified policy number If the specified policy number is a renewal (policy number contains a &#39;/&#39;) then it must be URL encoded.
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyNumber">Sanitised URL-safe policy number</param>
        /// <param name="useAccountReference">An optional flag to determine whether or not to search for details using the Policy Number or the Account Reference  The policy number can contain version information (e.g. UINH0123456/7) whereas an Account Reference should never contain  it (e.g. UINH0123456) (optional)</param>
        /// <param name="policyStatus">An optional filter parameter which will look for any details matching a valid policy status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetPolicyDetailsResponse</returns>
        public async System.Threading.Tasks.Task<GetPolicyDetailsResponse> ApiAdminPoliciesPolicyNumberGetAsync(string policyNumber, bool? useAccountReference = default(bool?), string? policyStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Uinsure.CustomerPortal.Client.Client.ApiResponse<GetPolicyDetailsResponse> localVarResponse = await ApiAdminPoliciesPolicyNumberGetWithHttpInfoAsync(policyNumber, useAccountReference, policyStatus, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the policy details for a specified policy number If the specified policy number is a renewal (policy number contains a &#39;/&#39;) then it must be URL encoded.
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="policyNumber">Sanitised URL-safe policy number</param>
        /// <param name="useAccountReference">An optional flag to determine whether or not to search for details using the Policy Number or the Account Reference  The policy number can contain version information (e.g. UINH0123456/7) whereas an Account Reference should never contain  it (e.g. UINH0123456) (optional)</param>
        /// <param name="policyStatus">An optional filter parameter which will look for any details matching a valid policy status. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetPolicyDetailsResponse)</returns>
        public async System.Threading.Tasks.Task<Uinsure.CustomerPortal.Client.Client.ApiResponse<GetPolicyDetailsResponse>> ApiAdminPoliciesPolicyNumberGetWithHttpInfoAsync(string policyNumber, bool? useAccountReference = default(bool?), string? policyStatus = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'policyNumber' is set
            if (policyNumber == null)
            {
                throw new Uinsure.CustomerPortal.Client.Client.ApiException(400, "Missing required parameter 'policyNumber' when calling PoliciesQueryApi->ApiAdminPoliciesPolicyNumberGet");
            }


            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("policyNumber", Uinsure.CustomerPortal.Client.Client.ClientUtils.ParameterToString(policyNumber)); // path parameter
            if (useAccountReference != null)
            {
                localVarRequestOptions.QueryParameters.Add(Uinsure.CustomerPortal.Client.Client.ClientUtils.ParameterToMultiMap("", "useAccountReference", useAccountReference));
            }
            if (policyStatus != null)
            {
                localVarRequestOptions.QueryParameters.Add(Uinsure.CustomerPortal.Client.Client.ClientUtils.ParameterToMultiMap("", "policyStatus", policyStatus));
            }

            localVarRequestOptions.Operation = "PoliciesQueryApi.ApiAdminPoliciesPolicyNumberGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<GetPolicyDetailsResponse>("/api/admin/policies/{policyNumber}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiAdminPoliciesPolicyNumberGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
