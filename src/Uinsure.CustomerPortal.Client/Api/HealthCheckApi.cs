/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Uinsure.CustomerPortal.Client.Client;
using Uinsure.CustomerPortal.Client.Client.Auth;

namespace Uinsure.CustomerPortal.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHealthCheckApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-read permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working , and otherwise return \&quot;not OK\&quot; when it&#39;s not.
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ApiHealthCheckAuthGet(int operationIndex = 0);

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-read permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working , and otherwise return \&quot;not OK\&quot; when it&#39;s not.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiHealthCheckAuthGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-write permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working ,   and otherwise return \&quot;not OK\&quot; when it&#39;s not.
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ApiHealthCheckAuthPost(int operationIndex = 0);

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-write permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working ,   and otherwise return \&quot;not OK\&quot; when it&#39;s not.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiHealthCheckAuthPostWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// The default endpoint.    This is the default health check endpoint that can be used to assure that the system is correctly configured  and recieving HTTP requests.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working, and otherwise return \&quot;not OK\&quot;  if something is misconfigured but it can still handle the request
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        string ApiHealthCheckGet(int operationIndex = 0);

        /// <summary>
        /// The default endpoint.    This is the default health check endpoint that can be used to assure that the system is correctly configured  and recieving HTTP requests.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working, and otherwise return \&quot;not OK\&quot;  if something is misconfigured but it can still handle the request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ApiHealthCheckGetWithHttpInfo(int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHealthCheckApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-read permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working , and otherwise return \&quot;not OK\&quot; when it&#39;s not.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiHealthCheckAuthGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-read permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working , and otherwise return \&quot;not OK\&quot; when it&#39;s not.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiHealthCheckAuthGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-write permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working ,   and otherwise return \&quot;not OK\&quot; when it&#39;s not.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiHealthCheckAuthPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-write permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working ,   and otherwise return \&quot;not OK\&quot; when it&#39;s not.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiHealthCheckAuthPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// The default endpoint.    This is the default health check endpoint that can be used to assure that the system is correctly configured  and recieving HTTP requests.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working, and otherwise return \&quot;not OK\&quot;  if something is misconfigured but it can still handle the request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ApiHealthCheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// The default endpoint.    This is the default health check endpoint that can be used to assure that the system is correctly configured  and recieving HTTP requests.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working, and otherwise return \&quot;not OK\&quot;  if something is misconfigured but it can still handle the request
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ApiHealthCheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IHealthCheckApi : IHealthCheckApiSync, IHealthCheckApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class HealthCheckApi : IHealthCheckApi
    {
        private Uinsure.CustomerPortal.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HealthCheckApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckApi"/> class.
        /// </summary>
        /// <returns></returns>
        public HealthCheckApi(string basePath)
        {
            this.Configuration = Uinsure.CustomerPortal.Client.Client.Configuration.MergeConfigurations(
                Uinsure.CustomerPortal.Client.Client.GlobalConfiguration.Instance,
                new Uinsure.CustomerPortal.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Uinsure.CustomerPortal.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public HealthCheckApi(Uinsure.CustomerPortal.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Uinsure.CustomerPortal.Client.Client.Configuration.MergeConfigurations(
                Uinsure.CustomerPortal.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Uinsure.CustomerPortal.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HealthCheckApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public HealthCheckApi(Uinsure.CustomerPortal.Client.Client.ISynchronousClient client, Uinsure.CustomerPortal.Client.Client.IAsynchronousClient asyncClient, Uinsure.CustomerPortal.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Uinsure.CustomerPortal.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Uinsure.CustomerPortal.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Uinsure.CustomerPortal.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Uinsure.CustomerPortal.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Uinsure.CustomerPortal.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-read permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working , and otherwise return \&quot;not OK\&quot; when it&#39;s not. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ApiHealthCheckAuthGet(int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.ApiResponse<string> localVarResponse = ApiHealthCheckAuthGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-read permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working , and otherwise return \&quot;not OK\&quot; when it&#39;s not. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Uinsure.CustomerPortal.Client.Client.ApiResponse<string> ApiHealthCheckAuthGetWithHttpInfo(int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "HealthCheckApi.ApiHealthCheckAuthGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/api/HealthCheck/auth", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiHealthCheckAuthGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-read permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working , and otherwise return \&quot;not OK\&quot; when it&#39;s not. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiHealthCheckAuthGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Uinsure.CustomerPortal.Client.Client.ApiResponse<string> localVarResponse = await ApiHealthCheckAuthGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-read permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working , and otherwise return \&quot;not OK\&quot; when it&#39;s not. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Uinsure.CustomerPortal.Client.Client.ApiResponse<string>> ApiHealthCheckAuthGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "HealthCheckApi.ApiHealthCheckAuthGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/api/HealthCheck/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiHealthCheckAuthGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-write permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working ,   and otherwise return \&quot;not OK\&quot; when it&#39;s not. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ApiHealthCheckAuthPost(int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.ApiResponse<string> localVarResponse = ApiHealthCheckAuthPostWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-write permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working ,   and otherwise return \&quot;not OK\&quot; when it&#39;s not. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Uinsure.CustomerPortal.Client.Client.ApiResponse<string> ApiHealthCheckAuthPostWithHttpInfo(int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "HealthCheckApi.ApiHealthCheckAuthPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<string>("/api/HealthCheck/auth", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiHealthCheckAuthPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-write permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working ,   and otherwise return \&quot;not OK\&quot; when it&#39;s not. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiHealthCheckAuthPostAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Uinsure.CustomerPortal.Client.Client.ApiResponse<string> localVarResponse = await ApiHealthCheckAuthPostWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// An additional healthcheck endpoint that validates an authorized request with api-write permission.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working ,   and otherwise return \&quot;not OK\&quot; when it&#39;s not. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Uinsure.CustomerPortal.Client.Client.ApiResponse<string>> ApiHealthCheckAuthPostWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "HealthCheckApi.ApiHealthCheckAuthPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<string>("/api/HealthCheck/auth", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiHealthCheckAuthPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The default endpoint.    This is the default health check endpoint that can be used to assure that the system is correctly configured  and recieving HTTP requests.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working, and otherwise return \&quot;not OK\&quot;  if something is misconfigured but it can still handle the request 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>string</returns>
        public string ApiHealthCheckGet(int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.ApiResponse<string> localVarResponse = ApiHealthCheckGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// The default endpoint.    This is the default health check endpoint that can be used to assure that the system is correctly configured  and recieving HTTP requests.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working, and otherwise return \&quot;not OK\&quot;  if something is misconfigured but it can still handle the request 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of string</returns>
        public Uinsure.CustomerPortal.Client.Client.ApiResponse<string> ApiHealthCheckGetWithHttpInfo(int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "HealthCheckApi.ApiHealthCheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/api/HealthCheck", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiHealthCheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// The default endpoint.    This is the default health check endpoint that can be used to assure that the system is correctly configured  and recieving HTTP requests.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working, and otherwise return \&quot;not OK\&quot;  if something is misconfigured but it can still handle the request 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ApiHealthCheckGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Uinsure.CustomerPortal.Client.Client.ApiResponse<string> localVarResponse = await ApiHealthCheckGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// The default endpoint.    This is the default health check endpoint that can be used to assure that the system is correctly configured  and recieving HTTP requests.    This healthcheck endpoint will return \&quot;ok\&quot; when everything is assumed to be working, and otherwise return \&quot;not OK\&quot;  if something is misconfigured but it can still handle the request 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<Uinsure.CustomerPortal.Client.Client.ApiResponse<string>> ApiHealthCheckGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "HealthCheckApi.ApiHealthCheckGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/api/HealthCheck", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiHealthCheckGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
