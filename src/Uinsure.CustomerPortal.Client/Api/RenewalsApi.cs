/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Uinsure.CustomerPortal.Client.Client;
using Uinsure.CustomerPortal.Client.Client.Auth;
using Uinsure.CustomerPortal.Client.Model;

namespace Uinsure.CustomerPortal.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRenewalsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Updates the email address for the policy renewal.
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiRenewalsEmailUpdatePost(UpdateEmailAddress? updateEmailAddress = default(UpdateEmailAddress?), int operationIndex = 0);

        /// <summary>
        /// Updates the email address for the policy renewal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiRenewalsEmailUpdatePostWithHttpInfo(UpdateEmailAddress? updateEmailAddress = default(UpdateEmailAddress?), int operationIndex = 0);
        /// <summary>
        /// Updates the opt in choice for the policy renewal.
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optInRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void ApiRenewalsOptInPost(OptInRequest? optInRequest = default(OptInRequest?), int operationIndex = 0);

        /// <summary>
        /// Updates the opt in choice for the policy renewal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optInRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ApiRenewalsOptInPostWithHttpInfo(OptInRequest? optInRequest = default(OptInRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRenewalsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Updates the email address for the policy renewal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiRenewalsEmailUpdatePostAsync(UpdateEmailAddress? updateEmailAddress = default(UpdateEmailAddress?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the email address for the policy renewal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiRenewalsEmailUpdatePostWithHttpInfoAsync(UpdateEmailAddress? updateEmailAddress = default(UpdateEmailAddress?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the opt in choice for the policy renewal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optInRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ApiRenewalsOptInPostAsync(OptInRequest? optInRequest = default(OptInRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the opt in choice for the policy renewal.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optInRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ApiRenewalsOptInPostWithHttpInfoAsync(OptInRequest? optInRequest = default(OptInRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRenewalsApi : IRenewalsApiSync, IRenewalsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RenewalsApi : IRenewalsApi
    {
        private Uinsure.CustomerPortal.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RenewalsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RenewalsApi(string basePath)
        {
            this.Configuration = Uinsure.CustomerPortal.Client.Client.Configuration.MergeConfigurations(
                Uinsure.CustomerPortal.Client.Client.GlobalConfiguration.Instance,
                new Uinsure.CustomerPortal.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Uinsure.CustomerPortal.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RenewalsApi(Uinsure.CustomerPortal.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Uinsure.CustomerPortal.Client.Client.Configuration.MergeConfigurations(
                Uinsure.CustomerPortal.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Uinsure.CustomerPortal.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Uinsure.CustomerPortal.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RenewalsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RenewalsApi(Uinsure.CustomerPortal.Client.Client.ISynchronousClient client, Uinsure.CustomerPortal.Client.Client.IAsynchronousClient asyncClient, Uinsure.CustomerPortal.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Uinsure.CustomerPortal.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Uinsure.CustomerPortal.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Uinsure.CustomerPortal.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Uinsure.CustomerPortal.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Uinsure.CustomerPortal.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Updates the email address for the policy renewal. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiRenewalsEmailUpdatePost(UpdateEmailAddress? updateEmailAddress = default(UpdateEmailAddress?), int operationIndex = 0)
        {
            ApiRenewalsEmailUpdatePostWithHttpInfo(updateEmailAddress);
        }

        /// <summary>
        /// Updates the email address for the policy renewal. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Uinsure.CustomerPortal.Client.Client.ApiResponse<Object> ApiRenewalsEmailUpdatePostWithHttpInfo(UpdateEmailAddress? updateEmailAddress = default(UpdateEmailAddress?), int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateEmailAddress;

            localVarRequestOptions.Operation = "RenewalsApi.ApiRenewalsEmailUpdatePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Renewals/email/update", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRenewalsEmailUpdatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the email address for the policy renewal. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiRenewalsEmailUpdatePostAsync(UpdateEmailAddress? updateEmailAddress = default(UpdateEmailAddress?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiRenewalsEmailUpdatePostWithHttpInfoAsync(updateEmailAddress, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates the email address for the policy renewal. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="updateEmailAddress"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Uinsure.CustomerPortal.Client.Client.ApiResponse<Object>> ApiRenewalsEmailUpdatePostWithHttpInfoAsync(UpdateEmailAddress? updateEmailAddress = default(UpdateEmailAddress?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = updateEmailAddress;

            localVarRequestOptions.Operation = "RenewalsApi.ApiRenewalsEmailUpdatePost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Renewals/email/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRenewalsEmailUpdatePost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the opt in choice for the policy renewal. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optInRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void ApiRenewalsOptInPost(OptInRequest? optInRequest = default(OptInRequest?), int operationIndex = 0)
        {
            ApiRenewalsOptInPostWithHttpInfo(optInRequest);
        }

        /// <summary>
        /// Updates the opt in choice for the policy renewal. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optInRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Uinsure.CustomerPortal.Client.Client.ApiResponse<Object> ApiRenewalsOptInPostWithHttpInfo(OptInRequest? optInRequest = default(OptInRequest?), int operationIndex = 0)
        {
            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = optInRequest;

            localVarRequestOptions.Operation = "RenewalsApi.ApiRenewalsOptInPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/api/Renewals/opt-in", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRenewalsOptInPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the opt in choice for the policy renewal. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optInRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ApiRenewalsOptInPostAsync(OptInRequest? optInRequest = default(OptInRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await ApiRenewalsOptInPostWithHttpInfoAsync(optInRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates the opt in choice for the policy renewal. 
        /// </summary>
        /// <exception cref="Uinsure.CustomerPortal.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="optInRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Uinsure.CustomerPortal.Client.Client.ApiResponse<Object>> ApiRenewalsOptInPostWithHttpInfoAsync(OptInRequest? optInRequest = default(OptInRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Uinsure.CustomerPortal.Client.Client.RequestOptions localVarRequestOptions = new Uinsure.CustomerPortal.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Uinsure.CustomerPortal.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = optInRequest;

            localVarRequestOptions.Operation = "RenewalsApi.ApiRenewalsOptInPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth2) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/api/Renewals/opt-in", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ApiRenewalsOptInPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
