/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// DTO containing a details relating to a single claim
    /// </summary>
    [DataContract(Name = "Claim")]
    public partial class Claim : IEquatable<Claim>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Claim" /> class.
        /// </summary>
        /// <param name="claimReference">Claim reference.</param>
        /// <param name="insurerName">Insurer associated with the claim.</param>
        /// <param name="claimStatus">Claim status.</param>
        /// <param name="lossDate">Date of loss.</param>
        /// <param name="lossDescription">Description of loss.</param>
        /// <param name="claimType">Type of claim.</param>
        /// <param name="detailedStatus">Detailed status of the claim.</param>
        /// <param name="claimSection">Claim section.</param>
        /// <param name="closedDate">Date that the claim was closed.</param>
        /// <param name="includeInClaimsCalculation">Will this claim affect the quote calculation?.</param>
        /// <param name="totalClaimCost">Total cost of the claim.</param>
        public Claim(string claimReference = default(string), string insurerName = default(string), string claimStatus = default(string), DateTime? lossDate = default(DateTime?), string lossDescription = default(string), string claimType = default(string), string detailedStatus = default(string), string claimSection = default(string), DateTime? closedDate = default(DateTime?), bool? includeInClaimsCalculation = default(bool?), double? totalClaimCost = default(double?))
        {
            this._ClaimReference = claimReference;
            if (this.ClaimReference != null)
            {
                this._flagClaimReference = true;
            }
            this._InsurerName = insurerName;
            if (this.InsurerName != null)
            {
                this._flagInsurerName = true;
            }
            this._ClaimStatus = claimStatus;
            if (this.ClaimStatus != null)
            {
                this._flagClaimStatus = true;
            }
            this._LossDate = lossDate;
            if (this.LossDate != null)
            {
                this._flagLossDate = true;
            }
            this._LossDescription = lossDescription;
            if (this.LossDescription != null)
            {
                this._flagLossDescription = true;
            }
            this._ClaimType = claimType;
            if (this.ClaimType != null)
            {
                this._flagClaimType = true;
            }
            this._DetailedStatus = detailedStatus;
            if (this.DetailedStatus != null)
            {
                this._flagDetailedStatus = true;
            }
            this._ClaimSection = claimSection;
            if (this.ClaimSection != null)
            {
                this._flagClaimSection = true;
            }
            this._ClosedDate = closedDate;
            if (this.ClosedDate != null)
            {
                this._flagClosedDate = true;
            }
            this._IncludeInClaimsCalculation = includeInClaimsCalculation;
            if (this.IncludeInClaimsCalculation != null)
            {
                this._flagIncludeInClaimsCalculation = true;
            }
            this._TotalClaimCost = totalClaimCost;
            if (this.TotalClaimCost != null)
            {
                this._flagTotalClaimCost = true;
            }
        }

        /// <summary>
        /// Claim reference
        /// </summary>
        /// <value>Claim reference</value>
        [DataMember(Name = "ClaimReference", EmitDefaultValue = true)]
        public string ClaimReference
        {
            get{ return _ClaimReference;}
            set
            {
                _ClaimReference = value;
                _flagClaimReference = true;
            }
        }
        private string _ClaimReference;
        private bool _flagClaimReference;

        /// <summary>
        /// Returns false as ClaimReference should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClaimReference()
        {
            return _flagClaimReference;
        }
        /// <summary>
        /// Insurer associated with the claim
        /// </summary>
        /// <value>Insurer associated with the claim</value>
        [DataMember(Name = "InsurerName", EmitDefaultValue = true)]
        public string InsurerName
        {
            get{ return _InsurerName;}
            set
            {
                _InsurerName = value;
                _flagInsurerName = true;
            }
        }
        private string _InsurerName;
        private bool _flagInsurerName;

        /// <summary>
        /// Returns false as InsurerName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInsurerName()
        {
            return _flagInsurerName;
        }
        /// <summary>
        /// Claim status
        /// </summary>
        /// <value>Claim status</value>
        [DataMember(Name = "ClaimStatus", EmitDefaultValue = true)]
        public string ClaimStatus
        {
            get{ return _ClaimStatus;}
            set
            {
                _ClaimStatus = value;
                _flagClaimStatus = true;
            }
        }
        private string _ClaimStatus;
        private bool _flagClaimStatus;

        /// <summary>
        /// Returns false as ClaimStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClaimStatus()
        {
            return _flagClaimStatus;
        }
        /// <summary>
        /// Date of loss
        /// </summary>
        /// <value>Date of loss</value>
        [DataMember(Name = "LossDate", EmitDefaultValue = true)]
        public DateTime? LossDate
        {
            get{ return _LossDate;}
            set
            {
                _LossDate = value;
                _flagLossDate = true;
            }
        }
        private DateTime? _LossDate;
        private bool _flagLossDate;

        /// <summary>
        /// Returns false as LossDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLossDate()
        {
            return _flagLossDate;
        }
        /// <summary>
        /// Description of loss
        /// </summary>
        /// <value>Description of loss</value>
        [DataMember(Name = "LossDescription", EmitDefaultValue = true)]
        public string LossDescription
        {
            get{ return _LossDescription;}
            set
            {
                _LossDescription = value;
                _flagLossDescription = true;
            }
        }
        private string _LossDescription;
        private bool _flagLossDescription;

        /// <summary>
        /// Returns false as LossDescription should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLossDescription()
        {
            return _flagLossDescription;
        }
        /// <summary>
        /// Type of claim
        /// </summary>
        /// <value>Type of claim</value>
        [DataMember(Name = "ClaimType", EmitDefaultValue = true)]
        public string ClaimType
        {
            get{ return _ClaimType;}
            set
            {
                _ClaimType = value;
                _flagClaimType = true;
            }
        }
        private string _ClaimType;
        private bool _flagClaimType;

        /// <summary>
        /// Returns false as ClaimType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClaimType()
        {
            return _flagClaimType;
        }
        /// <summary>
        /// Detailed status of the claim
        /// </summary>
        /// <value>Detailed status of the claim</value>
        [DataMember(Name = "DetailedStatus", EmitDefaultValue = true)]
        public string DetailedStatus
        {
            get{ return _DetailedStatus;}
            set
            {
                _DetailedStatus = value;
                _flagDetailedStatus = true;
            }
        }
        private string _DetailedStatus;
        private bool _flagDetailedStatus;

        /// <summary>
        /// Returns false as DetailedStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDetailedStatus()
        {
            return _flagDetailedStatus;
        }
        /// <summary>
        /// Claim section
        /// </summary>
        /// <value>Claim section</value>
        [DataMember(Name = "ClaimSection", EmitDefaultValue = true)]
        public string ClaimSection
        {
            get{ return _ClaimSection;}
            set
            {
                _ClaimSection = value;
                _flagClaimSection = true;
            }
        }
        private string _ClaimSection;
        private bool _flagClaimSection;

        /// <summary>
        /// Returns false as ClaimSection should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClaimSection()
        {
            return _flagClaimSection;
        }
        /// <summary>
        /// Date that the claim was closed
        /// </summary>
        /// <value>Date that the claim was closed</value>
        [DataMember(Name = "ClosedDate", EmitDefaultValue = true)]
        public DateTime? ClosedDate
        {
            get{ return _ClosedDate;}
            set
            {
                _ClosedDate = value;
                _flagClosedDate = true;
            }
        }
        private DateTime? _ClosedDate;
        private bool _flagClosedDate;

        /// <summary>
        /// Returns false as ClosedDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClosedDate()
        {
            return _flagClosedDate;
        }
        /// <summary>
        /// Will this claim affect the quote calculation?
        /// </summary>
        /// <value>Will this claim affect the quote calculation?</value>
        [DataMember(Name = "IncludeInClaimsCalculation", EmitDefaultValue = true)]
        public bool? IncludeInClaimsCalculation
        {
            get{ return _IncludeInClaimsCalculation;}
            set
            {
                _IncludeInClaimsCalculation = value;
                _flagIncludeInClaimsCalculation = true;
            }
        }
        private bool? _IncludeInClaimsCalculation;
        private bool _flagIncludeInClaimsCalculation;

        /// <summary>
        /// Returns false as IncludeInClaimsCalculation should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIncludeInClaimsCalculation()
        {
            return _flagIncludeInClaimsCalculation;
        }
        /// <summary>
        /// Total cost of the claim
        /// </summary>
        /// <value>Total cost of the claim</value>
        [DataMember(Name = "TotalClaimCost", EmitDefaultValue = true)]
        public double? TotalClaimCost
        {
            get{ return _TotalClaimCost;}
            set
            {
                _TotalClaimCost = value;
                _flagTotalClaimCost = true;
            }
        }
        private double? _TotalClaimCost;
        private bool _flagTotalClaimCost;

        /// <summary>
        /// Returns false as TotalClaimCost should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalClaimCost()
        {
            return _flagTotalClaimCost;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Claim {\n");
            sb.Append("  ClaimReference: ").Append(ClaimReference).Append("\n");
            sb.Append("  InsurerName: ").Append(InsurerName).Append("\n");
            sb.Append("  ClaimStatus: ").Append(ClaimStatus).Append("\n");
            sb.Append("  LossDate: ").Append(LossDate).Append("\n");
            sb.Append("  LossDescription: ").Append(LossDescription).Append("\n");
            sb.Append("  ClaimType: ").Append(ClaimType).Append("\n");
            sb.Append("  DetailedStatus: ").Append(DetailedStatus).Append("\n");
            sb.Append("  ClaimSection: ").Append(ClaimSection).Append("\n");
            sb.Append("  ClosedDate: ").Append(ClosedDate).Append("\n");
            sb.Append("  IncludeInClaimsCalculation: ").Append(IncludeInClaimsCalculation).Append("\n");
            sb.Append("  TotalClaimCost: ").Append(TotalClaimCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Claim);
        }

        /// <summary>
        /// Returns true if Claim instances are equal
        /// </summary>
        /// <param name="input">Instance of Claim to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Claim input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ClaimReference == input.ClaimReference ||
                    (this.ClaimReference != null &&
                    this.ClaimReference.Equals(input.ClaimReference))
                ) && 
                (
                    this.InsurerName == input.InsurerName ||
                    (this.InsurerName != null &&
                    this.InsurerName.Equals(input.InsurerName))
                ) && 
                (
                    this.ClaimStatus == input.ClaimStatus ||
                    (this.ClaimStatus != null &&
                    this.ClaimStatus.Equals(input.ClaimStatus))
                ) && 
                (
                    this.LossDate == input.LossDate ||
                    (this.LossDate != null &&
                    this.LossDate.Equals(input.LossDate))
                ) && 
                (
                    this.LossDescription == input.LossDescription ||
                    (this.LossDescription != null &&
                    this.LossDescription.Equals(input.LossDescription))
                ) && 
                (
                    this.ClaimType == input.ClaimType ||
                    (this.ClaimType != null &&
                    this.ClaimType.Equals(input.ClaimType))
                ) && 
                (
                    this.DetailedStatus == input.DetailedStatus ||
                    (this.DetailedStatus != null &&
                    this.DetailedStatus.Equals(input.DetailedStatus))
                ) && 
                (
                    this.ClaimSection == input.ClaimSection ||
                    (this.ClaimSection != null &&
                    this.ClaimSection.Equals(input.ClaimSection))
                ) && 
                (
                    this.ClosedDate == input.ClosedDate ||
                    (this.ClosedDate != null &&
                    this.ClosedDate.Equals(input.ClosedDate))
                ) && 
                (
                    this.IncludeInClaimsCalculation == input.IncludeInClaimsCalculation ||
                    (this.IncludeInClaimsCalculation != null &&
                    this.IncludeInClaimsCalculation.Equals(input.IncludeInClaimsCalculation))
                ) && 
                (
                    this.TotalClaimCost == input.TotalClaimCost ||
                    (this.TotalClaimCost != null &&
                    this.TotalClaimCost.Equals(input.TotalClaimCost))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ClaimReference != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimReference.GetHashCode();
                }
                if (this.InsurerName != null)
                {
                    hashCode = (hashCode * 59) + this.InsurerName.GetHashCode();
                }
                if (this.ClaimStatus != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimStatus.GetHashCode();
                }
                if (this.LossDate != null)
                {
                    hashCode = (hashCode * 59) + this.LossDate.GetHashCode();
                }
                if (this.LossDescription != null)
                {
                    hashCode = (hashCode * 59) + this.LossDescription.GetHashCode();
                }
                if (this.ClaimType != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimType.GetHashCode();
                }
                if (this.DetailedStatus != null)
                {
                    hashCode = (hashCode * 59) + this.DetailedStatus.GetHashCode();
                }
                if (this.ClaimSection != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimSection.GetHashCode();
                }
                if (this.ClosedDate != null)
                {
                    hashCode = (hashCode * 59) + this.ClosedDate.GetHashCode();
                }
                if (this.IncludeInClaimsCalculation != null)
                {
                    hashCode = (hashCode * 59) + this.IncludeInClaimsCalculation.GetHashCode();
                }
                if (this.TotalClaimCost != null)
                {
                    hashCode = (hashCode * 59) + this.TotalClaimCost.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
