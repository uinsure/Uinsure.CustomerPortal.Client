/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// Ancillaries
    /// </summary>
    [DataContract(Name = "Ancillaries")]
    public partial class Ancillaries : IEquatable<Ancillaries>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Ancillaries" /> class.
        /// </summary>
        /// <param name="bTLBuildingsManufactureOfDrugs">bTLBuildingsManufactureOfDrugs.</param>
        /// <param name="bTLFlatDeclaration">bTLFlatDeclaration.</param>
        /// <param name="bTLRACover">bTLRACover.</param>
        /// <param name="bTLTenantType">bTLTenantType.</param>
        /// <param name="isFamilyLegalProtectionIncluded">isFamilyLegalProtectionIncluded.</param>
        /// <param name="isHomeEmergencyCoverIncluded">isHomeEmergencyCoverIncluded.</param>
        public Ancillaries(bool? bTLBuildingsManufactureOfDrugs = default(bool?), string bTLFlatDeclaration = default(string), bool? bTLRACover = default(bool?), string bTLTenantType = default(string), bool? isFamilyLegalProtectionIncluded = default(bool?), bool? isHomeEmergencyCoverIncluded = default(bool?))
        {
            this._BTLBuildingsManufactureOfDrugs = bTLBuildingsManufactureOfDrugs;
            if (this.BTLBuildingsManufactureOfDrugs != null)
            {
                this._flagBTLBuildingsManufactureOfDrugs = true;
            }
            this._BTLFlatDeclaration = bTLFlatDeclaration;
            if (this.BTLFlatDeclaration != null)
            {
                this._flagBTLFlatDeclaration = true;
            }
            this._BTLRACover = bTLRACover;
            if (this.BTLRACover != null)
            {
                this._flagBTLRACover = true;
            }
            this._BTLTenantType = bTLTenantType;
            if (this.BTLTenantType != null)
            {
                this._flagBTLTenantType = true;
            }
            this._IsFamilyLegalProtectionIncluded = isFamilyLegalProtectionIncluded;
            if (this.IsFamilyLegalProtectionIncluded != null)
            {
                this._flagIsFamilyLegalProtectionIncluded = true;
            }
            this._IsHomeEmergencyCoverIncluded = isHomeEmergencyCoverIncluded;
            if (this.IsHomeEmergencyCoverIncluded != null)
            {
                this._flagIsHomeEmergencyCoverIncluded = true;
            }
        }

        /// <summary>
        /// Gets or Sets BTLBuildingsManufactureOfDrugs
        /// </summary>
        [DataMember(Name = "BTLBuildingsManufactureOfDrugs", EmitDefaultValue = true)]
        public bool? BTLBuildingsManufactureOfDrugs
        {
            get{ return _BTLBuildingsManufactureOfDrugs;}
            set
            {
                _BTLBuildingsManufactureOfDrugs = value;
                _flagBTLBuildingsManufactureOfDrugs = true;
            }
        }
        private bool? _BTLBuildingsManufactureOfDrugs;
        private bool _flagBTLBuildingsManufactureOfDrugs;

        /// <summary>
        /// Returns false as BTLBuildingsManufactureOfDrugs should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBTLBuildingsManufactureOfDrugs()
        {
            return _flagBTLBuildingsManufactureOfDrugs;
        }
        /// <summary>
        /// Gets or Sets BTLFlatDeclaration
        /// </summary>
        [DataMember(Name = "BTLFlatDeclaration", EmitDefaultValue = true)]
        public string BTLFlatDeclaration
        {
            get{ return _BTLFlatDeclaration;}
            set
            {
                _BTLFlatDeclaration = value;
                _flagBTLFlatDeclaration = true;
            }
        }
        private string _BTLFlatDeclaration;
        private bool _flagBTLFlatDeclaration;

        /// <summary>
        /// Returns false as BTLFlatDeclaration should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBTLFlatDeclaration()
        {
            return _flagBTLFlatDeclaration;
        }
        /// <summary>
        /// Gets or Sets BTLRACover
        /// </summary>
        [DataMember(Name = "BTLRACover", EmitDefaultValue = true)]
        public bool? BTLRACover
        {
            get{ return _BTLRACover;}
            set
            {
                _BTLRACover = value;
                _flagBTLRACover = true;
            }
        }
        private bool? _BTLRACover;
        private bool _flagBTLRACover;

        /// <summary>
        /// Returns false as BTLRACover should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBTLRACover()
        {
            return _flagBTLRACover;
        }
        /// <summary>
        /// Gets or Sets BTLTenantType
        /// </summary>
        [DataMember(Name = "BTLTenantType", EmitDefaultValue = true)]
        public string BTLTenantType
        {
            get{ return _BTLTenantType;}
            set
            {
                _BTLTenantType = value;
                _flagBTLTenantType = true;
            }
        }
        private string _BTLTenantType;
        private bool _flagBTLTenantType;

        /// <summary>
        /// Returns false as BTLTenantType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBTLTenantType()
        {
            return _flagBTLTenantType;
        }
        /// <summary>
        /// Gets or Sets IsFamilyLegalProtectionIncluded
        /// </summary>
        [DataMember(Name = "IsFamilyLegalProtectionIncluded", EmitDefaultValue = true)]
        public bool? IsFamilyLegalProtectionIncluded
        {
            get{ return _IsFamilyLegalProtectionIncluded;}
            set
            {
                _IsFamilyLegalProtectionIncluded = value;
                _flagIsFamilyLegalProtectionIncluded = true;
            }
        }
        private bool? _IsFamilyLegalProtectionIncluded;
        private bool _flagIsFamilyLegalProtectionIncluded;

        /// <summary>
        /// Returns false as IsFamilyLegalProtectionIncluded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsFamilyLegalProtectionIncluded()
        {
            return _flagIsFamilyLegalProtectionIncluded;
        }
        /// <summary>
        /// Gets or Sets IsHomeEmergencyCoverIncluded
        /// </summary>
        [DataMember(Name = "IsHomeEmergencyCoverIncluded", EmitDefaultValue = true)]
        public bool? IsHomeEmergencyCoverIncluded
        {
            get{ return _IsHomeEmergencyCoverIncluded;}
            set
            {
                _IsHomeEmergencyCoverIncluded = value;
                _flagIsHomeEmergencyCoverIncluded = true;
            }
        }
        private bool? _IsHomeEmergencyCoverIncluded;
        private bool _flagIsHomeEmergencyCoverIncluded;

        /// <summary>
        /// Returns false as IsHomeEmergencyCoverIncluded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsHomeEmergencyCoverIncluded()
        {
            return _flagIsHomeEmergencyCoverIncluded;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Ancillaries {\n");
            sb.Append("  BTLBuildingsManufactureOfDrugs: ").Append(BTLBuildingsManufactureOfDrugs).Append("\n");
            sb.Append("  BTLFlatDeclaration: ").Append(BTLFlatDeclaration).Append("\n");
            sb.Append("  BTLRACover: ").Append(BTLRACover).Append("\n");
            sb.Append("  BTLTenantType: ").Append(BTLTenantType).Append("\n");
            sb.Append("  IsFamilyLegalProtectionIncluded: ").Append(IsFamilyLegalProtectionIncluded).Append("\n");
            sb.Append("  IsHomeEmergencyCoverIncluded: ").Append(IsHomeEmergencyCoverIncluded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Ancillaries);
        }

        /// <summary>
        /// Returns true if Ancillaries instances are equal
        /// </summary>
        /// <param name="input">Instance of Ancillaries to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ancillaries input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BTLBuildingsManufactureOfDrugs == input.BTLBuildingsManufactureOfDrugs ||
                    (this.BTLBuildingsManufactureOfDrugs != null &&
                    this.BTLBuildingsManufactureOfDrugs.Equals(input.BTLBuildingsManufactureOfDrugs))
                ) && 
                (
                    this.BTLFlatDeclaration == input.BTLFlatDeclaration ||
                    (this.BTLFlatDeclaration != null &&
                    this.BTLFlatDeclaration.Equals(input.BTLFlatDeclaration))
                ) && 
                (
                    this.BTLRACover == input.BTLRACover ||
                    (this.BTLRACover != null &&
                    this.BTLRACover.Equals(input.BTLRACover))
                ) && 
                (
                    this.BTLTenantType == input.BTLTenantType ||
                    (this.BTLTenantType != null &&
                    this.BTLTenantType.Equals(input.BTLTenantType))
                ) && 
                (
                    this.IsFamilyLegalProtectionIncluded == input.IsFamilyLegalProtectionIncluded ||
                    (this.IsFamilyLegalProtectionIncluded != null &&
                    this.IsFamilyLegalProtectionIncluded.Equals(input.IsFamilyLegalProtectionIncluded))
                ) && 
                (
                    this.IsHomeEmergencyCoverIncluded == input.IsHomeEmergencyCoverIncluded ||
                    (this.IsHomeEmergencyCoverIncluded != null &&
                    this.IsHomeEmergencyCoverIncluded.Equals(input.IsHomeEmergencyCoverIncluded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BTLBuildingsManufactureOfDrugs != null)
                {
                    hashCode = (hashCode * 59) + this.BTLBuildingsManufactureOfDrugs.GetHashCode();
                }
                if (this.BTLFlatDeclaration != null)
                {
                    hashCode = (hashCode * 59) + this.BTLFlatDeclaration.GetHashCode();
                }
                if (this.BTLRACover != null)
                {
                    hashCode = (hashCode * 59) + this.BTLRACover.GetHashCode();
                }
                if (this.BTLTenantType != null)
                {
                    hashCode = (hashCode * 59) + this.BTLTenantType.GetHashCode();
                }
                if (this.IsFamilyLegalProtectionIncluded != null)
                {
                    hashCode = (hashCode * 59) + this.IsFamilyLegalProtectionIncluded.GetHashCode();
                }
                if (this.IsHomeEmergencyCoverIncluded != null)
                {
                    hashCode = (hashCode * 59) + this.IsHomeEmergencyCoverIncluded.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
