/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// FindPoliciesResult
    /// </summary>
    [DataContract(Name = "FindPoliciesResult")]
    public partial class FindPoliciesResult : IEquatable<FindPoliciesResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FindPoliciesResult" /> class.
        /// </summary>
        /// <param name="policyNumber">policyNumber.</param>
        /// <param name="startDate">startDate.</param>
        /// <param name="policyType">policyType.</param>
        /// <param name="policyStatus">policyStatus.</param>
        /// <param name="riskAddress">riskAddress.</param>
        /// <param name="applicant1">applicant1.</param>
        /// <param name="applicant2">applicant2.</param>
        /// <param name="dataQualityIssueFlag">dataQualityIssueFlag.</param>
        /// <param name="policyIssueFlag">policyIssueFlag.</param>
        public FindPoliciesResult(string policyNumber = default(string), DateTime? startDate = default(DateTime?), string policyType = default(string), string policyStatus = default(string), Address riskAddress = default(Address), string applicant1 = default(string), string applicant2 = default(string), bool? dataQualityIssueFlag = default(bool?), bool? policyIssueFlag = default(bool?))
        {
            this._PolicyNumber = policyNumber;
            if (this.PolicyNumber != null)
            {
                this._flagPolicyNumber = true;
            }
            this._StartDate = startDate;
            if (this.StartDate != null)
            {
                this._flagStartDate = true;
            }
            this._PolicyType = policyType;
            if (this.PolicyType != null)
            {
                this._flagPolicyType = true;
            }
            this._PolicyStatus = policyStatus;
            if (this.PolicyStatus != null)
            {
                this._flagPolicyStatus = true;
            }
            this._RiskAddress = riskAddress;
            if (this.RiskAddress != null)
            {
                this._flagRiskAddress = true;
            }
            this._Applicant1 = applicant1;
            if (this.Applicant1 != null)
            {
                this._flagApplicant1 = true;
            }
            this._Applicant2 = applicant2;
            if (this.Applicant2 != null)
            {
                this._flagApplicant2 = true;
            }
            this._DataQualityIssueFlag = dataQualityIssueFlag;
            if (this.DataQualityIssueFlag != null)
            {
                this._flagDataQualityIssueFlag = true;
            }
            this._PolicyIssueFlag = policyIssueFlag;
            if (this.PolicyIssueFlag != null)
            {
                this._flagPolicyIssueFlag = true;
            }
        }

        /// <summary>
        /// Gets or Sets PolicyNumber
        /// </summary>
        [DataMember(Name = "PolicyNumber", EmitDefaultValue = true)]
        public string PolicyNumber
        {
            get{ return _PolicyNumber;}
            set
            {
                _PolicyNumber = value;
                _flagPolicyNumber = true;
            }
        }
        private string _PolicyNumber;
        private bool _flagPolicyNumber;

        /// <summary>
        /// Returns false as PolicyNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyNumber()
        {
            return _flagPolicyNumber;
        }
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name = "StartDate", EmitDefaultValue = true)]
        public DateTime? StartDate
        {
            get{ return _StartDate;}
            set
            {
                _StartDate = value;
                _flagStartDate = true;
            }
        }
        private DateTime? _StartDate;
        private bool _flagStartDate;

        /// <summary>
        /// Returns false as StartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeStartDate()
        {
            return _flagStartDate;
        }
        /// <summary>
        /// Gets or Sets PolicyType
        /// </summary>
        [DataMember(Name = "PolicyType", EmitDefaultValue = true)]
        public string PolicyType
        {
            get{ return _PolicyType;}
            set
            {
                _PolicyType = value;
                _flagPolicyType = true;
            }
        }
        private string _PolicyType;
        private bool _flagPolicyType;

        /// <summary>
        /// Returns false as PolicyType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyType()
        {
            return _flagPolicyType;
        }
        /// <summary>
        /// Gets or Sets PolicyStatus
        /// </summary>
        [DataMember(Name = "PolicyStatus", EmitDefaultValue = true)]
        public string PolicyStatus
        {
            get{ return _PolicyStatus;}
            set
            {
                _PolicyStatus = value;
                _flagPolicyStatus = true;
            }
        }
        private string _PolicyStatus;
        private bool _flagPolicyStatus;

        /// <summary>
        /// Returns false as PolicyStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyStatus()
        {
            return _flagPolicyStatus;
        }
        /// <summary>
        /// Gets or Sets RiskAddress
        /// </summary>
        [DataMember(Name = "RiskAddress", EmitDefaultValue = false)]
        public Address RiskAddress
        {
            get{ return _RiskAddress;}
            set
            {
                _RiskAddress = value;
                _flagRiskAddress = true;
            }
        }
        private Address _RiskAddress;
        private bool _flagRiskAddress;

        /// <summary>
        /// Returns false as RiskAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRiskAddress()
        {
            return _flagRiskAddress;
        }
        /// <summary>
        /// Gets or Sets Applicant1
        /// </summary>
        [DataMember(Name = "Applicant1", EmitDefaultValue = true)]
        public string Applicant1
        {
            get{ return _Applicant1;}
            set
            {
                _Applicant1 = value;
                _flagApplicant1 = true;
            }
        }
        private string _Applicant1;
        private bool _flagApplicant1;

        /// <summary>
        /// Returns false as Applicant1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant1()
        {
            return _flagApplicant1;
        }
        /// <summary>
        /// Gets or Sets Applicant2
        /// </summary>
        [DataMember(Name = "Applicant2", EmitDefaultValue = true)]
        public string Applicant2
        {
            get{ return _Applicant2;}
            set
            {
                _Applicant2 = value;
                _flagApplicant2 = true;
            }
        }
        private string _Applicant2;
        private bool _flagApplicant2;

        /// <summary>
        /// Returns false as Applicant2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant2()
        {
            return _flagApplicant2;
        }
        /// <summary>
        /// Gets or Sets DataQualityIssueFlag
        /// </summary>
        [DataMember(Name = "DataQualityIssueFlag", EmitDefaultValue = true)]
        public bool? DataQualityIssueFlag
        {
            get{ return _DataQualityIssueFlag;}
            set
            {
                _DataQualityIssueFlag = value;
                _flagDataQualityIssueFlag = true;
            }
        }
        private bool? _DataQualityIssueFlag;
        private bool _flagDataQualityIssueFlag;

        /// <summary>
        /// Returns false as DataQualityIssueFlag should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDataQualityIssueFlag()
        {
            return _flagDataQualityIssueFlag;
        }
        /// <summary>
        /// Gets or Sets PolicyIssueFlag
        /// </summary>
        [DataMember(Name = "PolicyIssueFlag", EmitDefaultValue = true)]
        public bool? PolicyIssueFlag
        {
            get{ return _PolicyIssueFlag;}
            set
            {
                _PolicyIssueFlag = value;
                _flagPolicyIssueFlag = true;
            }
        }
        private bool? _PolicyIssueFlag;
        private bool _flagPolicyIssueFlag;

        /// <summary>
        /// Returns false as PolicyIssueFlag should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyIssueFlag()
        {
            return _flagPolicyIssueFlag;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FindPoliciesResult {\n");
            sb.Append("  PolicyNumber: ").Append(PolicyNumber).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  PolicyType: ").Append(PolicyType).Append("\n");
            sb.Append("  PolicyStatus: ").Append(PolicyStatus).Append("\n");
            sb.Append("  RiskAddress: ").Append(RiskAddress).Append("\n");
            sb.Append("  Applicant1: ").Append(Applicant1).Append("\n");
            sb.Append("  Applicant2: ").Append(Applicant2).Append("\n");
            sb.Append("  DataQualityIssueFlag: ").Append(DataQualityIssueFlag).Append("\n");
            sb.Append("  PolicyIssueFlag: ").Append(PolicyIssueFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FindPoliciesResult);
        }

        /// <summary>
        /// Returns true if FindPoliciesResult instances are equal
        /// </summary>
        /// <param name="input">Instance of FindPoliciesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FindPoliciesResult input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PolicyNumber == input.PolicyNumber ||
                    (this.PolicyNumber != null &&
                    this.PolicyNumber.Equals(input.PolicyNumber))
                ) && 
                (
                    this.StartDate == input.StartDate ||
                    (this.StartDate != null &&
                    this.StartDate.Equals(input.StartDate))
                ) && 
                (
                    this.PolicyType == input.PolicyType ||
                    (this.PolicyType != null &&
                    this.PolicyType.Equals(input.PolicyType))
                ) && 
                (
                    this.PolicyStatus == input.PolicyStatus ||
                    (this.PolicyStatus != null &&
                    this.PolicyStatus.Equals(input.PolicyStatus))
                ) && 
                (
                    this.RiskAddress == input.RiskAddress ||
                    (this.RiskAddress != null &&
                    this.RiskAddress.Equals(input.RiskAddress))
                ) && 
                (
                    this.Applicant1 == input.Applicant1 ||
                    (this.Applicant1 != null &&
                    this.Applicant1.Equals(input.Applicant1))
                ) && 
                (
                    this.Applicant2 == input.Applicant2 ||
                    (this.Applicant2 != null &&
                    this.Applicant2.Equals(input.Applicant2))
                ) && 
                (
                    this.DataQualityIssueFlag == input.DataQualityIssueFlag ||
                    (this.DataQualityIssueFlag != null &&
                    this.DataQualityIssueFlag.Equals(input.DataQualityIssueFlag))
                ) && 
                (
                    this.PolicyIssueFlag == input.PolicyIssueFlag ||
                    (this.PolicyIssueFlag != null &&
                    this.PolicyIssueFlag.Equals(input.PolicyIssueFlag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PolicyNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyNumber.GetHashCode();
                }
                if (this.StartDate != null)
                {
                    hashCode = (hashCode * 59) + this.StartDate.GetHashCode();
                }
                if (this.PolicyType != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyType.GetHashCode();
                }
                if (this.PolicyStatus != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyStatus.GetHashCode();
                }
                if (this.RiskAddress != null)
                {
                    hashCode = (hashCode * 59) + this.RiskAddress.GetHashCode();
                }
                if (this.Applicant1 != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant1.GetHashCode();
                }
                if (this.Applicant2 != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant2.GetHashCode();
                }
                if (this.DataQualityIssueFlag != null)
                {
                    hashCode = (hashCode * 59) + this.DataQualityIssueFlag.GetHashCode();
                }
                if (this.PolicyIssueFlag != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyIssueFlag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
