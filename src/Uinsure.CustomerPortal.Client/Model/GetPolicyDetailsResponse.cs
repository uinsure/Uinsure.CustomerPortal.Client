/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// Contains details for a policy.
    /// </summary>
    [DataContract(Name = "GetPolicyDetailsResponse")]
    public partial class GetPolicyDetailsResponse : IEquatable<GetPolicyDetailsResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetPolicyDetailsResponse" /> class.
        /// </summary>
        /// <param name="policyNumber">Policy number..</param>
        /// <param name="accountReference">Account reference for this policy..</param>
        /// <param name="policyStartDate">Policy start date..</param>
        /// <param name="policyEndDate">Policy end date..</param>
        /// <param name="underwriterName">Name of the underwriter for this policy..</param>
        /// <param name="coverTypeName">Type of cover..</param>
        /// <param name="productTypeName">Product type..</param>
        /// <param name="provider">Provider name..</param>
        /// <param name="possiblyRelatedPolicies">The original pipe-delimited string of policy numbers possibly related by risk address. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByRiskAddress..</param>
        /// <param name="policyNumbersPossiblyRelatedByRiskAddress">A collection of policy numbers that may be related to this policy..</param>
        /// <param name="confirmedRelatedPolicies">The original pipe-delimited string of policy numbers that is confirmed to be related by risk address. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByRiskAddress..</param>
        /// <param name="policyNumbersConfirmedRelatedByRiskAddress">A collection of policy numbers that is confirmed to be related to this policy..</param>
        /// <param name="possiblyRelatedApplicant1">The original pipe-delimited string of policy numbers possibly related by applicant 1. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByApplicant1..</param>
        /// <param name="policyNumbersPossiblyRelatedByApplicant1">A collection of policy numbers where the policyholder may be related to this policy..</param>
        /// <param name="confirmedRelatedApplicant1">The original pipe-delimited string of policy numbers confirmed to be related by applicant 1. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByApplicant1..</param>
        /// <param name="policyNumbersConfirmedRelatedByApplicant1">A collection of policy numbers where the policyholder is confirmed to be related to this policy..</param>
        /// <param name="companyName">BTL/Landlords - Company name of a Let property is insured in a company name..</param>
        /// <param name="policyStatus">Policy status..</param>
        /// <param name="policyholder">policyholder.</param>
        /// <param name="policy">policy.</param>
        /// <param name="property">property.</param>
        /// <param name="issues">issues.</param>
        /// <param name="ancillaries">ancillaries.</param>
        /// <param name="broker">broker.</param>
        /// <param name="renewal">renewal.</param>
        /// <param name="payments">payments.</param>
        /// <param name="specifiedItems">High-value specified items covered on this policy..</param>
        /// <param name="endorsements">Endorsements that apply to this policy..</param>
        /// <param name="claims">claims.</param>
        public GetPolicyDetailsResponse(string policyNumber = default(string), string accountReference = default(string), DateTime? policyStartDate = default(DateTime?), DateTime? policyEndDate = default(DateTime?), string underwriterName = default(string), string coverTypeName = default(string), string productTypeName = default(string), string provider = default(string), string possiblyRelatedPolicies = default(string), List<string> policyNumbersPossiblyRelatedByRiskAddress = default(List<string>), string confirmedRelatedPolicies = default(string), List<string> policyNumbersConfirmedRelatedByRiskAddress = default(List<string>), string possiblyRelatedApplicant1 = default(string), List<string> policyNumbersPossiblyRelatedByApplicant1 = default(List<string>), string confirmedRelatedApplicant1 = default(string), List<string> policyNumbersConfirmedRelatedByApplicant1 = default(List<string>), string companyName = default(string), string policyStatus = default(string), Policyholder policyholder = default(Policyholder), PolicyCover policy = default(PolicyCover), RiskProperty property = default(RiskProperty), PolicyIssue issues = default(PolicyIssue), Ancillaries ancillaries = default(Ancillaries), BrokerDetails broker = default(BrokerDetails), PolicyRenewalDetails renewal = default(PolicyRenewalDetails), PaymentDetails payments = default(PaymentDetails), List<SpecifiedItem> specifiedItems = default(List<SpecifiedItem>), List<Endorsement> endorsements = default(List<Endorsement>), ClaimsSummary claims = default(ClaimsSummary))
        {
            this._PolicyNumber = policyNumber;
            if (this.PolicyNumber != null)
            {
                this._flagPolicyNumber = true;
            }
            this._AccountReference = accountReference;
            if (this.AccountReference != null)
            {
                this._flagAccountReference = true;
            }
            this._PolicyStartDate = policyStartDate;
            if (this.PolicyStartDate != null)
            {
                this._flagPolicyStartDate = true;
            }
            this._PolicyEndDate = policyEndDate;
            if (this.PolicyEndDate != null)
            {
                this._flagPolicyEndDate = true;
            }
            this._UnderwriterName = underwriterName;
            if (this.UnderwriterName != null)
            {
                this._flagUnderwriterName = true;
            }
            this._CoverTypeName = coverTypeName;
            if (this.CoverTypeName != null)
            {
                this._flagCoverTypeName = true;
            }
            this._ProductTypeName = productTypeName;
            if (this.ProductTypeName != null)
            {
                this._flagProductTypeName = true;
            }
            this._Provider = provider;
            if (this.Provider != null)
            {
                this._flagProvider = true;
            }
            this._PossiblyRelatedPolicies = possiblyRelatedPolicies;
            if (this.PossiblyRelatedPolicies != null)
            {
                this._flagPossiblyRelatedPolicies = true;
            }
            this._PolicyNumbersPossiblyRelatedByRiskAddress = policyNumbersPossiblyRelatedByRiskAddress;
            if (this.PolicyNumbersPossiblyRelatedByRiskAddress != null)
            {
                this._flagPolicyNumbersPossiblyRelatedByRiskAddress = true;
            }
            this._ConfirmedRelatedPolicies = confirmedRelatedPolicies;
            if (this.ConfirmedRelatedPolicies != null)
            {
                this._flagConfirmedRelatedPolicies = true;
            }
            this._PolicyNumbersConfirmedRelatedByRiskAddress = policyNumbersConfirmedRelatedByRiskAddress;
            if (this.PolicyNumbersConfirmedRelatedByRiskAddress != null)
            {
                this._flagPolicyNumbersConfirmedRelatedByRiskAddress = true;
            }
            this._PossiblyRelatedApplicant1 = possiblyRelatedApplicant1;
            if (this.PossiblyRelatedApplicant1 != null)
            {
                this._flagPossiblyRelatedApplicant1 = true;
            }
            this._PolicyNumbersPossiblyRelatedByApplicant1 = policyNumbersPossiblyRelatedByApplicant1;
            if (this.PolicyNumbersPossiblyRelatedByApplicant1 != null)
            {
                this._flagPolicyNumbersPossiblyRelatedByApplicant1 = true;
            }
            this._ConfirmedRelatedApplicant1 = confirmedRelatedApplicant1;
            if (this.ConfirmedRelatedApplicant1 != null)
            {
                this._flagConfirmedRelatedApplicant1 = true;
            }
            this._PolicyNumbersConfirmedRelatedByApplicant1 = policyNumbersConfirmedRelatedByApplicant1;
            if (this.PolicyNumbersConfirmedRelatedByApplicant1 != null)
            {
                this._flagPolicyNumbersConfirmedRelatedByApplicant1 = true;
            }
            this._CompanyName = companyName;
            if (this.CompanyName != null)
            {
                this._flagCompanyName = true;
            }
            this._PolicyStatus = policyStatus;
            if (this.PolicyStatus != null)
            {
                this._flagPolicyStatus = true;
            }
            this._Policyholder = policyholder;
            if (this.Policyholder != null)
            {
                this._flagPolicyholder = true;
            }
            this._Policy = policy;
            if (this.Policy != null)
            {
                this._flagPolicy = true;
            }
            this._Property = property;
            if (this.Property != null)
            {
                this._flagProperty = true;
            }
            this._Issues = issues;
            if (this.Issues != null)
            {
                this._flagIssues = true;
            }
            this._Ancillaries = ancillaries;
            if (this.Ancillaries != null)
            {
                this._flagAncillaries = true;
            }
            this._Broker = broker;
            if (this.Broker != null)
            {
                this._flagBroker = true;
            }
            this._Renewal = renewal;
            if (this.Renewal != null)
            {
                this._flagRenewal = true;
            }
            this._Payments = payments;
            if (this.Payments != null)
            {
                this._flagPayments = true;
            }
            this._SpecifiedItems = specifiedItems;
            if (this.SpecifiedItems != null)
            {
                this._flagSpecifiedItems = true;
            }
            this._Endorsements = endorsements;
            if (this.Endorsements != null)
            {
                this._flagEndorsements = true;
            }
            this._Claims = claims;
            if (this.Claims != null)
            {
                this._flagClaims = true;
            }
        }

        /// <summary>
        /// Policy number.
        /// </summary>
        /// <value>Policy number.</value>
        [DataMember(Name = "PolicyNumber", EmitDefaultValue = true)]
        public string PolicyNumber
        {
            get{ return _PolicyNumber;}
            set
            {
                _PolicyNumber = value;
                _flagPolicyNumber = true;
            }
        }
        private string _PolicyNumber;
        private bool _flagPolicyNumber;

        /// <summary>
        /// Returns false as PolicyNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyNumber()
        {
            return _flagPolicyNumber;
        }
        /// <summary>
        /// Account reference for this policy.
        /// </summary>
        /// <value>Account reference for this policy.</value>
        [DataMember(Name = "AccountReference", EmitDefaultValue = true)]
        public string AccountReference
        {
            get{ return _AccountReference;}
            set
            {
                _AccountReference = value;
                _flagAccountReference = true;
            }
        }
        private string _AccountReference;
        private bool _flagAccountReference;

        /// <summary>
        /// Returns false as AccountReference should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAccountReference()
        {
            return _flagAccountReference;
        }
        /// <summary>
        /// Policy start date.
        /// </summary>
        /// <value>Policy start date.</value>
        [DataMember(Name = "PolicyStartDate", EmitDefaultValue = true)]
        public DateTime? PolicyStartDate
        {
            get{ return _PolicyStartDate;}
            set
            {
                _PolicyStartDate = value;
                _flagPolicyStartDate = true;
            }
        }
        private DateTime? _PolicyStartDate;
        private bool _flagPolicyStartDate;

        /// <summary>
        /// Returns false as PolicyStartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyStartDate()
        {
            return _flagPolicyStartDate;
        }
        /// <summary>
        /// Policy end date.
        /// </summary>
        /// <value>Policy end date.</value>
        [DataMember(Name = "PolicyEndDate", EmitDefaultValue = true)]
        public DateTime? PolicyEndDate
        {
            get{ return _PolicyEndDate;}
            set
            {
                _PolicyEndDate = value;
                _flagPolicyEndDate = true;
            }
        }
        private DateTime? _PolicyEndDate;
        private bool _flagPolicyEndDate;

        /// <summary>
        /// Returns false as PolicyEndDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyEndDate()
        {
            return _flagPolicyEndDate;
        }
        /// <summary>
        /// Name of the underwriter for this policy.
        /// </summary>
        /// <value>Name of the underwriter for this policy.</value>
        [DataMember(Name = "UnderwriterName", EmitDefaultValue = true)]
        public string UnderwriterName
        {
            get{ return _UnderwriterName;}
            set
            {
                _UnderwriterName = value;
                _flagUnderwriterName = true;
            }
        }
        private string _UnderwriterName;
        private bool _flagUnderwriterName;

        /// <summary>
        /// Returns false as UnderwriterName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUnderwriterName()
        {
            return _flagUnderwriterName;
        }
        /// <summary>
        /// Type of cover.
        /// </summary>
        /// <value>Type of cover.</value>
        [DataMember(Name = "CoverTypeName", EmitDefaultValue = true)]
        public string CoverTypeName
        {
            get{ return _CoverTypeName;}
            set
            {
                _CoverTypeName = value;
                _flagCoverTypeName = true;
            }
        }
        private string _CoverTypeName;
        private bool _flagCoverTypeName;

        /// <summary>
        /// Returns false as CoverTypeName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCoverTypeName()
        {
            return _flagCoverTypeName;
        }
        /// <summary>
        /// Product type.
        /// </summary>
        /// <value>Product type.</value>
        [DataMember(Name = "ProductTypeName", EmitDefaultValue = true)]
        public string ProductTypeName
        {
            get{ return _ProductTypeName;}
            set
            {
                _ProductTypeName = value;
                _flagProductTypeName = true;
            }
        }
        private string _ProductTypeName;
        private bool _flagProductTypeName;

        /// <summary>
        /// Returns false as ProductTypeName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProductTypeName()
        {
            return _flagProductTypeName;
        }
        /// <summary>
        /// Provider name.
        /// </summary>
        /// <value>Provider name.</value>
        [DataMember(Name = "Provider", EmitDefaultValue = true)]
        public string Provider
        {
            get{ return _Provider;}
            set
            {
                _Provider = value;
                _flagProvider = true;
            }
        }
        private string _Provider;
        private bool _flagProvider;

        /// <summary>
        /// Returns false as Provider should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProvider()
        {
            return _flagProvider;
        }
        /// <summary>
        /// The original pipe-delimited string of policy numbers possibly related by risk address. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByRiskAddress.
        /// </summary>
        /// <value>The original pipe-delimited string of policy numbers possibly related by risk address. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByRiskAddress.</value>
        [DataMember(Name = "PossiblyRelatedPolicies", EmitDefaultValue = true)]
        [Obsolete]
        public string PossiblyRelatedPolicies
        {
            get{ return _PossiblyRelatedPolicies;}
            set
            {
                _PossiblyRelatedPolicies = value;
                _flagPossiblyRelatedPolicies = true;
            }
        }
        private string _PossiblyRelatedPolicies;
        private bool _flagPossiblyRelatedPolicies;

        /// <summary>
        /// Returns false as PossiblyRelatedPolicies should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePossiblyRelatedPolicies()
        {
            return _flagPossiblyRelatedPolicies;
        }
        /// <summary>
        /// A collection of policy numbers that may be related to this policy.
        /// </summary>
        /// <value>A collection of policy numbers that may be related to this policy.</value>
        [DataMember(Name = "PolicyNumbersPossiblyRelatedByRiskAddress", EmitDefaultValue = true)]
        public List<string> PolicyNumbersPossiblyRelatedByRiskAddress
        {
            get{ return _PolicyNumbersPossiblyRelatedByRiskAddress;}
            set
            {
                _PolicyNumbersPossiblyRelatedByRiskAddress = value;
                _flagPolicyNumbersPossiblyRelatedByRiskAddress = true;
            }
        }
        private List<string> _PolicyNumbersPossiblyRelatedByRiskAddress;
        private bool _flagPolicyNumbersPossiblyRelatedByRiskAddress;

        /// <summary>
        /// Returns false as PolicyNumbersPossiblyRelatedByRiskAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyNumbersPossiblyRelatedByRiskAddress()
        {
            return _flagPolicyNumbersPossiblyRelatedByRiskAddress;
        }
        /// <summary>
        /// The original pipe-delimited string of policy numbers that is confirmed to be related by risk address. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByRiskAddress.
        /// </summary>
        /// <value>The original pipe-delimited string of policy numbers that is confirmed to be related by risk address. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByRiskAddress.</value>
        [DataMember(Name = "ConfirmedRelatedPolicies", EmitDefaultValue = true)]
        [Obsolete]
        public string ConfirmedRelatedPolicies
        {
            get{ return _ConfirmedRelatedPolicies;}
            set
            {
                _ConfirmedRelatedPolicies = value;
                _flagConfirmedRelatedPolicies = true;
            }
        }
        private string _ConfirmedRelatedPolicies;
        private bool _flagConfirmedRelatedPolicies;

        /// <summary>
        /// Returns false as ConfirmedRelatedPolicies should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConfirmedRelatedPolicies()
        {
            return _flagConfirmedRelatedPolicies;
        }
        /// <summary>
        /// A collection of policy numbers that is confirmed to be related to this policy.
        /// </summary>
        /// <value>A collection of policy numbers that is confirmed to be related to this policy.</value>
        [DataMember(Name = "PolicyNumbersConfirmedRelatedByRiskAddress", EmitDefaultValue = true)]
        public List<string> PolicyNumbersConfirmedRelatedByRiskAddress
        {
            get{ return _PolicyNumbersConfirmedRelatedByRiskAddress;}
            set
            {
                _PolicyNumbersConfirmedRelatedByRiskAddress = value;
                _flagPolicyNumbersConfirmedRelatedByRiskAddress = true;
            }
        }
        private List<string> _PolicyNumbersConfirmedRelatedByRiskAddress;
        private bool _flagPolicyNumbersConfirmedRelatedByRiskAddress;

        /// <summary>
        /// Returns false as PolicyNumbersConfirmedRelatedByRiskAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyNumbersConfirmedRelatedByRiskAddress()
        {
            return _flagPolicyNumbersConfirmedRelatedByRiskAddress;
        }
        /// <summary>
        /// The original pipe-delimited string of policy numbers possibly related by applicant 1. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByApplicant1.
        /// </summary>
        /// <value>The original pipe-delimited string of policy numbers possibly related by applicant 1. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByApplicant1.</value>
        [DataMember(Name = "PossiblyRelatedApplicant1", EmitDefaultValue = true)]
        [Obsolete]
        public string PossiblyRelatedApplicant1
        {
            get{ return _PossiblyRelatedApplicant1;}
            set
            {
                _PossiblyRelatedApplicant1 = value;
                _flagPossiblyRelatedApplicant1 = true;
            }
        }
        private string _PossiblyRelatedApplicant1;
        private bool _flagPossiblyRelatedApplicant1;

        /// <summary>
        /// Returns false as PossiblyRelatedApplicant1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePossiblyRelatedApplicant1()
        {
            return _flagPossiblyRelatedApplicant1;
        }
        /// <summary>
        /// A collection of policy numbers where the policyholder may be related to this policy.
        /// </summary>
        /// <value>A collection of policy numbers where the policyholder may be related to this policy.</value>
        [DataMember(Name = "PolicyNumbersPossiblyRelatedByApplicant1", EmitDefaultValue = true)]
        public List<string> PolicyNumbersPossiblyRelatedByApplicant1
        {
            get{ return _PolicyNumbersPossiblyRelatedByApplicant1;}
            set
            {
                _PolicyNumbersPossiblyRelatedByApplicant1 = value;
                _flagPolicyNumbersPossiblyRelatedByApplicant1 = true;
            }
        }
        private List<string> _PolicyNumbersPossiblyRelatedByApplicant1;
        private bool _flagPolicyNumbersPossiblyRelatedByApplicant1;

        /// <summary>
        /// Returns false as PolicyNumbersPossiblyRelatedByApplicant1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyNumbersPossiblyRelatedByApplicant1()
        {
            return _flagPolicyNumbersPossiblyRelatedByApplicant1;
        }
        /// <summary>
        /// The original pipe-delimited string of policy numbers confirmed to be related by applicant 1. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByApplicant1.
        /// </summary>
        /// <value>The original pipe-delimited string of policy numbers confirmed to be related by applicant 1. See Uinsure.CustomerPortal.API.Controllers.Admin.ResponseContracts.GetPolicyDetailsResponse.PolicyNumbersPossiblyRelatedByApplicant1.</value>
        [DataMember(Name = "ConfirmedRelatedApplicant1", EmitDefaultValue = true)]
        [Obsolete]
        public string ConfirmedRelatedApplicant1
        {
            get{ return _ConfirmedRelatedApplicant1;}
            set
            {
                _ConfirmedRelatedApplicant1 = value;
                _flagConfirmedRelatedApplicant1 = true;
            }
        }
        private string _ConfirmedRelatedApplicant1;
        private bool _flagConfirmedRelatedApplicant1;

        /// <summary>
        /// Returns false as ConfirmedRelatedApplicant1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeConfirmedRelatedApplicant1()
        {
            return _flagConfirmedRelatedApplicant1;
        }
        /// <summary>
        /// A collection of policy numbers where the policyholder is confirmed to be related to this policy.
        /// </summary>
        /// <value>A collection of policy numbers where the policyholder is confirmed to be related to this policy.</value>
        [DataMember(Name = "PolicyNumbersConfirmedRelatedByApplicant1", EmitDefaultValue = true)]
        public List<string> PolicyNumbersConfirmedRelatedByApplicant1
        {
            get{ return _PolicyNumbersConfirmedRelatedByApplicant1;}
            set
            {
                _PolicyNumbersConfirmedRelatedByApplicant1 = value;
                _flagPolicyNumbersConfirmedRelatedByApplicant1 = true;
            }
        }
        private List<string> _PolicyNumbersConfirmedRelatedByApplicant1;
        private bool _flagPolicyNumbersConfirmedRelatedByApplicant1;

        /// <summary>
        /// Returns false as PolicyNumbersConfirmedRelatedByApplicant1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyNumbersConfirmedRelatedByApplicant1()
        {
            return _flagPolicyNumbersConfirmedRelatedByApplicant1;
        }
        /// <summary>
        /// BTL/Landlords - Company name of a Let property is insured in a company name.
        /// </summary>
        /// <value>BTL/Landlords - Company name of a Let property is insured in a company name.</value>
        [DataMember(Name = "CompanyName", EmitDefaultValue = true)]
        public string CompanyName
        {
            get{ return _CompanyName;}
            set
            {
                _CompanyName = value;
                _flagCompanyName = true;
            }
        }
        private string _CompanyName;
        private bool _flagCompanyName;

        /// <summary>
        /// Returns false as CompanyName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompanyName()
        {
            return _flagCompanyName;
        }
        /// <summary>
        /// Policy status.
        /// </summary>
        /// <value>Policy status.</value>
        [DataMember(Name = "PolicyStatus", EmitDefaultValue = true)]
        public string PolicyStatus
        {
            get{ return _PolicyStatus;}
            set
            {
                _PolicyStatus = value;
                _flagPolicyStatus = true;
            }
        }
        private string _PolicyStatus;
        private bool _flagPolicyStatus;

        /// <summary>
        /// Returns false as PolicyStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyStatus()
        {
            return _flagPolicyStatus;
        }
        /// <summary>
        /// Gets or Sets Policyholder
        /// </summary>
        [DataMember(Name = "Policyholder", EmitDefaultValue = false)]
        public Policyholder Policyholder
        {
            get{ return _Policyholder;}
            set
            {
                _Policyholder = value;
                _flagPolicyholder = true;
            }
        }
        private Policyholder _Policyholder;
        private bool _flagPolicyholder;

        /// <summary>
        /// Returns false as Policyholder should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyholder()
        {
            return _flagPolicyholder;
        }
        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name = "Policy", EmitDefaultValue = false)]
        public PolicyCover Policy
        {
            get{ return _Policy;}
            set
            {
                _Policy = value;
                _flagPolicy = true;
            }
        }
        private PolicyCover _Policy;
        private bool _flagPolicy;

        /// <summary>
        /// Returns false as Policy should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicy()
        {
            return _flagPolicy;
        }
        /// <summary>
        /// Gets or Sets Property
        /// </summary>
        [DataMember(Name = "Property", EmitDefaultValue = false)]
        public RiskProperty Property
        {
            get{ return _Property;}
            set
            {
                _Property = value;
                _flagProperty = true;
            }
        }
        private RiskProperty _Property;
        private bool _flagProperty;

        /// <summary>
        /// Returns false as Property should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeProperty()
        {
            return _flagProperty;
        }
        /// <summary>
        /// Gets or Sets Issues
        /// </summary>
        [DataMember(Name = "Issues", EmitDefaultValue = false)]
        public PolicyIssue Issues
        {
            get{ return _Issues;}
            set
            {
                _Issues = value;
                _flagIssues = true;
            }
        }
        private PolicyIssue _Issues;
        private bool _flagIssues;

        /// <summary>
        /// Returns false as Issues should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIssues()
        {
            return _flagIssues;
        }
        /// <summary>
        /// Gets or Sets Ancillaries
        /// </summary>
        [DataMember(Name = "Ancillaries", EmitDefaultValue = false)]
        public Ancillaries Ancillaries
        {
            get{ return _Ancillaries;}
            set
            {
                _Ancillaries = value;
                _flagAncillaries = true;
            }
        }
        private Ancillaries _Ancillaries;
        private bool _flagAncillaries;

        /// <summary>
        /// Returns false as Ancillaries should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAncillaries()
        {
            return _flagAncillaries;
        }
        /// <summary>
        /// Gets or Sets Broker
        /// </summary>
        [DataMember(Name = "Broker", EmitDefaultValue = false)]
        public BrokerDetails Broker
        {
            get{ return _Broker;}
            set
            {
                _Broker = value;
                _flagBroker = true;
            }
        }
        private BrokerDetails _Broker;
        private bool _flagBroker;

        /// <summary>
        /// Returns false as Broker should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBroker()
        {
            return _flagBroker;
        }
        /// <summary>
        /// Gets or Sets Renewal
        /// </summary>
        [DataMember(Name = "Renewal", EmitDefaultValue = false)]
        public PolicyRenewalDetails Renewal
        {
            get{ return _Renewal;}
            set
            {
                _Renewal = value;
                _flagRenewal = true;
            }
        }
        private PolicyRenewalDetails _Renewal;
        private bool _flagRenewal;

        /// <summary>
        /// Returns false as Renewal should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRenewal()
        {
            return _flagRenewal;
        }
        /// <summary>
        /// Gets or Sets Payments
        /// </summary>
        [DataMember(Name = "Payments", EmitDefaultValue = false)]
        public PaymentDetails Payments
        {
            get{ return _Payments;}
            set
            {
                _Payments = value;
                _flagPayments = true;
            }
        }
        private PaymentDetails _Payments;
        private bool _flagPayments;

        /// <summary>
        /// Returns false as Payments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePayments()
        {
            return _flagPayments;
        }
        /// <summary>
        /// High-value specified items covered on this policy.
        /// </summary>
        /// <value>High-value specified items covered on this policy.</value>
        [DataMember(Name = "SpecifiedItems", EmitDefaultValue = true)]
        public List<SpecifiedItem> SpecifiedItems
        {
            get{ return _SpecifiedItems;}
            set
            {
                _SpecifiedItems = value;
                _flagSpecifiedItems = true;
            }
        }
        private List<SpecifiedItem> _SpecifiedItems;
        private bool _flagSpecifiedItems;

        /// <summary>
        /// Returns false as SpecifiedItems should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSpecifiedItems()
        {
            return _flagSpecifiedItems;
        }
        /// <summary>
        /// Endorsements that apply to this policy.
        /// </summary>
        /// <value>Endorsements that apply to this policy.</value>
        [DataMember(Name = "Endorsements", EmitDefaultValue = true)]
        public List<Endorsement> Endorsements
        {
            get{ return _Endorsements;}
            set
            {
                _Endorsements = value;
                _flagEndorsements = true;
            }
        }
        private List<Endorsement> _Endorsements;
        private bool _flagEndorsements;

        /// <summary>
        /// Returns false as Endorsements should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEndorsements()
        {
            return _flagEndorsements;
        }
        /// <summary>
        /// Gets or Sets Claims
        /// </summary>
        [DataMember(Name = "Claims", EmitDefaultValue = false)]
        public ClaimsSummary Claims
        {
            get{ return _Claims;}
            set
            {
                _Claims = value;
                _flagClaims = true;
            }
        }
        private ClaimsSummary _Claims;
        private bool _flagClaims;

        /// <summary>
        /// Returns false as Claims should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClaims()
        {
            return _flagClaims;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetPolicyDetailsResponse {\n");
            sb.Append("  PolicyNumber: ").Append(PolicyNumber).Append("\n");
            sb.Append("  AccountReference: ").Append(AccountReference).Append("\n");
            sb.Append("  PolicyStartDate: ").Append(PolicyStartDate).Append("\n");
            sb.Append("  PolicyEndDate: ").Append(PolicyEndDate).Append("\n");
            sb.Append("  UnderwriterName: ").Append(UnderwriterName).Append("\n");
            sb.Append("  CoverTypeName: ").Append(CoverTypeName).Append("\n");
            sb.Append("  ProductTypeName: ").Append(ProductTypeName).Append("\n");
            sb.Append("  Provider: ").Append(Provider).Append("\n");
            sb.Append("  PossiblyRelatedPolicies: ").Append(PossiblyRelatedPolicies).Append("\n");
            sb.Append("  PolicyNumbersPossiblyRelatedByRiskAddress: ").Append(PolicyNumbersPossiblyRelatedByRiskAddress).Append("\n");
            sb.Append("  ConfirmedRelatedPolicies: ").Append(ConfirmedRelatedPolicies).Append("\n");
            sb.Append("  PolicyNumbersConfirmedRelatedByRiskAddress: ").Append(PolicyNumbersConfirmedRelatedByRiskAddress).Append("\n");
            sb.Append("  PossiblyRelatedApplicant1: ").Append(PossiblyRelatedApplicant1).Append("\n");
            sb.Append("  PolicyNumbersPossiblyRelatedByApplicant1: ").Append(PolicyNumbersPossiblyRelatedByApplicant1).Append("\n");
            sb.Append("  ConfirmedRelatedApplicant1: ").Append(ConfirmedRelatedApplicant1).Append("\n");
            sb.Append("  PolicyNumbersConfirmedRelatedByApplicant1: ").Append(PolicyNumbersConfirmedRelatedByApplicant1).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  PolicyStatus: ").Append(PolicyStatus).Append("\n");
            sb.Append("  Policyholder: ").Append(Policyholder).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  Property: ").Append(Property).Append("\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("  Ancillaries: ").Append(Ancillaries).Append("\n");
            sb.Append("  Broker: ").Append(Broker).Append("\n");
            sb.Append("  Renewal: ").Append(Renewal).Append("\n");
            sb.Append("  Payments: ").Append(Payments).Append("\n");
            sb.Append("  SpecifiedItems: ").Append(SpecifiedItems).Append("\n");
            sb.Append("  Endorsements: ").Append(Endorsements).Append("\n");
            sb.Append("  Claims: ").Append(Claims).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as GetPolicyDetailsResponse);
        }

        /// <summary>
        /// Returns true if GetPolicyDetailsResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of GetPolicyDetailsResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetPolicyDetailsResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PolicyNumber == input.PolicyNumber ||
                    (this.PolicyNumber != null &&
                    this.PolicyNumber.Equals(input.PolicyNumber))
                ) && 
                (
                    this.AccountReference == input.AccountReference ||
                    (this.AccountReference != null &&
                    this.AccountReference.Equals(input.AccountReference))
                ) && 
                (
                    this.PolicyStartDate == input.PolicyStartDate ||
                    (this.PolicyStartDate != null &&
                    this.PolicyStartDate.Equals(input.PolicyStartDate))
                ) && 
                (
                    this.PolicyEndDate == input.PolicyEndDate ||
                    (this.PolicyEndDate != null &&
                    this.PolicyEndDate.Equals(input.PolicyEndDate))
                ) && 
                (
                    this.UnderwriterName == input.UnderwriterName ||
                    (this.UnderwriterName != null &&
                    this.UnderwriterName.Equals(input.UnderwriterName))
                ) && 
                (
                    this.CoverTypeName == input.CoverTypeName ||
                    (this.CoverTypeName != null &&
                    this.CoverTypeName.Equals(input.CoverTypeName))
                ) && 
                (
                    this.ProductTypeName == input.ProductTypeName ||
                    (this.ProductTypeName != null &&
                    this.ProductTypeName.Equals(input.ProductTypeName))
                ) && 
                (
                    this.Provider == input.Provider ||
                    (this.Provider != null &&
                    this.Provider.Equals(input.Provider))
                ) && 
                (
                    this.PossiblyRelatedPolicies == input.PossiblyRelatedPolicies ||
                    (this.PossiblyRelatedPolicies != null &&
                    this.PossiblyRelatedPolicies.Equals(input.PossiblyRelatedPolicies))
                ) && 
                (
                    this.PolicyNumbersPossiblyRelatedByRiskAddress == input.PolicyNumbersPossiblyRelatedByRiskAddress ||
                    this.PolicyNumbersPossiblyRelatedByRiskAddress != null &&
                    input.PolicyNumbersPossiblyRelatedByRiskAddress != null &&
                    this.PolicyNumbersPossiblyRelatedByRiskAddress.SequenceEqual(input.PolicyNumbersPossiblyRelatedByRiskAddress)
                ) && 
                (
                    this.ConfirmedRelatedPolicies == input.ConfirmedRelatedPolicies ||
                    (this.ConfirmedRelatedPolicies != null &&
                    this.ConfirmedRelatedPolicies.Equals(input.ConfirmedRelatedPolicies))
                ) && 
                (
                    this.PolicyNumbersConfirmedRelatedByRiskAddress == input.PolicyNumbersConfirmedRelatedByRiskAddress ||
                    this.PolicyNumbersConfirmedRelatedByRiskAddress != null &&
                    input.PolicyNumbersConfirmedRelatedByRiskAddress != null &&
                    this.PolicyNumbersConfirmedRelatedByRiskAddress.SequenceEqual(input.PolicyNumbersConfirmedRelatedByRiskAddress)
                ) && 
                (
                    this.PossiblyRelatedApplicant1 == input.PossiblyRelatedApplicant1 ||
                    (this.PossiblyRelatedApplicant1 != null &&
                    this.PossiblyRelatedApplicant1.Equals(input.PossiblyRelatedApplicant1))
                ) && 
                (
                    this.PolicyNumbersPossiblyRelatedByApplicant1 == input.PolicyNumbersPossiblyRelatedByApplicant1 ||
                    this.PolicyNumbersPossiblyRelatedByApplicant1 != null &&
                    input.PolicyNumbersPossiblyRelatedByApplicant1 != null &&
                    this.PolicyNumbersPossiblyRelatedByApplicant1.SequenceEqual(input.PolicyNumbersPossiblyRelatedByApplicant1)
                ) && 
                (
                    this.ConfirmedRelatedApplicant1 == input.ConfirmedRelatedApplicant1 ||
                    (this.ConfirmedRelatedApplicant1 != null &&
                    this.ConfirmedRelatedApplicant1.Equals(input.ConfirmedRelatedApplicant1))
                ) && 
                (
                    this.PolicyNumbersConfirmedRelatedByApplicant1 == input.PolicyNumbersConfirmedRelatedByApplicant1 ||
                    this.PolicyNumbersConfirmedRelatedByApplicant1 != null &&
                    input.PolicyNumbersConfirmedRelatedByApplicant1 != null &&
                    this.PolicyNumbersConfirmedRelatedByApplicant1.SequenceEqual(input.PolicyNumbersConfirmedRelatedByApplicant1)
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.PolicyStatus == input.PolicyStatus ||
                    (this.PolicyStatus != null &&
                    this.PolicyStatus.Equals(input.PolicyStatus))
                ) && 
                (
                    this.Policyholder == input.Policyholder ||
                    (this.Policyholder != null &&
                    this.Policyholder.Equals(input.Policyholder))
                ) && 
                (
                    this.Policy == input.Policy ||
                    (this.Policy != null &&
                    this.Policy.Equals(input.Policy))
                ) && 
                (
                    this.Property == input.Property ||
                    (this.Property != null &&
                    this.Property.Equals(input.Property))
                ) && 
                (
                    this.Issues == input.Issues ||
                    (this.Issues != null &&
                    this.Issues.Equals(input.Issues))
                ) && 
                (
                    this.Ancillaries == input.Ancillaries ||
                    (this.Ancillaries != null &&
                    this.Ancillaries.Equals(input.Ancillaries))
                ) && 
                (
                    this.Broker == input.Broker ||
                    (this.Broker != null &&
                    this.Broker.Equals(input.Broker))
                ) && 
                (
                    this.Renewal == input.Renewal ||
                    (this.Renewal != null &&
                    this.Renewal.Equals(input.Renewal))
                ) && 
                (
                    this.Payments == input.Payments ||
                    (this.Payments != null &&
                    this.Payments.Equals(input.Payments))
                ) && 
                (
                    this.SpecifiedItems == input.SpecifiedItems ||
                    this.SpecifiedItems != null &&
                    input.SpecifiedItems != null &&
                    this.SpecifiedItems.SequenceEqual(input.SpecifiedItems)
                ) && 
                (
                    this.Endorsements == input.Endorsements ||
                    this.Endorsements != null &&
                    input.Endorsements != null &&
                    this.Endorsements.SequenceEqual(input.Endorsements)
                ) && 
                (
                    this.Claims == input.Claims ||
                    (this.Claims != null &&
                    this.Claims.Equals(input.Claims))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PolicyNumber != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyNumber.GetHashCode();
                }
                if (this.AccountReference != null)
                {
                    hashCode = (hashCode * 59) + this.AccountReference.GetHashCode();
                }
                if (this.PolicyStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyStartDate.GetHashCode();
                }
                if (this.PolicyEndDate != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyEndDate.GetHashCode();
                }
                if (this.UnderwriterName != null)
                {
                    hashCode = (hashCode * 59) + this.UnderwriterName.GetHashCode();
                }
                if (this.CoverTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.CoverTypeName.GetHashCode();
                }
                if (this.ProductTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.ProductTypeName.GetHashCode();
                }
                if (this.Provider != null)
                {
                    hashCode = (hashCode * 59) + this.Provider.GetHashCode();
                }
                if (this.PossiblyRelatedPolicies != null)
                {
                    hashCode = (hashCode * 59) + this.PossiblyRelatedPolicies.GetHashCode();
                }
                if (this.PolicyNumbersPossiblyRelatedByRiskAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyNumbersPossiblyRelatedByRiskAddress.GetHashCode();
                }
                if (this.ConfirmedRelatedPolicies != null)
                {
                    hashCode = (hashCode * 59) + this.ConfirmedRelatedPolicies.GetHashCode();
                }
                if (this.PolicyNumbersConfirmedRelatedByRiskAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyNumbersConfirmedRelatedByRiskAddress.GetHashCode();
                }
                if (this.PossiblyRelatedApplicant1 != null)
                {
                    hashCode = (hashCode * 59) + this.PossiblyRelatedApplicant1.GetHashCode();
                }
                if (this.PolicyNumbersPossiblyRelatedByApplicant1 != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyNumbersPossiblyRelatedByApplicant1.GetHashCode();
                }
                if (this.ConfirmedRelatedApplicant1 != null)
                {
                    hashCode = (hashCode * 59) + this.ConfirmedRelatedApplicant1.GetHashCode();
                }
                if (this.PolicyNumbersConfirmedRelatedByApplicant1 != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyNumbersConfirmedRelatedByApplicant1.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.PolicyStatus != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyStatus.GetHashCode();
                }
                if (this.Policyholder != null)
                {
                    hashCode = (hashCode * 59) + this.Policyholder.GetHashCode();
                }
                if (this.Policy != null)
                {
                    hashCode = (hashCode * 59) + this.Policy.GetHashCode();
                }
                if (this.Property != null)
                {
                    hashCode = (hashCode * 59) + this.Property.GetHashCode();
                }
                if (this.Issues != null)
                {
                    hashCode = (hashCode * 59) + this.Issues.GetHashCode();
                }
                if (this.Ancillaries != null)
                {
                    hashCode = (hashCode * 59) + this.Ancillaries.GetHashCode();
                }
                if (this.Broker != null)
                {
                    hashCode = (hashCode * 59) + this.Broker.GetHashCode();
                }
                if (this.Renewal != null)
                {
                    hashCode = (hashCode * 59) + this.Renewal.GetHashCode();
                }
                if (this.Payments != null)
                {
                    hashCode = (hashCode * 59) + this.Payments.GetHashCode();
                }
                if (this.SpecifiedItems != null)
                {
                    hashCode = (hashCode * 59) + this.SpecifiedItems.GetHashCode();
                }
                if (this.Endorsements != null)
                {
                    hashCode = (hashCode * 59) + this.Endorsements.GetHashCode();
                }
                if (this.Claims != null)
                {
                    hashCode = (hashCode * 59) + this.Claims.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
