/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// DTO with details relating to policy payment.
    /// </summary>
    [DataContract(Name = "PaymentDetails")]
    public partial class PaymentDetails : IEquatable<PaymentDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PaymentDetails" /> class.
        /// </summary>
        /// <param name="totalAmountPayable">Total amount payable for this policy..</param>
        /// <param name="monthlyPremium">Cost of monthly payments for this policy if paid monthly..</param>
        /// <param name="cardPayment">Was payment taken via Card?.</param>
        /// <param name="chequeBACS">Was payment taken via ChequeBACS?.</param>
        /// <param name="creditCharge">Credit charge for paying monthly..</param>
        /// <param name="insurancePremium">Cost of insurance premium..</param>
        /// <param name="insurancePremiumTax">Insurance premium tax..</param>
        /// <param name="monthlyPayments">Is this policy paid monthly?.</param>
        /// <param name="policyAdministrationFee">Policy administration fee.</param>
        /// <param name="familyLegalProtection">Cost of Family legal protection/Legal protection cover if included..</param>
        /// <param name="homeEmergencyCover">Cost of Home/Home let emergency cover if included..</param>
        /// <param name="premiumFunded">Is this policy premium funded?.</param>
        public PaymentDetails(double? totalAmountPayable = default(double?), double? monthlyPremium = default(double?), bool? cardPayment = default(bool?), bool? chequeBACS = default(bool?), double? creditCharge = default(double?), double? insurancePremium = default(double?), double? insurancePremiumTax = default(double?), bool? monthlyPayments = default(bool?), double? policyAdministrationFee = default(double?), double? familyLegalProtection = default(double?), double? homeEmergencyCover = default(double?), bool? premiumFunded = default(bool?))
        {
            this._TotalAmountPayable = totalAmountPayable;
            if (this.TotalAmountPayable != null)
            {
                this._flagTotalAmountPayable = true;
            }
            this._MonthlyPremium = monthlyPremium;
            if (this.MonthlyPremium != null)
            {
                this._flagMonthlyPremium = true;
            }
            this._CardPayment = cardPayment;
            if (this.CardPayment != null)
            {
                this._flagCardPayment = true;
            }
            this._ChequeBACS = chequeBACS;
            if (this.ChequeBACS != null)
            {
                this._flagChequeBACS = true;
            }
            this._CreditCharge = creditCharge;
            if (this.CreditCharge != null)
            {
                this._flagCreditCharge = true;
            }
            this._InsurancePremium = insurancePremium;
            if (this.InsurancePremium != null)
            {
                this._flagInsurancePremium = true;
            }
            this._InsurancePremiumTax = insurancePremiumTax;
            if (this.InsurancePremiumTax != null)
            {
                this._flagInsurancePremiumTax = true;
            }
            this._MonthlyPayments = monthlyPayments;
            if (this.MonthlyPayments != null)
            {
                this._flagMonthlyPayments = true;
            }
            this._PolicyAdministrationFee = policyAdministrationFee;
            if (this.PolicyAdministrationFee != null)
            {
                this._flagPolicyAdministrationFee = true;
            }
            this._FamilyLegalProtection = familyLegalProtection;
            if (this.FamilyLegalProtection != null)
            {
                this._flagFamilyLegalProtection = true;
            }
            this._HomeEmergencyCover = homeEmergencyCover;
            if (this.HomeEmergencyCover != null)
            {
                this._flagHomeEmergencyCover = true;
            }
            this._PremiumFunded = premiumFunded;
            if (this.PremiumFunded != null)
            {
                this._flagPremiumFunded = true;
            }
        }

        /// <summary>
        /// Total amount payable for this policy.
        /// </summary>
        /// <value>Total amount payable for this policy.</value>
        [DataMember(Name = "TotalAmountPayable", EmitDefaultValue = true)]
        public double? TotalAmountPayable
        {
            get{ return _TotalAmountPayable;}
            set
            {
                _TotalAmountPayable = value;
                _flagTotalAmountPayable = true;
            }
        }
        private double? _TotalAmountPayable;
        private bool _flagTotalAmountPayable;

        /// <summary>
        /// Returns false as TotalAmountPayable should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTotalAmountPayable()
        {
            return _flagTotalAmountPayable;
        }
        /// <summary>
        /// Cost of monthly payments for this policy if paid monthly.
        /// </summary>
        /// <value>Cost of monthly payments for this policy if paid monthly.</value>
        [DataMember(Name = "MonthlyPremium", EmitDefaultValue = true)]
        public double? MonthlyPremium
        {
            get{ return _MonthlyPremium;}
            set
            {
                _MonthlyPremium = value;
                _flagMonthlyPremium = true;
            }
        }
        private double? _MonthlyPremium;
        private bool _flagMonthlyPremium;

        /// <summary>
        /// Returns false as MonthlyPremium should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMonthlyPremium()
        {
            return _flagMonthlyPremium;
        }
        /// <summary>
        /// Was payment taken via Card?
        /// </summary>
        /// <value>Was payment taken via Card?</value>
        [DataMember(Name = "CardPayment", EmitDefaultValue = true)]
        public bool? CardPayment
        {
            get{ return _CardPayment;}
            set
            {
                _CardPayment = value;
                _flagCardPayment = true;
            }
        }
        private bool? _CardPayment;
        private bool _flagCardPayment;

        /// <summary>
        /// Returns false as CardPayment should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCardPayment()
        {
            return _flagCardPayment;
        }
        /// <summary>
        /// Was payment taken via ChequeBACS?
        /// </summary>
        /// <value>Was payment taken via ChequeBACS?</value>
        [DataMember(Name = "ChequeBACS", EmitDefaultValue = true)]
        public bool? ChequeBACS
        {
            get{ return _ChequeBACS;}
            set
            {
                _ChequeBACS = value;
                _flagChequeBACS = true;
            }
        }
        private bool? _ChequeBACS;
        private bool _flagChequeBACS;

        /// <summary>
        /// Returns false as ChequeBACS should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeChequeBACS()
        {
            return _flagChequeBACS;
        }
        /// <summary>
        /// Credit charge for paying monthly.
        /// </summary>
        /// <value>Credit charge for paying monthly.</value>
        [DataMember(Name = "CreditCharge", EmitDefaultValue = true)]
        public double? CreditCharge
        {
            get{ return _CreditCharge;}
            set
            {
                _CreditCharge = value;
                _flagCreditCharge = true;
            }
        }
        private double? _CreditCharge;
        private bool _flagCreditCharge;

        /// <summary>
        /// Returns false as CreditCharge should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCreditCharge()
        {
            return _flagCreditCharge;
        }
        /// <summary>
        /// Cost of insurance premium.
        /// </summary>
        /// <value>Cost of insurance premium.</value>
        [DataMember(Name = "InsurancePremium", EmitDefaultValue = true)]
        public double? InsurancePremium
        {
            get{ return _InsurancePremium;}
            set
            {
                _InsurancePremium = value;
                _flagInsurancePremium = true;
            }
        }
        private double? _InsurancePremium;
        private bool _flagInsurancePremium;

        /// <summary>
        /// Returns false as InsurancePremium should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInsurancePremium()
        {
            return _flagInsurancePremium;
        }
        /// <summary>
        /// Insurance premium tax.
        /// </summary>
        /// <value>Insurance premium tax.</value>
        [DataMember(Name = "InsurancePremiumTax", EmitDefaultValue = true)]
        public double? InsurancePremiumTax
        {
            get{ return _InsurancePremiumTax;}
            set
            {
                _InsurancePremiumTax = value;
                _flagInsurancePremiumTax = true;
            }
        }
        private double? _InsurancePremiumTax;
        private bool _flagInsurancePremiumTax;

        /// <summary>
        /// Returns false as InsurancePremiumTax should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeInsurancePremiumTax()
        {
            return _flagInsurancePremiumTax;
        }
        /// <summary>
        /// Is this policy paid monthly?
        /// </summary>
        /// <value>Is this policy paid monthly?</value>
        [DataMember(Name = "MonthlyPayments", EmitDefaultValue = true)]
        public bool? MonthlyPayments
        {
            get{ return _MonthlyPayments;}
            set
            {
                _MonthlyPayments = value;
                _flagMonthlyPayments = true;
            }
        }
        private bool? _MonthlyPayments;
        private bool _flagMonthlyPayments;

        /// <summary>
        /// Returns false as MonthlyPayments should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMonthlyPayments()
        {
            return _flagMonthlyPayments;
        }
        /// <summary>
        /// Policy administration fee
        /// </summary>
        /// <value>Policy administration fee</value>
        [DataMember(Name = "PolicyAdministrationFee", EmitDefaultValue = true)]
        public double? PolicyAdministrationFee
        {
            get{ return _PolicyAdministrationFee;}
            set
            {
                _PolicyAdministrationFee = value;
                _flagPolicyAdministrationFee = true;
            }
        }
        private double? _PolicyAdministrationFee;
        private bool _flagPolicyAdministrationFee;

        /// <summary>
        /// Returns false as PolicyAdministrationFee should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyAdministrationFee()
        {
            return _flagPolicyAdministrationFee;
        }
        /// <summary>
        /// Cost of Family legal protection/Legal protection cover if included.
        /// </summary>
        /// <value>Cost of Family legal protection/Legal protection cover if included.</value>
        [DataMember(Name = "FamilyLegalProtection", EmitDefaultValue = true)]
        public double? FamilyLegalProtection
        {
            get{ return _FamilyLegalProtection;}
            set
            {
                _FamilyLegalProtection = value;
                _flagFamilyLegalProtection = true;
            }
        }
        private double? _FamilyLegalProtection;
        private bool _flagFamilyLegalProtection;

        /// <summary>
        /// Returns false as FamilyLegalProtection should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFamilyLegalProtection()
        {
            return _flagFamilyLegalProtection;
        }
        /// <summary>
        /// Cost of Home/Home let emergency cover if included.
        /// </summary>
        /// <value>Cost of Home/Home let emergency cover if included.</value>
        [DataMember(Name = "HomeEmergencyCover", EmitDefaultValue = true)]
        public double? HomeEmergencyCover
        {
            get{ return _HomeEmergencyCover;}
            set
            {
                _HomeEmergencyCover = value;
                _flagHomeEmergencyCover = true;
            }
        }
        private double? _HomeEmergencyCover;
        private bool _flagHomeEmergencyCover;

        /// <summary>
        /// Returns false as HomeEmergencyCover should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHomeEmergencyCover()
        {
            return _flagHomeEmergencyCover;
        }
        /// <summary>
        /// Is this policy premium funded?
        /// </summary>
        /// <value>Is this policy premium funded?</value>
        [DataMember(Name = "PremiumFunded", EmitDefaultValue = true)]
        public bool? PremiumFunded
        {
            get{ return _PremiumFunded;}
            set
            {
                _PremiumFunded = value;
                _flagPremiumFunded = true;
            }
        }
        private bool? _PremiumFunded;
        private bool _flagPremiumFunded;

        /// <summary>
        /// Returns false as PremiumFunded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePremiumFunded()
        {
            return _flagPremiumFunded;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PaymentDetails {\n");
            sb.Append("  TotalAmountPayable: ").Append(TotalAmountPayable).Append("\n");
            sb.Append("  MonthlyPremium: ").Append(MonthlyPremium).Append("\n");
            sb.Append("  CardPayment: ").Append(CardPayment).Append("\n");
            sb.Append("  ChequeBACS: ").Append(ChequeBACS).Append("\n");
            sb.Append("  CreditCharge: ").Append(CreditCharge).Append("\n");
            sb.Append("  InsurancePremium: ").Append(InsurancePremium).Append("\n");
            sb.Append("  InsurancePremiumTax: ").Append(InsurancePremiumTax).Append("\n");
            sb.Append("  MonthlyPayments: ").Append(MonthlyPayments).Append("\n");
            sb.Append("  PolicyAdministrationFee: ").Append(PolicyAdministrationFee).Append("\n");
            sb.Append("  FamilyLegalProtection: ").Append(FamilyLegalProtection).Append("\n");
            sb.Append("  HomeEmergencyCover: ").Append(HomeEmergencyCover).Append("\n");
            sb.Append("  PremiumFunded: ").Append(PremiumFunded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PaymentDetails);
        }

        /// <summary>
        /// Returns true if PaymentDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PaymentDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.TotalAmountPayable == input.TotalAmountPayable ||
                    (this.TotalAmountPayable != null &&
                    this.TotalAmountPayable.Equals(input.TotalAmountPayable))
                ) && 
                (
                    this.MonthlyPremium == input.MonthlyPremium ||
                    (this.MonthlyPremium != null &&
                    this.MonthlyPremium.Equals(input.MonthlyPremium))
                ) && 
                (
                    this.CardPayment == input.CardPayment ||
                    (this.CardPayment != null &&
                    this.CardPayment.Equals(input.CardPayment))
                ) && 
                (
                    this.ChequeBACS == input.ChequeBACS ||
                    (this.ChequeBACS != null &&
                    this.ChequeBACS.Equals(input.ChequeBACS))
                ) && 
                (
                    this.CreditCharge == input.CreditCharge ||
                    (this.CreditCharge != null &&
                    this.CreditCharge.Equals(input.CreditCharge))
                ) && 
                (
                    this.InsurancePremium == input.InsurancePremium ||
                    (this.InsurancePremium != null &&
                    this.InsurancePremium.Equals(input.InsurancePremium))
                ) && 
                (
                    this.InsurancePremiumTax == input.InsurancePremiumTax ||
                    (this.InsurancePremiumTax != null &&
                    this.InsurancePremiumTax.Equals(input.InsurancePremiumTax))
                ) && 
                (
                    this.MonthlyPayments == input.MonthlyPayments ||
                    (this.MonthlyPayments != null &&
                    this.MonthlyPayments.Equals(input.MonthlyPayments))
                ) && 
                (
                    this.PolicyAdministrationFee == input.PolicyAdministrationFee ||
                    (this.PolicyAdministrationFee != null &&
                    this.PolicyAdministrationFee.Equals(input.PolicyAdministrationFee))
                ) && 
                (
                    this.FamilyLegalProtection == input.FamilyLegalProtection ||
                    (this.FamilyLegalProtection != null &&
                    this.FamilyLegalProtection.Equals(input.FamilyLegalProtection))
                ) && 
                (
                    this.HomeEmergencyCover == input.HomeEmergencyCover ||
                    (this.HomeEmergencyCover != null &&
                    this.HomeEmergencyCover.Equals(input.HomeEmergencyCover))
                ) && 
                (
                    this.PremiumFunded == input.PremiumFunded ||
                    (this.PremiumFunded != null &&
                    this.PremiumFunded.Equals(input.PremiumFunded))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TotalAmountPayable != null)
                {
                    hashCode = (hashCode * 59) + this.TotalAmountPayable.GetHashCode();
                }
                if (this.MonthlyPremium != null)
                {
                    hashCode = (hashCode * 59) + this.MonthlyPremium.GetHashCode();
                }
                if (this.CardPayment != null)
                {
                    hashCode = (hashCode * 59) + this.CardPayment.GetHashCode();
                }
                if (this.ChequeBACS != null)
                {
                    hashCode = (hashCode * 59) + this.ChequeBACS.GetHashCode();
                }
                if (this.CreditCharge != null)
                {
                    hashCode = (hashCode * 59) + this.CreditCharge.GetHashCode();
                }
                if (this.InsurancePremium != null)
                {
                    hashCode = (hashCode * 59) + this.InsurancePremium.GetHashCode();
                }
                if (this.InsurancePremiumTax != null)
                {
                    hashCode = (hashCode * 59) + this.InsurancePremiumTax.GetHashCode();
                }
                if (this.MonthlyPayments != null)
                {
                    hashCode = (hashCode * 59) + this.MonthlyPayments.GetHashCode();
                }
                if (this.PolicyAdministrationFee != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyAdministrationFee.GetHashCode();
                }
                if (this.FamilyLegalProtection != null)
                {
                    hashCode = (hashCode * 59) + this.FamilyLegalProtection.GetHashCode();
                }
                if (this.HomeEmergencyCover != null)
                {
                    hashCode = (hashCode * 59) + this.HomeEmergencyCover.GetHashCode();
                }
                if (this.PremiumFunded != null)
                {
                    hashCode = (hashCode * 59) + this.PremiumFunded.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
