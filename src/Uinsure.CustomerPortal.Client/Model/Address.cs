/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// Address
    /// </summary>
    [DataContract(Name = "Address")]
    public partial class Address : IEquatable<Address>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Address" /> class.
        /// </summary>
        /// <param name="addressLine1">addressLine1.</param>
        /// <param name="addressLine2">addressLine2.</param>
        /// <param name="addressLine3">addressLine3.</param>
        /// <param name="addressLine4">addressLine4.</param>
        /// <param name="postcode">postcode.</param>
        public Address(string addressLine1 = default(string), string addressLine2 = default(string), string addressLine3 = default(string), string addressLine4 = default(string), string postcode = default(string))
        {
            this._AddressLine1 = addressLine1;
            if (this.AddressLine1 != null)
            {
                this._flagAddressLine1 = true;
            }
            this._AddressLine2 = addressLine2;
            if (this.AddressLine2 != null)
            {
                this._flagAddressLine2 = true;
            }
            this._AddressLine3 = addressLine3;
            if (this.AddressLine3 != null)
            {
                this._flagAddressLine3 = true;
            }
            this._AddressLine4 = addressLine4;
            if (this.AddressLine4 != null)
            {
                this._flagAddressLine4 = true;
            }
            this._Postcode = postcode;
            if (this.Postcode != null)
            {
                this._flagPostcode = true;
            }
        }

        /// <summary>
        /// Gets or Sets AddressLine1
        /// </summary>
        [DataMember(Name = "AddressLine1", EmitDefaultValue = true)]
        public string AddressLine1
        {
            get{ return _AddressLine1;}
            set
            {
                _AddressLine1 = value;
                _flagAddressLine1 = true;
            }
        }
        private string _AddressLine1;
        private bool _flagAddressLine1;

        /// <summary>
        /// Returns false as AddressLine1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressLine1()
        {
            return _flagAddressLine1;
        }
        /// <summary>
        /// Gets or Sets AddressLine2
        /// </summary>
        [DataMember(Name = "AddressLine2", EmitDefaultValue = true)]
        public string AddressLine2
        {
            get{ return _AddressLine2;}
            set
            {
                _AddressLine2 = value;
                _flagAddressLine2 = true;
            }
        }
        private string _AddressLine2;
        private bool _flagAddressLine2;

        /// <summary>
        /// Returns false as AddressLine2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressLine2()
        {
            return _flagAddressLine2;
        }
        /// <summary>
        /// Gets or Sets AddressLine3
        /// </summary>
        [DataMember(Name = "AddressLine3", EmitDefaultValue = true)]
        public string AddressLine3
        {
            get{ return _AddressLine3;}
            set
            {
                _AddressLine3 = value;
                _flagAddressLine3 = true;
            }
        }
        private string _AddressLine3;
        private bool _flagAddressLine3;

        /// <summary>
        /// Returns false as AddressLine3 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressLine3()
        {
            return _flagAddressLine3;
        }
        /// <summary>
        /// Gets or Sets AddressLine4
        /// </summary>
        [DataMember(Name = "AddressLine4", EmitDefaultValue = true)]
        public string AddressLine4
        {
            get{ return _AddressLine4;}
            set
            {
                _AddressLine4 = value;
                _flagAddressLine4 = true;
            }
        }
        private string _AddressLine4;
        private bool _flagAddressLine4;

        /// <summary>
        /// Returns false as AddressLine4 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeAddressLine4()
        {
            return _flagAddressLine4;
        }
        /// <summary>
        /// Gets or Sets Postcode
        /// </summary>
        [DataMember(Name = "Postcode", EmitDefaultValue = true)]
        public string Postcode
        {
            get{ return _Postcode;}
            set
            {
                _Postcode = value;
                _flagPostcode = true;
            }
        }
        private string _Postcode;
        private bool _flagPostcode;

        /// <summary>
        /// Returns false as Postcode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePostcode()
        {
            return _flagPostcode;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Address {\n");
            sb.Append("  AddressLine1: ").Append(AddressLine1).Append("\n");
            sb.Append("  AddressLine2: ").Append(AddressLine2).Append("\n");
            sb.Append("  AddressLine3: ").Append(AddressLine3).Append("\n");
            sb.Append("  AddressLine4: ").Append(AddressLine4).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Address);
        }

        /// <summary>
        /// Returns true if Address instances are equal
        /// </summary>
        /// <param name="input">Instance of Address to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Address input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AddressLine1 == input.AddressLine1 ||
                    (this.AddressLine1 != null &&
                    this.AddressLine1.Equals(input.AddressLine1))
                ) && 
                (
                    this.AddressLine2 == input.AddressLine2 ||
                    (this.AddressLine2 != null &&
                    this.AddressLine2.Equals(input.AddressLine2))
                ) && 
                (
                    this.AddressLine3 == input.AddressLine3 ||
                    (this.AddressLine3 != null &&
                    this.AddressLine3.Equals(input.AddressLine3))
                ) && 
                (
                    this.AddressLine4 == input.AddressLine4 ||
                    (this.AddressLine4 != null &&
                    this.AddressLine4.Equals(input.AddressLine4))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AddressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine1.GetHashCode();
                }
                if (this.AddressLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine2.GetHashCode();
                }
                if (this.AddressLine3 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine3.GetHashCode();
                }
                if (this.AddressLine4 != null)
                {
                    hashCode = (hashCode * 59) + this.AddressLine4.GetHashCode();
                }
                if (this.Postcode != null)
                {
                    hashCode = (hashCode * 59) + this.Postcode.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
