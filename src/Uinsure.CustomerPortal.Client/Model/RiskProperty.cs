/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// DTO with details relating to the risk property of a policy
    /// </summary>
    [DataContract(Name = "RiskProperty")]
    public partial class RiskProperty : IEquatable<RiskProperty>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RiskProperty" /> class.
        /// </summary>
        /// <param name="riskAddressLine1">Risk address line 1..</param>
        /// <param name="riskAddressLine2">Risk address line 2..</param>
        /// <param name="riskAddressLine3">Risk address line 3..</param>
        /// <param name="riskAddressLine4">Risk address line 4..</param>
        /// <param name="riskAddressPostcode">Risk address post code..</param>
        /// <param name="riskAddressPostcodeArea">Risk address post code area..</param>
        /// <param name="longitude">Risk address longitude..</param>
        /// <param name="latitude">Risk address latitude..</param>
        /// <param name="propertyTypeName">Risk address property type..</param>
        /// <param name="numberOfBedrooms">Risk address number of bedrooms..</param>
        /// <param name="yearOfConstruction">Risk address year of construction..</param>
        /// <param name="yearOfConstructionRange">Risk address year range of construction..</param>
        /// <param name="isYearOfConstructionRange">Is the year of construction of the risk property provided a range?.</param>
        /// <param name="riskAddressRoyalMailReference">Risk address UDPRN..</param>
        /// <param name="mortgageProvider">Mortgage provider..</param>
        public RiskProperty(string riskAddressLine1 = default(string), string riskAddressLine2 = default(string), string riskAddressLine3 = default(string), string riskAddressLine4 = default(string), string riskAddressPostcode = default(string), string riskAddressPostcodeArea = default(string), double? longitude = default(double?), double? latitude = default(double?), string propertyTypeName = default(string), int? numberOfBedrooms = default(int?), int? yearOfConstruction = default(int?), string yearOfConstructionRange = default(string), bool? isYearOfConstructionRange = default(bool?), string riskAddressRoyalMailReference = default(string), string mortgageProvider = default(string))
        {
            this._RiskAddressLine1 = riskAddressLine1;
            if (this.RiskAddressLine1 != null)
            {
                this._flagRiskAddressLine1 = true;
            }
            this._RiskAddressLine2 = riskAddressLine2;
            if (this.RiskAddressLine2 != null)
            {
                this._flagRiskAddressLine2 = true;
            }
            this._RiskAddressLine3 = riskAddressLine3;
            if (this.RiskAddressLine3 != null)
            {
                this._flagRiskAddressLine3 = true;
            }
            this._RiskAddressLine4 = riskAddressLine4;
            if (this.RiskAddressLine4 != null)
            {
                this._flagRiskAddressLine4 = true;
            }
            this._RiskAddressPostcode = riskAddressPostcode;
            if (this.RiskAddressPostcode != null)
            {
                this._flagRiskAddressPostcode = true;
            }
            this._RiskAddressPostcodeArea = riskAddressPostcodeArea;
            if (this.RiskAddressPostcodeArea != null)
            {
                this._flagRiskAddressPostcodeArea = true;
            }
            this._Longitude = longitude;
            if (this.Longitude != null)
            {
                this._flagLongitude = true;
            }
            this._Latitude = latitude;
            if (this.Latitude != null)
            {
                this._flagLatitude = true;
            }
            this._PropertyTypeName = propertyTypeName;
            if (this.PropertyTypeName != null)
            {
                this._flagPropertyTypeName = true;
            }
            this._NumberOfBedrooms = numberOfBedrooms;
            if (this.NumberOfBedrooms != null)
            {
                this._flagNumberOfBedrooms = true;
            }
            this._YearOfConstruction = yearOfConstruction;
            if (this.YearOfConstruction != null)
            {
                this._flagYearOfConstruction = true;
            }
            this._YearOfConstructionRange = yearOfConstructionRange;
            if (this.YearOfConstructionRange != null)
            {
                this._flagYearOfConstructionRange = true;
            }
            this._IsYearOfConstructionRange = isYearOfConstructionRange;
            if (this.IsYearOfConstructionRange != null)
            {
                this._flagIsYearOfConstructionRange = true;
            }
            this._RiskAddressRoyalMailReference = riskAddressRoyalMailReference;
            if (this.RiskAddressRoyalMailReference != null)
            {
                this._flagRiskAddressRoyalMailReference = true;
            }
            this._MortgageProvider = mortgageProvider;
            if (this.MortgageProvider != null)
            {
                this._flagMortgageProvider = true;
            }
        }

        /// <summary>
        /// Risk address line 1.
        /// </summary>
        /// <value>Risk address line 1.</value>
        [DataMember(Name = "RiskAddressLine1", EmitDefaultValue = true)]
        public string RiskAddressLine1
        {
            get{ return _RiskAddressLine1;}
            set
            {
                _RiskAddressLine1 = value;
                _flagRiskAddressLine1 = true;
            }
        }
        private string _RiskAddressLine1;
        private bool _flagRiskAddressLine1;

        /// <summary>
        /// Returns false as RiskAddressLine1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRiskAddressLine1()
        {
            return _flagRiskAddressLine1;
        }
        /// <summary>
        /// Risk address line 2.
        /// </summary>
        /// <value>Risk address line 2.</value>
        [DataMember(Name = "RiskAddressLine2", EmitDefaultValue = true)]
        public string RiskAddressLine2
        {
            get{ return _RiskAddressLine2;}
            set
            {
                _RiskAddressLine2 = value;
                _flagRiskAddressLine2 = true;
            }
        }
        private string _RiskAddressLine2;
        private bool _flagRiskAddressLine2;

        /// <summary>
        /// Returns false as RiskAddressLine2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRiskAddressLine2()
        {
            return _flagRiskAddressLine2;
        }
        /// <summary>
        /// Risk address line 3.
        /// </summary>
        /// <value>Risk address line 3.</value>
        [DataMember(Name = "RiskAddressLine3", EmitDefaultValue = true)]
        public string RiskAddressLine3
        {
            get{ return _RiskAddressLine3;}
            set
            {
                _RiskAddressLine3 = value;
                _flagRiskAddressLine3 = true;
            }
        }
        private string _RiskAddressLine3;
        private bool _flagRiskAddressLine3;

        /// <summary>
        /// Returns false as RiskAddressLine3 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRiskAddressLine3()
        {
            return _flagRiskAddressLine3;
        }
        /// <summary>
        /// Risk address line 4.
        /// </summary>
        /// <value>Risk address line 4.</value>
        [DataMember(Name = "RiskAddressLine4", EmitDefaultValue = true)]
        public string RiskAddressLine4
        {
            get{ return _RiskAddressLine4;}
            set
            {
                _RiskAddressLine4 = value;
                _flagRiskAddressLine4 = true;
            }
        }
        private string _RiskAddressLine4;
        private bool _flagRiskAddressLine4;

        /// <summary>
        /// Returns false as RiskAddressLine4 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRiskAddressLine4()
        {
            return _flagRiskAddressLine4;
        }
        /// <summary>
        /// Risk address post code.
        /// </summary>
        /// <value>Risk address post code.</value>
        [DataMember(Name = "RiskAddressPostcode", EmitDefaultValue = true)]
        public string RiskAddressPostcode
        {
            get{ return _RiskAddressPostcode;}
            set
            {
                _RiskAddressPostcode = value;
                _flagRiskAddressPostcode = true;
            }
        }
        private string _RiskAddressPostcode;
        private bool _flagRiskAddressPostcode;

        /// <summary>
        /// Returns false as RiskAddressPostcode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRiskAddressPostcode()
        {
            return _flagRiskAddressPostcode;
        }
        /// <summary>
        /// Risk address post code area.
        /// </summary>
        /// <value>Risk address post code area.</value>
        [DataMember(Name = "RiskAddressPostcodeArea", EmitDefaultValue = true)]
        public string RiskAddressPostcodeArea
        {
            get{ return _RiskAddressPostcodeArea;}
            set
            {
                _RiskAddressPostcodeArea = value;
                _flagRiskAddressPostcodeArea = true;
            }
        }
        private string _RiskAddressPostcodeArea;
        private bool _flagRiskAddressPostcodeArea;

        /// <summary>
        /// Returns false as RiskAddressPostcodeArea should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRiskAddressPostcodeArea()
        {
            return _flagRiskAddressPostcodeArea;
        }
        /// <summary>
        /// Risk address longitude.
        /// </summary>
        /// <value>Risk address longitude.</value>
        [DataMember(Name = "Longitude", EmitDefaultValue = true)]
        public double? Longitude
        {
            get{ return _Longitude;}
            set
            {
                _Longitude = value;
                _flagLongitude = true;
            }
        }
        private double? _Longitude;
        private bool _flagLongitude;

        /// <summary>
        /// Returns false as Longitude should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLongitude()
        {
            return _flagLongitude;
        }
        /// <summary>
        /// Risk address latitude.
        /// </summary>
        /// <value>Risk address latitude.</value>
        [DataMember(Name = "Latitude", EmitDefaultValue = true)]
        public double? Latitude
        {
            get{ return _Latitude;}
            set
            {
                _Latitude = value;
                _flagLatitude = true;
            }
        }
        private double? _Latitude;
        private bool _flagLatitude;

        /// <summary>
        /// Returns false as Latitude should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLatitude()
        {
            return _flagLatitude;
        }
        /// <summary>
        /// Risk address property type.
        /// </summary>
        /// <value>Risk address property type.</value>
        [DataMember(Name = "PropertyTypeName", EmitDefaultValue = true)]
        public string PropertyTypeName
        {
            get{ return _PropertyTypeName;}
            set
            {
                _PropertyTypeName = value;
                _flagPropertyTypeName = true;
            }
        }
        private string _PropertyTypeName;
        private bool _flagPropertyTypeName;

        /// <summary>
        /// Returns false as PropertyTypeName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePropertyTypeName()
        {
            return _flagPropertyTypeName;
        }
        /// <summary>
        /// Risk address number of bedrooms.
        /// </summary>
        /// <value>Risk address number of bedrooms.</value>
        [DataMember(Name = "NumberOfBedrooms", EmitDefaultValue = true)]
        public int? NumberOfBedrooms
        {
            get{ return _NumberOfBedrooms;}
            set
            {
                _NumberOfBedrooms = value;
                _flagNumberOfBedrooms = true;
            }
        }
        private int? _NumberOfBedrooms;
        private bool _flagNumberOfBedrooms;

        /// <summary>
        /// Returns false as NumberOfBedrooms should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumberOfBedrooms()
        {
            return _flagNumberOfBedrooms;
        }
        /// <summary>
        /// Risk address year of construction.
        /// </summary>
        /// <value>Risk address year of construction.</value>
        [DataMember(Name = "YearOfConstruction", EmitDefaultValue = true)]
        public int? YearOfConstruction
        {
            get{ return _YearOfConstruction;}
            set
            {
                _YearOfConstruction = value;
                _flagYearOfConstruction = true;
            }
        }
        private int? _YearOfConstruction;
        private bool _flagYearOfConstruction;

        /// <summary>
        /// Returns false as YearOfConstruction should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeYearOfConstruction()
        {
            return _flagYearOfConstruction;
        }
        /// <summary>
        /// Risk address year range of construction.
        /// </summary>
        /// <value>Risk address year range of construction.</value>
        [DataMember(Name = "YearOfConstructionRange", EmitDefaultValue = true)]
        public string YearOfConstructionRange
        {
            get{ return _YearOfConstructionRange;}
            set
            {
                _YearOfConstructionRange = value;
                _flagYearOfConstructionRange = true;
            }
        }
        private string _YearOfConstructionRange;
        private bool _flagYearOfConstructionRange;

        /// <summary>
        /// Returns false as YearOfConstructionRange should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeYearOfConstructionRange()
        {
            return _flagYearOfConstructionRange;
        }
        /// <summary>
        /// Is the year of construction of the risk property provided a range?
        /// </summary>
        /// <value>Is the year of construction of the risk property provided a range?</value>
        [DataMember(Name = "IsYearOfConstructionRange", EmitDefaultValue = true)]
        public bool? IsYearOfConstructionRange
        {
            get{ return _IsYearOfConstructionRange;}
            set
            {
                _IsYearOfConstructionRange = value;
                _flagIsYearOfConstructionRange = true;
            }
        }
        private bool? _IsYearOfConstructionRange;
        private bool _flagIsYearOfConstructionRange;

        /// <summary>
        /// Returns false as IsYearOfConstructionRange should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsYearOfConstructionRange()
        {
            return _flagIsYearOfConstructionRange;
        }
        /// <summary>
        /// Risk address UDPRN.
        /// </summary>
        /// <value>Risk address UDPRN.</value>
        [DataMember(Name = "RiskAddressRoyalMailReference", EmitDefaultValue = true)]
        public string RiskAddressRoyalMailReference
        {
            get{ return _RiskAddressRoyalMailReference;}
            set
            {
                _RiskAddressRoyalMailReference = value;
                _flagRiskAddressRoyalMailReference = true;
            }
        }
        private string _RiskAddressRoyalMailReference;
        private bool _flagRiskAddressRoyalMailReference;

        /// <summary>
        /// Returns false as RiskAddressRoyalMailReference should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRiskAddressRoyalMailReference()
        {
            return _flagRiskAddressRoyalMailReference;
        }
        /// <summary>
        /// Mortgage provider.
        /// </summary>
        /// <value>Mortgage provider.</value>
        [DataMember(Name = "MortgageProvider", EmitDefaultValue = true)]
        public string MortgageProvider
        {
            get{ return _MortgageProvider;}
            set
            {
                _MortgageProvider = value;
                _flagMortgageProvider = true;
            }
        }
        private string _MortgageProvider;
        private bool _flagMortgageProvider;

        /// <summary>
        /// Returns false as MortgageProvider should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeMortgageProvider()
        {
            return _flagMortgageProvider;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RiskProperty {\n");
            sb.Append("  RiskAddressLine1: ").Append(RiskAddressLine1).Append("\n");
            sb.Append("  RiskAddressLine2: ").Append(RiskAddressLine2).Append("\n");
            sb.Append("  RiskAddressLine3: ").Append(RiskAddressLine3).Append("\n");
            sb.Append("  RiskAddressLine4: ").Append(RiskAddressLine4).Append("\n");
            sb.Append("  RiskAddressPostcode: ").Append(RiskAddressPostcode).Append("\n");
            sb.Append("  RiskAddressPostcodeArea: ").Append(RiskAddressPostcodeArea).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  PropertyTypeName: ").Append(PropertyTypeName).Append("\n");
            sb.Append("  NumberOfBedrooms: ").Append(NumberOfBedrooms).Append("\n");
            sb.Append("  YearOfConstruction: ").Append(YearOfConstruction).Append("\n");
            sb.Append("  YearOfConstructionRange: ").Append(YearOfConstructionRange).Append("\n");
            sb.Append("  IsYearOfConstructionRange: ").Append(IsYearOfConstructionRange).Append("\n");
            sb.Append("  RiskAddressRoyalMailReference: ").Append(RiskAddressRoyalMailReference).Append("\n");
            sb.Append("  MortgageProvider: ").Append(MortgageProvider).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RiskProperty);
        }

        /// <summary>
        /// Returns true if RiskProperty instances are equal
        /// </summary>
        /// <param name="input">Instance of RiskProperty to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RiskProperty input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.RiskAddressLine1 == input.RiskAddressLine1 ||
                    (this.RiskAddressLine1 != null &&
                    this.RiskAddressLine1.Equals(input.RiskAddressLine1))
                ) && 
                (
                    this.RiskAddressLine2 == input.RiskAddressLine2 ||
                    (this.RiskAddressLine2 != null &&
                    this.RiskAddressLine2.Equals(input.RiskAddressLine2))
                ) && 
                (
                    this.RiskAddressLine3 == input.RiskAddressLine3 ||
                    (this.RiskAddressLine3 != null &&
                    this.RiskAddressLine3.Equals(input.RiskAddressLine3))
                ) && 
                (
                    this.RiskAddressLine4 == input.RiskAddressLine4 ||
                    (this.RiskAddressLine4 != null &&
                    this.RiskAddressLine4.Equals(input.RiskAddressLine4))
                ) && 
                (
                    this.RiskAddressPostcode == input.RiskAddressPostcode ||
                    (this.RiskAddressPostcode != null &&
                    this.RiskAddressPostcode.Equals(input.RiskAddressPostcode))
                ) && 
                (
                    this.RiskAddressPostcodeArea == input.RiskAddressPostcodeArea ||
                    (this.RiskAddressPostcodeArea != null &&
                    this.RiskAddressPostcodeArea.Equals(input.RiskAddressPostcodeArea))
                ) && 
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) && 
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) && 
                (
                    this.PropertyTypeName == input.PropertyTypeName ||
                    (this.PropertyTypeName != null &&
                    this.PropertyTypeName.Equals(input.PropertyTypeName))
                ) && 
                (
                    this.NumberOfBedrooms == input.NumberOfBedrooms ||
                    (this.NumberOfBedrooms != null &&
                    this.NumberOfBedrooms.Equals(input.NumberOfBedrooms))
                ) && 
                (
                    this.YearOfConstruction == input.YearOfConstruction ||
                    (this.YearOfConstruction != null &&
                    this.YearOfConstruction.Equals(input.YearOfConstruction))
                ) && 
                (
                    this.YearOfConstructionRange == input.YearOfConstructionRange ||
                    (this.YearOfConstructionRange != null &&
                    this.YearOfConstructionRange.Equals(input.YearOfConstructionRange))
                ) && 
                (
                    this.IsYearOfConstructionRange == input.IsYearOfConstructionRange ||
                    (this.IsYearOfConstructionRange != null &&
                    this.IsYearOfConstructionRange.Equals(input.IsYearOfConstructionRange))
                ) && 
                (
                    this.RiskAddressRoyalMailReference == input.RiskAddressRoyalMailReference ||
                    (this.RiskAddressRoyalMailReference != null &&
                    this.RiskAddressRoyalMailReference.Equals(input.RiskAddressRoyalMailReference))
                ) && 
                (
                    this.MortgageProvider == input.MortgageProvider ||
                    (this.MortgageProvider != null &&
                    this.MortgageProvider.Equals(input.MortgageProvider))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RiskAddressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.RiskAddressLine1.GetHashCode();
                }
                if (this.RiskAddressLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.RiskAddressLine2.GetHashCode();
                }
                if (this.RiskAddressLine3 != null)
                {
                    hashCode = (hashCode * 59) + this.RiskAddressLine3.GetHashCode();
                }
                if (this.RiskAddressLine4 != null)
                {
                    hashCode = (hashCode * 59) + this.RiskAddressLine4.GetHashCode();
                }
                if (this.RiskAddressPostcode != null)
                {
                    hashCode = (hashCode * 59) + this.RiskAddressPostcode.GetHashCode();
                }
                if (this.RiskAddressPostcodeArea != null)
                {
                    hashCode = (hashCode * 59) + this.RiskAddressPostcodeArea.GetHashCode();
                }
                if (this.Longitude != null)
                {
                    hashCode = (hashCode * 59) + this.Longitude.GetHashCode();
                }
                if (this.Latitude != null)
                {
                    hashCode = (hashCode * 59) + this.Latitude.GetHashCode();
                }
                if (this.PropertyTypeName != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyTypeName.GetHashCode();
                }
                if (this.NumberOfBedrooms != null)
                {
                    hashCode = (hashCode * 59) + this.NumberOfBedrooms.GetHashCode();
                }
                if (this.YearOfConstruction != null)
                {
                    hashCode = (hashCode * 59) + this.YearOfConstruction.GetHashCode();
                }
                if (this.YearOfConstructionRange != null)
                {
                    hashCode = (hashCode * 59) + this.YearOfConstructionRange.GetHashCode();
                }
                if (this.IsYearOfConstructionRange != null)
                {
                    hashCode = (hashCode * 59) + this.IsYearOfConstructionRange.GetHashCode();
                }
                if (this.RiskAddressRoyalMailReference != null)
                {
                    hashCode = (hashCode * 59) + this.RiskAddressRoyalMailReference.GetHashCode();
                }
                if (this.MortgageProvider != null)
                {
                    hashCode = (hashCode * 59) + this.MortgageProvider.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
