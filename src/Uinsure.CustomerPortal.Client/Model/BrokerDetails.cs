/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// DTO with details relating to a Broker and their company
    /// </summary>
    [DataContract(Name = "BrokerDetails")]
    public partial class BrokerDetails : IEquatable<BrokerDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerDetails" /> class.
        /// </summary>
        /// <param name="brokerCommissionRate">Broker commission rate.</param>
        /// <param name="networkCommissionRate">Network commission rate.</param>
        /// <param name="saleTypeNew">Type of sale.</param>
        /// <param name="uinsureCommissionRate">Uinsure commission rate.</param>
        /// <param name="applicationSource">Application source..</param>
        /// <param name="firstName">Broker&#39;s first name..</param>
        /// <param name="lastName">Broker&#39;s last name..</param>
        /// <param name="fullName">Broker&#39;s full name..</param>
        /// <param name="companyName">Company name..</param>
        /// <param name="distributionGroupName">Distribution group name..</param>
        /// <param name="drillDownStatus">Drilldown status..</param>
        /// <param name="networkName">Network name..</param>
        /// <param name="originalFirstName">Broker&#39;s original first name..</param>
        /// <param name="originalLastName">Broker&#39;s original last name..</param>
        /// <param name="originalFullName">Broker&#39;s original full name..</param>
        /// <param name="originalCompanyName">Broker&#39;s original company name..</param>
        /// <param name="originalDistributionGroupName">Broker&#39;s original distribution group name..</param>
        /// <param name="originalNetworkName">Original network name..</param>
        /// <param name="originalPolicyNumber">Policy number..</param>
        /// <param name="saleType">Type of sale..</param>
        /// <param name="source">Source..</param>
        public BrokerDetails(double? brokerCommissionRate = default(double?), double? networkCommissionRate = default(double?), string saleTypeNew = default(string), double? uinsureCommissionRate = default(double?), string applicationSource = default(string), string firstName = default(string), string lastName = default(string), string fullName = default(string), string companyName = default(string), string distributionGroupName = default(string), string drillDownStatus = default(string), string networkName = default(string), string originalFirstName = default(string), string originalLastName = default(string), string originalFullName = default(string), string originalCompanyName = default(string), string originalDistributionGroupName = default(string), string originalNetworkName = default(string), string originalPolicyNumber = default(string), string saleType = default(string), string source = default(string))
        {
            this._BrokerCommissionRate = brokerCommissionRate;
            if (this.BrokerCommissionRate != null)
            {
                this._flagBrokerCommissionRate = true;
            }
            this._NetworkCommissionRate = networkCommissionRate;
            if (this.NetworkCommissionRate != null)
            {
                this._flagNetworkCommissionRate = true;
            }
            this._SaleTypeNew = saleTypeNew;
            if (this.SaleTypeNew != null)
            {
                this._flagSaleTypeNew = true;
            }
            this._UinsureCommissionRate = uinsureCommissionRate;
            if (this.UinsureCommissionRate != null)
            {
                this._flagUinsureCommissionRate = true;
            }
            this._ApplicationSource = applicationSource;
            if (this.ApplicationSource != null)
            {
                this._flagApplicationSource = true;
            }
            this._FirstName = firstName;
            if (this.FirstName != null)
            {
                this._flagFirstName = true;
            }
            this._LastName = lastName;
            if (this.LastName != null)
            {
                this._flagLastName = true;
            }
            this._FullName = fullName;
            if (this.FullName != null)
            {
                this._flagFullName = true;
            }
            this._CompanyName = companyName;
            if (this.CompanyName != null)
            {
                this._flagCompanyName = true;
            }
            this._DistributionGroupName = distributionGroupName;
            if (this.DistributionGroupName != null)
            {
                this._flagDistributionGroupName = true;
            }
            this._DrillDownStatus = drillDownStatus;
            if (this.DrillDownStatus != null)
            {
                this._flagDrillDownStatus = true;
            }
            this._NetworkName = networkName;
            if (this.NetworkName != null)
            {
                this._flagNetworkName = true;
            }
            this._OriginalFirstName = originalFirstName;
            if (this.OriginalFirstName != null)
            {
                this._flagOriginalFirstName = true;
            }
            this._OriginalLastName = originalLastName;
            if (this.OriginalLastName != null)
            {
                this._flagOriginalLastName = true;
            }
            this._OriginalFullName = originalFullName;
            if (this.OriginalFullName != null)
            {
                this._flagOriginalFullName = true;
            }
            this._OriginalCompanyName = originalCompanyName;
            if (this.OriginalCompanyName != null)
            {
                this._flagOriginalCompanyName = true;
            }
            this._OriginalDistributionGroupName = originalDistributionGroupName;
            if (this.OriginalDistributionGroupName != null)
            {
                this._flagOriginalDistributionGroupName = true;
            }
            this._OriginalNetworkName = originalNetworkName;
            if (this.OriginalNetworkName != null)
            {
                this._flagOriginalNetworkName = true;
            }
            this._OriginalPolicyNumber = originalPolicyNumber;
            if (this.OriginalPolicyNumber != null)
            {
                this._flagOriginalPolicyNumber = true;
            }
            this._SaleType = saleType;
            if (this.SaleType != null)
            {
                this._flagSaleType = true;
            }
            this._Source = source;
            if (this.Source != null)
            {
                this._flagSource = true;
            }
        }

        /// <summary>
        /// Broker commission rate
        /// </summary>
        /// <value>Broker commission rate</value>
        [DataMember(Name = "BrokerCommissionRate", EmitDefaultValue = true)]
        public double? BrokerCommissionRate
        {
            get{ return _BrokerCommissionRate;}
            set
            {
                _BrokerCommissionRate = value;
                _flagBrokerCommissionRate = true;
            }
        }
        private double? _BrokerCommissionRate;
        private bool _flagBrokerCommissionRate;

        /// <summary>
        /// Returns false as BrokerCommissionRate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBrokerCommissionRate()
        {
            return _flagBrokerCommissionRate;
        }
        /// <summary>
        /// Network commission rate
        /// </summary>
        /// <value>Network commission rate</value>
        [DataMember(Name = "NetworkCommissionRate", EmitDefaultValue = true)]
        public double? NetworkCommissionRate
        {
            get{ return _NetworkCommissionRate;}
            set
            {
                _NetworkCommissionRate = value;
                _flagNetworkCommissionRate = true;
            }
        }
        private double? _NetworkCommissionRate;
        private bool _flagNetworkCommissionRate;

        /// <summary>
        /// Returns false as NetworkCommissionRate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetworkCommissionRate()
        {
            return _flagNetworkCommissionRate;
        }
        /// <summary>
        /// Type of sale
        /// </summary>
        /// <value>Type of sale</value>
        [DataMember(Name = "SaleTypeNew", EmitDefaultValue = true)]
        public string SaleTypeNew
        {
            get{ return _SaleTypeNew;}
            set
            {
                _SaleTypeNew = value;
                _flagSaleTypeNew = true;
            }
        }
        private string _SaleTypeNew;
        private bool _flagSaleTypeNew;

        /// <summary>
        /// Returns false as SaleTypeNew should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSaleTypeNew()
        {
            return _flagSaleTypeNew;
        }
        /// <summary>
        /// Uinsure commission rate
        /// </summary>
        /// <value>Uinsure commission rate</value>
        [DataMember(Name = "UinsureCommissionRate", EmitDefaultValue = true)]
        public double? UinsureCommissionRate
        {
            get{ return _UinsureCommissionRate;}
            set
            {
                _UinsureCommissionRate = value;
                _flagUinsureCommissionRate = true;
            }
        }
        private double? _UinsureCommissionRate;
        private bool _flagUinsureCommissionRate;

        /// <summary>
        /// Returns false as UinsureCommissionRate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUinsureCommissionRate()
        {
            return _flagUinsureCommissionRate;
        }
        /// <summary>
        /// Application source.
        /// </summary>
        /// <value>Application source.</value>
        [DataMember(Name = "ApplicationSource", EmitDefaultValue = true)]
        public string ApplicationSource
        {
            get{ return _ApplicationSource;}
            set
            {
                _ApplicationSource = value;
                _flagApplicationSource = true;
            }
        }
        private string _ApplicationSource;
        private bool _flagApplicationSource;

        /// <summary>
        /// Returns false as ApplicationSource should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicationSource()
        {
            return _flagApplicationSource;
        }
        /// <summary>
        /// Broker&#39;s first name.
        /// </summary>
        /// <value>Broker&#39;s first name.</value>
        [DataMember(Name = "FirstName", EmitDefaultValue = true)]
        public string FirstName
        {
            get{ return _FirstName;}
            set
            {
                _FirstName = value;
                _flagFirstName = true;
            }
        }
        private string _FirstName;
        private bool _flagFirstName;

        /// <summary>
        /// Returns false as FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstName()
        {
            return _flagFirstName;
        }
        /// <summary>
        /// Broker&#39;s last name.
        /// </summary>
        /// <value>Broker&#39;s last name.</value>
        [DataMember(Name = "LastName", EmitDefaultValue = true)]
        public string LastName
        {
            get{ return _LastName;}
            set
            {
                _LastName = value;
                _flagLastName = true;
            }
        }
        private string _LastName;
        private bool _flagLastName;

        /// <summary>
        /// Returns false as LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastName()
        {
            return _flagLastName;
        }
        /// <summary>
        /// Broker&#39;s full name.
        /// </summary>
        /// <value>Broker&#39;s full name.</value>
        [DataMember(Name = "FullName", EmitDefaultValue = true)]
        public string FullName
        {
            get{ return _FullName;}
            set
            {
                _FullName = value;
                _flagFullName = true;
            }
        }
        private string _FullName;
        private bool _flagFullName;

        /// <summary>
        /// Returns false as FullName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFullName()
        {
            return _flagFullName;
        }
        /// <summary>
        /// Company name.
        /// </summary>
        /// <value>Company name.</value>
        [DataMember(Name = "CompanyName", EmitDefaultValue = true)]
        public string CompanyName
        {
            get{ return _CompanyName;}
            set
            {
                _CompanyName = value;
                _flagCompanyName = true;
            }
        }
        private string _CompanyName;
        private bool _flagCompanyName;

        /// <summary>
        /// Returns false as CompanyName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCompanyName()
        {
            return _flagCompanyName;
        }
        /// <summary>
        /// Distribution group name.
        /// </summary>
        /// <value>Distribution group name.</value>
        [DataMember(Name = "DistributionGroupName", EmitDefaultValue = true)]
        public string DistributionGroupName
        {
            get{ return _DistributionGroupName;}
            set
            {
                _DistributionGroupName = value;
                _flagDistributionGroupName = true;
            }
        }
        private string _DistributionGroupName;
        private bool _flagDistributionGroupName;

        /// <summary>
        /// Returns false as DistributionGroupName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDistributionGroupName()
        {
            return _flagDistributionGroupName;
        }
        /// <summary>
        /// Drilldown status.
        /// </summary>
        /// <value>Drilldown status.</value>
        [DataMember(Name = "DrillDownStatus", EmitDefaultValue = true)]
        public string DrillDownStatus
        {
            get{ return _DrillDownStatus;}
            set
            {
                _DrillDownStatus = value;
                _flagDrillDownStatus = true;
            }
        }
        private string _DrillDownStatus;
        private bool _flagDrillDownStatus;

        /// <summary>
        /// Returns false as DrillDownStatus should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDrillDownStatus()
        {
            return _flagDrillDownStatus;
        }
        /// <summary>
        /// Network name.
        /// </summary>
        /// <value>Network name.</value>
        [DataMember(Name = "NetworkName", EmitDefaultValue = true)]
        public string NetworkName
        {
            get{ return _NetworkName;}
            set
            {
                _NetworkName = value;
                _flagNetworkName = true;
            }
        }
        private string _NetworkName;
        private bool _flagNetworkName;

        /// <summary>
        /// Returns false as NetworkName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNetworkName()
        {
            return _flagNetworkName;
        }
        /// <summary>
        /// Broker&#39;s original first name.
        /// </summary>
        /// <value>Broker&#39;s original first name.</value>
        [DataMember(Name = "OriginalFirstName", EmitDefaultValue = true)]
        public string OriginalFirstName
        {
            get{ return _OriginalFirstName;}
            set
            {
                _OriginalFirstName = value;
                _flagOriginalFirstName = true;
            }
        }
        private string _OriginalFirstName;
        private bool _flagOriginalFirstName;

        /// <summary>
        /// Returns false as OriginalFirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalFirstName()
        {
            return _flagOriginalFirstName;
        }
        /// <summary>
        /// Broker&#39;s original last name.
        /// </summary>
        /// <value>Broker&#39;s original last name.</value>
        [DataMember(Name = "OriginalLastName", EmitDefaultValue = true)]
        public string OriginalLastName
        {
            get{ return _OriginalLastName;}
            set
            {
                _OriginalLastName = value;
                _flagOriginalLastName = true;
            }
        }
        private string _OriginalLastName;
        private bool _flagOriginalLastName;

        /// <summary>
        /// Returns false as OriginalLastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalLastName()
        {
            return _flagOriginalLastName;
        }
        /// <summary>
        /// Broker&#39;s original full name.
        /// </summary>
        /// <value>Broker&#39;s original full name.</value>
        [DataMember(Name = "OriginalFullName", EmitDefaultValue = true)]
        public string OriginalFullName
        {
            get{ return _OriginalFullName;}
            set
            {
                _OriginalFullName = value;
                _flagOriginalFullName = true;
            }
        }
        private string _OriginalFullName;
        private bool _flagOriginalFullName;

        /// <summary>
        /// Returns false as OriginalFullName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalFullName()
        {
            return _flagOriginalFullName;
        }
        /// <summary>
        /// Broker&#39;s original company name.
        /// </summary>
        /// <value>Broker&#39;s original company name.</value>
        [DataMember(Name = "OriginalCompanyName", EmitDefaultValue = true)]
        public string OriginalCompanyName
        {
            get{ return _OriginalCompanyName;}
            set
            {
                _OriginalCompanyName = value;
                _flagOriginalCompanyName = true;
            }
        }
        private string _OriginalCompanyName;
        private bool _flagOriginalCompanyName;

        /// <summary>
        /// Returns false as OriginalCompanyName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalCompanyName()
        {
            return _flagOriginalCompanyName;
        }
        /// <summary>
        /// Broker&#39;s original distribution group name.
        /// </summary>
        /// <value>Broker&#39;s original distribution group name.</value>
        [DataMember(Name = "OriginalDistributionGroupName", EmitDefaultValue = true)]
        public string OriginalDistributionGroupName
        {
            get{ return _OriginalDistributionGroupName;}
            set
            {
                _OriginalDistributionGroupName = value;
                _flagOriginalDistributionGroupName = true;
            }
        }
        private string _OriginalDistributionGroupName;
        private bool _flagOriginalDistributionGroupName;

        /// <summary>
        /// Returns false as OriginalDistributionGroupName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalDistributionGroupName()
        {
            return _flagOriginalDistributionGroupName;
        }
        /// <summary>
        /// Original network name.
        /// </summary>
        /// <value>Original network name.</value>
        [DataMember(Name = "OriginalNetworkName", EmitDefaultValue = true)]
        public string OriginalNetworkName
        {
            get{ return _OriginalNetworkName;}
            set
            {
                _OriginalNetworkName = value;
                _flagOriginalNetworkName = true;
            }
        }
        private string _OriginalNetworkName;
        private bool _flagOriginalNetworkName;

        /// <summary>
        /// Returns false as OriginalNetworkName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalNetworkName()
        {
            return _flagOriginalNetworkName;
        }
        /// <summary>
        /// Policy number.
        /// </summary>
        /// <value>Policy number.</value>
        [DataMember(Name = "OriginalPolicyNumber", EmitDefaultValue = true)]
        public string OriginalPolicyNumber
        {
            get{ return _OriginalPolicyNumber;}
            set
            {
                _OriginalPolicyNumber = value;
                _flagOriginalPolicyNumber = true;
            }
        }
        private string _OriginalPolicyNumber;
        private bool _flagOriginalPolicyNumber;

        /// <summary>
        /// Returns false as OriginalPolicyNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOriginalPolicyNumber()
        {
            return _flagOriginalPolicyNumber;
        }
        /// <summary>
        /// Type of sale.
        /// </summary>
        /// <value>Type of sale.</value>
        [DataMember(Name = "SaleType", EmitDefaultValue = true)]
        public string SaleType
        {
            get{ return _SaleType;}
            set
            {
                _SaleType = value;
                _flagSaleType = true;
            }
        }
        private string _SaleType;
        private bool _flagSaleType;

        /// <summary>
        /// Returns false as SaleType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSaleType()
        {
            return _flagSaleType;
        }
        /// <summary>
        /// Source.
        /// </summary>
        /// <value>Source.</value>
        [DataMember(Name = "Source", EmitDefaultValue = true)]
        public string Source
        {
            get{ return _Source;}
            set
            {
                _Source = value;
                _flagSource = true;
            }
        }
        private string _Source;
        private bool _flagSource;

        /// <summary>
        /// Returns false as Source should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeSource()
        {
            return _flagSource;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BrokerDetails {\n");
            sb.Append("  BrokerCommissionRate: ").Append(BrokerCommissionRate).Append("\n");
            sb.Append("  NetworkCommissionRate: ").Append(NetworkCommissionRate).Append("\n");
            sb.Append("  SaleTypeNew: ").Append(SaleTypeNew).Append("\n");
            sb.Append("  UinsureCommissionRate: ").Append(UinsureCommissionRate).Append("\n");
            sb.Append("  ApplicationSource: ").Append(ApplicationSource).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  FullName: ").Append(FullName).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  DistributionGroupName: ").Append(DistributionGroupName).Append("\n");
            sb.Append("  DrillDownStatus: ").Append(DrillDownStatus).Append("\n");
            sb.Append("  NetworkName: ").Append(NetworkName).Append("\n");
            sb.Append("  OriginalFirstName: ").Append(OriginalFirstName).Append("\n");
            sb.Append("  OriginalLastName: ").Append(OriginalLastName).Append("\n");
            sb.Append("  OriginalFullName: ").Append(OriginalFullName).Append("\n");
            sb.Append("  OriginalCompanyName: ").Append(OriginalCompanyName).Append("\n");
            sb.Append("  OriginalDistributionGroupName: ").Append(OriginalDistributionGroupName).Append("\n");
            sb.Append("  OriginalNetworkName: ").Append(OriginalNetworkName).Append("\n");
            sb.Append("  OriginalPolicyNumber: ").Append(OriginalPolicyNumber).Append("\n");
            sb.Append("  SaleType: ").Append(SaleType).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as BrokerDetails);
        }

        /// <summary>
        /// Returns true if BrokerDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of BrokerDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BrokerDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BrokerCommissionRate == input.BrokerCommissionRate ||
                    (this.BrokerCommissionRate != null &&
                    this.BrokerCommissionRate.Equals(input.BrokerCommissionRate))
                ) && 
                (
                    this.NetworkCommissionRate == input.NetworkCommissionRate ||
                    (this.NetworkCommissionRate != null &&
                    this.NetworkCommissionRate.Equals(input.NetworkCommissionRate))
                ) && 
                (
                    this.SaleTypeNew == input.SaleTypeNew ||
                    (this.SaleTypeNew != null &&
                    this.SaleTypeNew.Equals(input.SaleTypeNew))
                ) && 
                (
                    this.UinsureCommissionRate == input.UinsureCommissionRate ||
                    (this.UinsureCommissionRate != null &&
                    this.UinsureCommissionRate.Equals(input.UinsureCommissionRate))
                ) && 
                (
                    this.ApplicationSource == input.ApplicationSource ||
                    (this.ApplicationSource != null &&
                    this.ApplicationSource.Equals(input.ApplicationSource))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                ) && 
                (
                    this.LastName == input.LastName ||
                    (this.LastName != null &&
                    this.LastName.Equals(input.LastName))
                ) && 
                (
                    this.FullName == input.FullName ||
                    (this.FullName != null &&
                    this.FullName.Equals(input.FullName))
                ) && 
                (
                    this.CompanyName == input.CompanyName ||
                    (this.CompanyName != null &&
                    this.CompanyName.Equals(input.CompanyName))
                ) && 
                (
                    this.DistributionGroupName == input.DistributionGroupName ||
                    (this.DistributionGroupName != null &&
                    this.DistributionGroupName.Equals(input.DistributionGroupName))
                ) && 
                (
                    this.DrillDownStatus == input.DrillDownStatus ||
                    (this.DrillDownStatus != null &&
                    this.DrillDownStatus.Equals(input.DrillDownStatus))
                ) && 
                (
                    this.NetworkName == input.NetworkName ||
                    (this.NetworkName != null &&
                    this.NetworkName.Equals(input.NetworkName))
                ) && 
                (
                    this.OriginalFirstName == input.OriginalFirstName ||
                    (this.OriginalFirstName != null &&
                    this.OriginalFirstName.Equals(input.OriginalFirstName))
                ) && 
                (
                    this.OriginalLastName == input.OriginalLastName ||
                    (this.OriginalLastName != null &&
                    this.OriginalLastName.Equals(input.OriginalLastName))
                ) && 
                (
                    this.OriginalFullName == input.OriginalFullName ||
                    (this.OriginalFullName != null &&
                    this.OriginalFullName.Equals(input.OriginalFullName))
                ) && 
                (
                    this.OriginalCompanyName == input.OriginalCompanyName ||
                    (this.OriginalCompanyName != null &&
                    this.OriginalCompanyName.Equals(input.OriginalCompanyName))
                ) && 
                (
                    this.OriginalDistributionGroupName == input.OriginalDistributionGroupName ||
                    (this.OriginalDistributionGroupName != null &&
                    this.OriginalDistributionGroupName.Equals(input.OriginalDistributionGroupName))
                ) && 
                (
                    this.OriginalNetworkName == input.OriginalNetworkName ||
                    (this.OriginalNetworkName != null &&
                    this.OriginalNetworkName.Equals(input.OriginalNetworkName))
                ) && 
                (
                    this.OriginalPolicyNumber == input.OriginalPolicyNumber ||
                    (this.OriginalPolicyNumber != null &&
                    this.OriginalPolicyNumber.Equals(input.OriginalPolicyNumber))
                ) && 
                (
                    this.SaleType == input.SaleType ||
                    (this.SaleType != null &&
                    this.SaleType.Equals(input.SaleType))
                ) && 
                (
                    this.Source == input.Source ||
                    (this.Source != null &&
                    this.Source.Equals(input.Source))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BrokerCommissionRate != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerCommissionRate.GetHashCode();
                }
                if (this.NetworkCommissionRate != null)
                {
                    hashCode = (hashCode * 59) + this.NetworkCommissionRate.GetHashCode();
                }
                if (this.SaleTypeNew != null)
                {
                    hashCode = (hashCode * 59) + this.SaleTypeNew.GetHashCode();
                }
                if (this.UinsureCommissionRate != null)
                {
                    hashCode = (hashCode * 59) + this.UinsureCommissionRate.GetHashCode();
                }
                if (this.ApplicationSource != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationSource.GetHashCode();
                }
                if (this.FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.FirstName.GetHashCode();
                }
                if (this.LastName != null)
                {
                    hashCode = (hashCode * 59) + this.LastName.GetHashCode();
                }
                if (this.FullName != null)
                {
                    hashCode = (hashCode * 59) + this.FullName.GetHashCode();
                }
                if (this.CompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.CompanyName.GetHashCode();
                }
                if (this.DistributionGroupName != null)
                {
                    hashCode = (hashCode * 59) + this.DistributionGroupName.GetHashCode();
                }
                if (this.DrillDownStatus != null)
                {
                    hashCode = (hashCode * 59) + this.DrillDownStatus.GetHashCode();
                }
                if (this.NetworkName != null)
                {
                    hashCode = (hashCode * 59) + this.NetworkName.GetHashCode();
                }
                if (this.OriginalFirstName != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalFirstName.GetHashCode();
                }
                if (this.OriginalLastName != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalLastName.GetHashCode();
                }
                if (this.OriginalFullName != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalFullName.GetHashCode();
                }
                if (this.OriginalCompanyName != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalCompanyName.GetHashCode();
                }
                if (this.OriginalDistributionGroupName != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalDistributionGroupName.GetHashCode();
                }
                if (this.OriginalNetworkName != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalNetworkName.GetHashCode();
                }
                if (this.OriginalPolicyNumber != null)
                {
                    hashCode = (hashCode * 59) + this.OriginalPolicyNumber.GetHashCode();
                }
                if (this.SaleType != null)
                {
                    hashCode = (hashCode * 59) + this.SaleType.GetHashCode();
                }
                if (this.Source != null)
                {
                    hashCode = (hashCode * 59) + this.Source.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
