/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// PolicyRenewalDetails
    /// </summary>
    [DataContract(Name = "PolicyRenewalDetails")]
    public partial class PolicyRenewalDetails : IEquatable<PolicyRenewalDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PolicyRenewalDetails" /> class.
        /// </summary>
        /// <param name="firstBounceDateTime">firstBounceDateTime.</param>
        /// <param name="lastYearsMonthlyPremium">lastYearsMonthlyPremium.</param>
        /// <param name="lastYearsPremium">lastYearsPremium.</param>
        /// <param name="lastYearsPremiumWithoutPF">lastYearsPremiumWithoutPF.</param>
        /// <param name="packNotSentDateTime">packNotSentDateTime.</param>
        /// <param name="packSentDateTime">packSentDateTime.</param>
        /// <param name="packSentEmailAddress">packSentEmailAddress.</param>
        /// <param name="renewalInceptionDate">renewalInceptionDate.</param>
        /// <param name="upcomingRenewalInceptionDate">upcomingRenewalInceptionDate.</param>
        /// <param name="upcomingRenewalPolicyNumber">upcomingRenewalPolicyNumber.</param>
        public PolicyRenewalDetails(DateTime? firstBounceDateTime = default(DateTime?), double? lastYearsMonthlyPremium = default(double?), double? lastYearsPremium = default(double?), double? lastYearsPremiumWithoutPF = default(double?), DateTime? packNotSentDateTime = default(DateTime?), DateTime? packSentDateTime = default(DateTime?), string packSentEmailAddress = default(string), DateTime? renewalInceptionDate = default(DateTime?), DateTime? upcomingRenewalInceptionDate = default(DateTime?), string upcomingRenewalPolicyNumber = default(string))
        {
            this._FirstBounceDateTime = firstBounceDateTime;
            if (this.FirstBounceDateTime != null)
            {
                this._flagFirstBounceDateTime = true;
            }
            this._LastYearsMonthlyPremium = lastYearsMonthlyPremium;
            if (this.LastYearsMonthlyPremium != null)
            {
                this._flagLastYearsMonthlyPremium = true;
            }
            this._LastYearsPremium = lastYearsPremium;
            if (this.LastYearsPremium != null)
            {
                this._flagLastYearsPremium = true;
            }
            this._LastYearsPremiumWithoutPF = lastYearsPremiumWithoutPF;
            if (this.LastYearsPremiumWithoutPF != null)
            {
                this._flagLastYearsPremiumWithoutPF = true;
            }
            this._PackNotSentDateTime = packNotSentDateTime;
            if (this.PackNotSentDateTime != null)
            {
                this._flagPackNotSentDateTime = true;
            }
            this._PackSentDateTime = packSentDateTime;
            if (this.PackSentDateTime != null)
            {
                this._flagPackSentDateTime = true;
            }
            this._PackSentEmailAddress = packSentEmailAddress;
            if (this.PackSentEmailAddress != null)
            {
                this._flagPackSentEmailAddress = true;
            }
            this._RenewalInceptionDate = renewalInceptionDate;
            if (this.RenewalInceptionDate != null)
            {
                this._flagRenewalInceptionDate = true;
            }
            this._UpcomingRenewalInceptionDate = upcomingRenewalInceptionDate;
            if (this.UpcomingRenewalInceptionDate != null)
            {
                this._flagUpcomingRenewalInceptionDate = true;
            }
            this._UpcomingRenewalPolicyNumber = upcomingRenewalPolicyNumber;
            if (this.UpcomingRenewalPolicyNumber != null)
            {
                this._flagUpcomingRenewalPolicyNumber = true;
            }
        }

        /// <summary>
        /// Gets or Sets FirstBounceDateTime
        /// </summary>
        [DataMember(Name = "FirstBounceDateTime", EmitDefaultValue = true)]
        public DateTime? FirstBounceDateTime
        {
            get{ return _FirstBounceDateTime;}
            set
            {
                _FirstBounceDateTime = value;
                _flagFirstBounceDateTime = true;
            }
        }
        private DateTime? _FirstBounceDateTime;
        private bool _flagFirstBounceDateTime;

        /// <summary>
        /// Returns false as FirstBounceDateTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFirstBounceDateTime()
        {
            return _flagFirstBounceDateTime;
        }
        /// <summary>
        /// Gets or Sets LastYearsMonthlyPremium
        /// </summary>
        [DataMember(Name = "LastYearsMonthlyPremium", EmitDefaultValue = true)]
        public double? LastYearsMonthlyPremium
        {
            get{ return _LastYearsMonthlyPremium;}
            set
            {
                _LastYearsMonthlyPremium = value;
                _flagLastYearsMonthlyPremium = true;
            }
        }
        private double? _LastYearsMonthlyPremium;
        private bool _flagLastYearsMonthlyPremium;

        /// <summary>
        /// Returns false as LastYearsMonthlyPremium should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastYearsMonthlyPremium()
        {
            return _flagLastYearsMonthlyPremium;
        }
        /// <summary>
        /// Gets or Sets LastYearsPremium
        /// </summary>
        [DataMember(Name = "LastYearsPremium", EmitDefaultValue = true)]
        public double? LastYearsPremium
        {
            get{ return _LastYearsPremium;}
            set
            {
                _LastYearsPremium = value;
                _flagLastYearsPremium = true;
            }
        }
        private double? _LastYearsPremium;
        private bool _flagLastYearsPremium;

        /// <summary>
        /// Returns false as LastYearsPremium should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastYearsPremium()
        {
            return _flagLastYearsPremium;
        }
        /// <summary>
        /// Gets or Sets LastYearsPremiumWithoutPF
        /// </summary>
        [DataMember(Name = "LastYearsPremiumWithoutPF", EmitDefaultValue = true)]
        public double? LastYearsPremiumWithoutPF
        {
            get{ return _LastYearsPremiumWithoutPF;}
            set
            {
                _LastYearsPremiumWithoutPF = value;
                _flagLastYearsPremiumWithoutPF = true;
            }
        }
        private double? _LastYearsPremiumWithoutPF;
        private bool _flagLastYearsPremiumWithoutPF;

        /// <summary>
        /// Returns false as LastYearsPremiumWithoutPF should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLastYearsPremiumWithoutPF()
        {
            return _flagLastYearsPremiumWithoutPF;
        }
        /// <summary>
        /// Gets or Sets PackNotSentDateTime
        /// </summary>
        [DataMember(Name = "PackNotSentDateTime", EmitDefaultValue = true)]
        public DateTime? PackNotSentDateTime
        {
            get{ return _PackNotSentDateTime;}
            set
            {
                _PackNotSentDateTime = value;
                _flagPackNotSentDateTime = true;
            }
        }
        private DateTime? _PackNotSentDateTime;
        private bool _flagPackNotSentDateTime;

        /// <summary>
        /// Returns false as PackNotSentDateTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePackNotSentDateTime()
        {
            return _flagPackNotSentDateTime;
        }
        /// <summary>
        /// Gets or Sets PackSentDateTime
        /// </summary>
        [DataMember(Name = "PackSentDateTime", EmitDefaultValue = true)]
        public DateTime? PackSentDateTime
        {
            get{ return _PackSentDateTime;}
            set
            {
                _PackSentDateTime = value;
                _flagPackSentDateTime = true;
            }
        }
        private DateTime? _PackSentDateTime;
        private bool _flagPackSentDateTime;

        /// <summary>
        /// Returns false as PackSentDateTime should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePackSentDateTime()
        {
            return _flagPackSentDateTime;
        }
        /// <summary>
        /// Gets or Sets PackSentEmailAddress
        /// </summary>
        [DataMember(Name = "PackSentEmailAddress", EmitDefaultValue = true)]
        public string PackSentEmailAddress
        {
            get{ return _PackSentEmailAddress;}
            set
            {
                _PackSentEmailAddress = value;
                _flagPackSentEmailAddress = true;
            }
        }
        private string _PackSentEmailAddress;
        private bool _flagPackSentEmailAddress;

        /// <summary>
        /// Returns false as PackSentEmailAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePackSentEmailAddress()
        {
            return _flagPackSentEmailAddress;
        }
        /// <summary>
        /// Gets or Sets RenewalInceptionDate
        /// </summary>
        [DataMember(Name = "RenewalInceptionDate", EmitDefaultValue = true)]
        public DateTime? RenewalInceptionDate
        {
            get{ return _RenewalInceptionDate;}
            set
            {
                _RenewalInceptionDate = value;
                _flagRenewalInceptionDate = true;
            }
        }
        private DateTime? _RenewalInceptionDate;
        private bool _flagRenewalInceptionDate;

        /// <summary>
        /// Returns false as RenewalInceptionDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRenewalInceptionDate()
        {
            return _flagRenewalInceptionDate;
        }
        /// <summary>
        /// Gets or Sets UpcomingRenewalInceptionDate
        /// </summary>
        [DataMember(Name = "UpcomingRenewalInceptionDate", EmitDefaultValue = true)]
        public DateTime? UpcomingRenewalInceptionDate
        {
            get{ return _UpcomingRenewalInceptionDate;}
            set
            {
                _UpcomingRenewalInceptionDate = value;
                _flagUpcomingRenewalInceptionDate = true;
            }
        }
        private DateTime? _UpcomingRenewalInceptionDate;
        private bool _flagUpcomingRenewalInceptionDate;

        /// <summary>
        /// Returns false as UpcomingRenewalInceptionDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpcomingRenewalInceptionDate()
        {
            return _flagUpcomingRenewalInceptionDate;
        }
        /// <summary>
        /// Gets or Sets UpcomingRenewalPolicyNumber
        /// </summary>
        [DataMember(Name = "UpcomingRenewalPolicyNumber", EmitDefaultValue = true)]
        public string UpcomingRenewalPolicyNumber
        {
            get{ return _UpcomingRenewalPolicyNumber;}
            set
            {
                _UpcomingRenewalPolicyNumber = value;
                _flagUpcomingRenewalPolicyNumber = true;
            }
        }
        private string _UpcomingRenewalPolicyNumber;
        private bool _flagUpcomingRenewalPolicyNumber;

        /// <summary>
        /// Returns false as UpcomingRenewalPolicyNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeUpcomingRenewalPolicyNumber()
        {
            return _flagUpcomingRenewalPolicyNumber;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PolicyRenewalDetails {\n");
            sb.Append("  FirstBounceDateTime: ").Append(FirstBounceDateTime).Append("\n");
            sb.Append("  LastYearsMonthlyPremium: ").Append(LastYearsMonthlyPremium).Append("\n");
            sb.Append("  LastYearsPremium: ").Append(LastYearsPremium).Append("\n");
            sb.Append("  LastYearsPremiumWithoutPF: ").Append(LastYearsPremiumWithoutPF).Append("\n");
            sb.Append("  PackNotSentDateTime: ").Append(PackNotSentDateTime).Append("\n");
            sb.Append("  PackSentDateTime: ").Append(PackSentDateTime).Append("\n");
            sb.Append("  PackSentEmailAddress: ").Append(PackSentEmailAddress).Append("\n");
            sb.Append("  RenewalInceptionDate: ").Append(RenewalInceptionDate).Append("\n");
            sb.Append("  UpcomingRenewalInceptionDate: ").Append(UpcomingRenewalInceptionDate).Append("\n");
            sb.Append("  UpcomingRenewalPolicyNumber: ").Append(UpcomingRenewalPolicyNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PolicyRenewalDetails);
        }

        /// <summary>
        /// Returns true if PolicyRenewalDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of PolicyRenewalDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyRenewalDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FirstBounceDateTime == input.FirstBounceDateTime ||
                    (this.FirstBounceDateTime != null &&
                    this.FirstBounceDateTime.Equals(input.FirstBounceDateTime))
                ) && 
                (
                    this.LastYearsMonthlyPremium == input.LastYearsMonthlyPremium ||
                    (this.LastYearsMonthlyPremium != null &&
                    this.LastYearsMonthlyPremium.Equals(input.LastYearsMonthlyPremium))
                ) && 
                (
                    this.LastYearsPremium == input.LastYearsPremium ||
                    (this.LastYearsPremium != null &&
                    this.LastYearsPremium.Equals(input.LastYearsPremium))
                ) && 
                (
                    this.LastYearsPremiumWithoutPF == input.LastYearsPremiumWithoutPF ||
                    (this.LastYearsPremiumWithoutPF != null &&
                    this.LastYearsPremiumWithoutPF.Equals(input.LastYearsPremiumWithoutPF))
                ) && 
                (
                    this.PackNotSentDateTime == input.PackNotSentDateTime ||
                    (this.PackNotSentDateTime != null &&
                    this.PackNotSentDateTime.Equals(input.PackNotSentDateTime))
                ) && 
                (
                    this.PackSentDateTime == input.PackSentDateTime ||
                    (this.PackSentDateTime != null &&
                    this.PackSentDateTime.Equals(input.PackSentDateTime))
                ) && 
                (
                    this.PackSentEmailAddress == input.PackSentEmailAddress ||
                    (this.PackSentEmailAddress != null &&
                    this.PackSentEmailAddress.Equals(input.PackSentEmailAddress))
                ) && 
                (
                    this.RenewalInceptionDate == input.RenewalInceptionDate ||
                    (this.RenewalInceptionDate != null &&
                    this.RenewalInceptionDate.Equals(input.RenewalInceptionDate))
                ) && 
                (
                    this.UpcomingRenewalInceptionDate == input.UpcomingRenewalInceptionDate ||
                    (this.UpcomingRenewalInceptionDate != null &&
                    this.UpcomingRenewalInceptionDate.Equals(input.UpcomingRenewalInceptionDate))
                ) && 
                (
                    this.UpcomingRenewalPolicyNumber == input.UpcomingRenewalPolicyNumber ||
                    (this.UpcomingRenewalPolicyNumber != null &&
                    this.UpcomingRenewalPolicyNumber.Equals(input.UpcomingRenewalPolicyNumber))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FirstBounceDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.FirstBounceDateTime.GetHashCode();
                }
                if (this.LastYearsMonthlyPremium != null)
                {
                    hashCode = (hashCode * 59) + this.LastYearsMonthlyPremium.GetHashCode();
                }
                if (this.LastYearsPremium != null)
                {
                    hashCode = (hashCode * 59) + this.LastYearsPremium.GetHashCode();
                }
                if (this.LastYearsPremiumWithoutPF != null)
                {
                    hashCode = (hashCode * 59) + this.LastYearsPremiumWithoutPF.GetHashCode();
                }
                if (this.PackNotSentDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.PackNotSentDateTime.GetHashCode();
                }
                if (this.PackSentDateTime != null)
                {
                    hashCode = (hashCode * 59) + this.PackSentDateTime.GetHashCode();
                }
                if (this.PackSentEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.PackSentEmailAddress.GetHashCode();
                }
                if (this.RenewalInceptionDate != null)
                {
                    hashCode = (hashCode * 59) + this.RenewalInceptionDate.GetHashCode();
                }
                if (this.UpcomingRenewalInceptionDate != null)
                {
                    hashCode = (hashCode * 59) + this.UpcomingRenewalInceptionDate.GetHashCode();
                }
                if (this.UpcomingRenewalPolicyNumber != null)
                {
                    hashCode = (hashCode * 59) + this.UpcomingRenewalPolicyNumber.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
