/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// UinsureCustomerPortalInfrastructureQueryDTORenewalDetails
    /// </summary>
    [DataContract(Name = "Uinsure.CustomerPortal.Infrastructure.Query.DTO.RenewalDetails")]
    public partial class UinsureCustomerPortalInfrastructureQueryDTORenewalDetails : IEquatable<UinsureCustomerPortalInfrastructureQueryDTORenewalDetails>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UinsureCustomerPortalInfrastructureQueryDTORenewalDetails" /> class.
        /// </summary>
        /// <param name="client1">client1.</param>
        /// <param name="client2">client2.</param>
        /// <param name="riskAddress">riskAddress.</param>
        /// <param name="propertyType">propertyType.</param>
        /// <param name="numberOfBedrooms">numberOfBedrooms.</param>
        /// <param name="yearOfConstructionRange">yearOfConstructionRange.</param>
        /// <param name="buildingsCoverIncluded">buildingsCoverIncluded.</param>
        /// <param name="buildingsAccidentalDamageIncluded">buildingsAccidentalDamageIncluded.</param>
        /// <param name="buildingsCoverLimit">buildingsCoverLimit.</param>
        /// <param name="buildingsExcess">buildingsExcess.</param>
        /// <param name="buildingsNoClaimsYears">buildingsNoClaimsYears.</param>
        /// <param name="contentsCoverIncluded">contentsCoverIncluded.</param>
        /// <param name="contentsAccidentalDamageIncluded">contentsAccidentalDamageIncluded.</param>
        /// <param name="contentsCoverLimit">contentsCoverLimit.</param>
        /// <param name="contentsExcess">contentsExcess.</param>
        /// <param name="contentsNoClaimsYears">contentsNoClaimsYears.</param>
        /// <param name="contentsSpecifiedItems">contentsSpecifiedItems.</param>
        /// <param name="contentsPersonalPossessionsValue">contentsPersonalPossessionsValue.</param>
        /// <param name="homeEmergencyCover">homeEmergencyCover.</param>
        /// <param name="familyLegalProtection">familyLegalProtection.</param>
        /// <param name="quoteReference">quoteReference.</param>
        /// <param name="policyStartDate">policyStartDate.</param>
        /// <param name="correspondenceAddress">correspondenceAddress.</param>
        /// <param name="quotePremium">quotePremium.</param>
        /// <param name="doNotAutoRenew">doNotAutoRenew.</param>
        /// <param name="renewalInceptionDate">renewalInceptionDate.</param>
        public UinsureCustomerPortalInfrastructureQueryDTORenewalDetails(UinsureCustomerPortalInfrastructureQueryDTOApplicant client1 = default(UinsureCustomerPortalInfrastructureQueryDTOApplicant), UinsureCustomerPortalInfrastructureQueryDTOApplicant client2 = default(UinsureCustomerPortalInfrastructureQueryDTOApplicant), UinsureCustomerPortalInfrastructureQueryDTOAddress riskAddress = default(UinsureCustomerPortalInfrastructureQueryDTOAddress), string propertyType = default(string), int numberOfBedrooms = default(int), string yearOfConstructionRange = default(string), bool buildingsCoverIncluded = default(bool), bool buildingsAccidentalDamageIncluded = default(bool), int buildingsCoverLimit = default(int), int buildingsExcess = default(int), int buildingsNoClaimsYears = default(int), bool contentsCoverIncluded = default(bool), bool contentsAccidentalDamageIncluded = default(bool), int contentsCoverLimit = default(int), int contentsExcess = default(int), int contentsNoClaimsYears = default(int), List<UinsureCustomerPortalInfrastructureQueryDTOSpecifiedItem> contentsSpecifiedItems = default(List<UinsureCustomerPortalInfrastructureQueryDTOSpecifiedItem>), int contentsPersonalPossessionsValue = default(int), bool homeEmergencyCover = default(bool), bool familyLegalProtection = default(bool), string quoteReference = default(string), DateTime policyStartDate = default(DateTime), UinsureCustomerPortalInfrastructureQueryDTOAddress correspondenceAddress = default(UinsureCustomerPortalInfrastructureQueryDTOAddress), UinsureCustomerPortalInfrastructureQueryDTOQuotePremium quotePremium = default(UinsureCustomerPortalInfrastructureQueryDTOQuotePremium), bool doNotAutoRenew = default(bool), DateTime renewalInceptionDate = default(DateTime))
        {
            this._Client1 = client1;
            if (this.Client1 != null)
            {
                this._flagClient1 = true;
            }
            this._Client2 = client2;
            if (this.Client2 != null)
            {
                this._flagClient2 = true;
            }
            this._RiskAddress = riskAddress;
            if (this.RiskAddress != null)
            {
                this._flagRiskAddress = true;
            }
            this._PropertyType = propertyType;
            if (this.PropertyType != null)
            {
                this._flagPropertyType = true;
            }
            this._NumberOfBedrooms = numberOfBedrooms;
            if (this.NumberOfBedrooms != null)
            {
                this._flagNumberOfBedrooms = true;
            }
            this._YearOfConstructionRange = yearOfConstructionRange;
            if (this.YearOfConstructionRange != null)
            {
                this._flagYearOfConstructionRange = true;
            }
            this._BuildingsCoverIncluded = buildingsCoverIncluded;
            if (this.BuildingsCoverIncluded != null)
            {
                this._flagBuildingsCoverIncluded = true;
            }
            this._BuildingsAccidentalDamageIncluded = buildingsAccidentalDamageIncluded;
            if (this.BuildingsAccidentalDamageIncluded != null)
            {
                this._flagBuildingsAccidentalDamageIncluded = true;
            }
            this._BuildingsCoverLimit = buildingsCoverLimit;
            if (this.BuildingsCoverLimit != null)
            {
                this._flagBuildingsCoverLimit = true;
            }
            this._BuildingsExcess = buildingsExcess;
            if (this.BuildingsExcess != null)
            {
                this._flagBuildingsExcess = true;
            }
            this._BuildingsNoClaimsYears = buildingsNoClaimsYears;
            if (this.BuildingsNoClaimsYears != null)
            {
                this._flagBuildingsNoClaimsYears = true;
            }
            this._ContentsCoverIncluded = contentsCoverIncluded;
            if (this.ContentsCoverIncluded != null)
            {
                this._flagContentsCoverIncluded = true;
            }
            this._ContentsAccidentalDamageIncluded = contentsAccidentalDamageIncluded;
            if (this.ContentsAccidentalDamageIncluded != null)
            {
                this._flagContentsAccidentalDamageIncluded = true;
            }
            this._ContentsCoverLimit = contentsCoverLimit;
            if (this.ContentsCoverLimit != null)
            {
                this._flagContentsCoverLimit = true;
            }
            this._ContentsExcess = contentsExcess;
            if (this.ContentsExcess != null)
            {
                this._flagContentsExcess = true;
            }
            this._ContentsNoClaimsYears = contentsNoClaimsYears;
            if (this.ContentsNoClaimsYears != null)
            {
                this._flagContentsNoClaimsYears = true;
            }
            this._ContentsSpecifiedItems = contentsSpecifiedItems;
            if (this.ContentsSpecifiedItems != null)
            {
                this._flagContentsSpecifiedItems = true;
            }
            this._ContentsPersonalPossessionsValue = contentsPersonalPossessionsValue;
            if (this.ContentsPersonalPossessionsValue != null)
            {
                this._flagContentsPersonalPossessionsValue = true;
            }
            this._HomeEmergencyCover = homeEmergencyCover;
            if (this.HomeEmergencyCover != null)
            {
                this._flagHomeEmergencyCover = true;
            }
            this._FamilyLegalProtection = familyLegalProtection;
            if (this.FamilyLegalProtection != null)
            {
                this._flagFamilyLegalProtection = true;
            }
            this._QuoteReference = quoteReference;
            if (this.QuoteReference != null)
            {
                this._flagQuoteReference = true;
            }
            this._PolicyStartDate = policyStartDate;
            if (this.PolicyStartDate != null)
            {
                this._flagPolicyStartDate = true;
            }
            this._CorrespondenceAddress = correspondenceAddress;
            if (this.CorrespondenceAddress != null)
            {
                this._flagCorrespondenceAddress = true;
            }
            this._QuotePremium = quotePremium;
            if (this.QuotePremium != null)
            {
                this._flagQuotePremium = true;
            }
            this._DoNotAutoRenew = doNotAutoRenew;
            if (this.DoNotAutoRenew != null)
            {
                this._flagDoNotAutoRenew = true;
            }
            this._RenewalInceptionDate = renewalInceptionDate;
            if (this.RenewalInceptionDate != null)
            {
                this._flagRenewalInceptionDate = true;
            }
        }

        /// <summary>
        /// Gets or Sets Client1
        /// </summary>
        [DataMember(Name = "Client1", EmitDefaultValue = false)]
        public UinsureCustomerPortalInfrastructureQueryDTOApplicant Client1
        {
            get{ return _Client1;}
            set
            {
                _Client1 = value;
                _flagClient1 = true;
            }
        }
        private UinsureCustomerPortalInfrastructureQueryDTOApplicant _Client1;
        private bool _flagClient1;

        /// <summary>
        /// Returns false as Client1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClient1()
        {
            return _flagClient1;
        }
        /// <summary>
        /// Gets or Sets Client2
        /// </summary>
        [DataMember(Name = "Client2", EmitDefaultValue = false)]
        public UinsureCustomerPortalInfrastructureQueryDTOApplicant Client2
        {
            get{ return _Client2;}
            set
            {
                _Client2 = value;
                _flagClient2 = true;
            }
        }
        private UinsureCustomerPortalInfrastructureQueryDTOApplicant _Client2;
        private bool _flagClient2;

        /// <summary>
        /// Returns false as Client2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeClient2()
        {
            return _flagClient2;
        }
        /// <summary>
        /// Gets or Sets RiskAddress
        /// </summary>
        [DataMember(Name = "RiskAddress", EmitDefaultValue = false)]
        public UinsureCustomerPortalInfrastructureQueryDTOAddress RiskAddress
        {
            get{ return _RiskAddress;}
            set
            {
                _RiskAddress = value;
                _flagRiskAddress = true;
            }
        }
        private UinsureCustomerPortalInfrastructureQueryDTOAddress _RiskAddress;
        private bool _flagRiskAddress;

        /// <summary>
        /// Returns false as RiskAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRiskAddress()
        {
            return _flagRiskAddress;
        }
        /// <summary>
        /// Gets or Sets PropertyType
        /// </summary>
        [DataMember(Name = "PropertyType", EmitDefaultValue = true)]
        public string PropertyType
        {
            get{ return _PropertyType;}
            set
            {
                _PropertyType = value;
                _flagPropertyType = true;
            }
        }
        private string _PropertyType;
        private bool _flagPropertyType;

        /// <summary>
        /// Returns false as PropertyType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePropertyType()
        {
            return _flagPropertyType;
        }
        /// <summary>
        /// Gets or Sets NumberOfBedrooms
        /// </summary>
        [DataMember(Name = "NumberOfBedrooms", EmitDefaultValue = false)]
        public int NumberOfBedrooms
        {
            get{ return _NumberOfBedrooms;}
            set
            {
                _NumberOfBedrooms = value;
                _flagNumberOfBedrooms = true;
            }
        }
        private int _NumberOfBedrooms;
        private bool _flagNumberOfBedrooms;

        /// <summary>
        /// Returns false as NumberOfBedrooms should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeNumberOfBedrooms()
        {
            return _flagNumberOfBedrooms;
        }
        /// <summary>
        /// Gets or Sets YearOfConstructionRange
        /// </summary>
        [DataMember(Name = "YearOfConstructionRange", EmitDefaultValue = true)]
        public string YearOfConstructionRange
        {
            get{ return _YearOfConstructionRange;}
            set
            {
                _YearOfConstructionRange = value;
                _flagYearOfConstructionRange = true;
            }
        }
        private string _YearOfConstructionRange;
        private bool _flagYearOfConstructionRange;

        /// <summary>
        /// Returns false as YearOfConstructionRange should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeYearOfConstructionRange()
        {
            return _flagYearOfConstructionRange;
        }
        /// <summary>
        /// Gets or Sets BuildingsCoverIncluded
        /// </summary>
        [DataMember(Name = "BuildingsCoverIncluded", EmitDefaultValue = true)]
        public bool BuildingsCoverIncluded
        {
            get{ return _BuildingsCoverIncluded;}
            set
            {
                _BuildingsCoverIncluded = value;
                _flagBuildingsCoverIncluded = true;
            }
        }
        private bool _BuildingsCoverIncluded;
        private bool _flagBuildingsCoverIncluded;

        /// <summary>
        /// Returns false as BuildingsCoverIncluded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBuildingsCoverIncluded()
        {
            return _flagBuildingsCoverIncluded;
        }
        /// <summary>
        /// Gets or Sets BuildingsAccidentalDamageIncluded
        /// </summary>
        [DataMember(Name = "BuildingsAccidentalDamageIncluded", EmitDefaultValue = true)]
        public bool BuildingsAccidentalDamageIncluded
        {
            get{ return _BuildingsAccidentalDamageIncluded;}
            set
            {
                _BuildingsAccidentalDamageIncluded = value;
                _flagBuildingsAccidentalDamageIncluded = true;
            }
        }
        private bool _BuildingsAccidentalDamageIncluded;
        private bool _flagBuildingsAccidentalDamageIncluded;

        /// <summary>
        /// Returns false as BuildingsAccidentalDamageIncluded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBuildingsAccidentalDamageIncluded()
        {
            return _flagBuildingsAccidentalDamageIncluded;
        }
        /// <summary>
        /// Gets or Sets BuildingsCoverLimit
        /// </summary>
        [DataMember(Name = "BuildingsCoverLimit", EmitDefaultValue = false)]
        public int BuildingsCoverLimit
        {
            get{ return _BuildingsCoverLimit;}
            set
            {
                _BuildingsCoverLimit = value;
                _flagBuildingsCoverLimit = true;
            }
        }
        private int _BuildingsCoverLimit;
        private bool _flagBuildingsCoverLimit;

        /// <summary>
        /// Returns false as BuildingsCoverLimit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBuildingsCoverLimit()
        {
            return _flagBuildingsCoverLimit;
        }
        /// <summary>
        /// Gets or Sets BuildingsExcess
        /// </summary>
        [DataMember(Name = "BuildingsExcess", EmitDefaultValue = false)]
        public int BuildingsExcess
        {
            get{ return _BuildingsExcess;}
            set
            {
                _BuildingsExcess = value;
                _flagBuildingsExcess = true;
            }
        }
        private int _BuildingsExcess;
        private bool _flagBuildingsExcess;

        /// <summary>
        /// Returns false as BuildingsExcess should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBuildingsExcess()
        {
            return _flagBuildingsExcess;
        }
        /// <summary>
        /// Gets or Sets BuildingsNoClaimsYears
        /// </summary>
        [DataMember(Name = "BuildingsNoClaimsYears", EmitDefaultValue = false)]
        public int BuildingsNoClaimsYears
        {
            get{ return _BuildingsNoClaimsYears;}
            set
            {
                _BuildingsNoClaimsYears = value;
                _flagBuildingsNoClaimsYears = true;
            }
        }
        private int _BuildingsNoClaimsYears;
        private bool _flagBuildingsNoClaimsYears;

        /// <summary>
        /// Returns false as BuildingsNoClaimsYears should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeBuildingsNoClaimsYears()
        {
            return _flagBuildingsNoClaimsYears;
        }
        /// <summary>
        /// Gets or Sets ContentsCoverIncluded
        /// </summary>
        [DataMember(Name = "ContentsCoverIncluded", EmitDefaultValue = true)]
        public bool ContentsCoverIncluded
        {
            get{ return _ContentsCoverIncluded;}
            set
            {
                _ContentsCoverIncluded = value;
                _flagContentsCoverIncluded = true;
            }
        }
        private bool _ContentsCoverIncluded;
        private bool _flagContentsCoverIncluded;

        /// <summary>
        /// Returns false as ContentsCoverIncluded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContentsCoverIncluded()
        {
            return _flagContentsCoverIncluded;
        }
        /// <summary>
        /// Gets or Sets ContentsAccidentalDamageIncluded
        /// </summary>
        [DataMember(Name = "ContentsAccidentalDamageIncluded", EmitDefaultValue = true)]
        public bool ContentsAccidentalDamageIncluded
        {
            get{ return _ContentsAccidentalDamageIncluded;}
            set
            {
                _ContentsAccidentalDamageIncluded = value;
                _flagContentsAccidentalDamageIncluded = true;
            }
        }
        private bool _ContentsAccidentalDamageIncluded;
        private bool _flagContentsAccidentalDamageIncluded;

        /// <summary>
        /// Returns false as ContentsAccidentalDamageIncluded should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContentsAccidentalDamageIncluded()
        {
            return _flagContentsAccidentalDamageIncluded;
        }
        /// <summary>
        /// Gets or Sets ContentsCoverLimit
        /// </summary>
        [DataMember(Name = "ContentsCoverLimit", EmitDefaultValue = false)]
        public int ContentsCoverLimit
        {
            get{ return _ContentsCoverLimit;}
            set
            {
                _ContentsCoverLimit = value;
                _flagContentsCoverLimit = true;
            }
        }
        private int _ContentsCoverLimit;
        private bool _flagContentsCoverLimit;

        /// <summary>
        /// Returns false as ContentsCoverLimit should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContentsCoverLimit()
        {
            return _flagContentsCoverLimit;
        }
        /// <summary>
        /// Gets or Sets ContentsExcess
        /// </summary>
        [DataMember(Name = "ContentsExcess", EmitDefaultValue = false)]
        public int ContentsExcess
        {
            get{ return _ContentsExcess;}
            set
            {
                _ContentsExcess = value;
                _flagContentsExcess = true;
            }
        }
        private int _ContentsExcess;
        private bool _flagContentsExcess;

        /// <summary>
        /// Returns false as ContentsExcess should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContentsExcess()
        {
            return _flagContentsExcess;
        }
        /// <summary>
        /// Gets or Sets ContentsNoClaimsYears
        /// </summary>
        [DataMember(Name = "ContentsNoClaimsYears", EmitDefaultValue = false)]
        public int ContentsNoClaimsYears
        {
            get{ return _ContentsNoClaimsYears;}
            set
            {
                _ContentsNoClaimsYears = value;
                _flagContentsNoClaimsYears = true;
            }
        }
        private int _ContentsNoClaimsYears;
        private bool _flagContentsNoClaimsYears;

        /// <summary>
        /// Returns false as ContentsNoClaimsYears should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContentsNoClaimsYears()
        {
            return _flagContentsNoClaimsYears;
        }
        /// <summary>
        /// Gets or Sets ContentsSpecifiedItems
        /// </summary>
        [DataMember(Name = "ContentsSpecifiedItems", EmitDefaultValue = true)]
        public List<UinsureCustomerPortalInfrastructureQueryDTOSpecifiedItem> ContentsSpecifiedItems
        {
            get{ return _ContentsSpecifiedItems;}
            set
            {
                _ContentsSpecifiedItems = value;
                _flagContentsSpecifiedItems = true;
            }
        }
        private List<UinsureCustomerPortalInfrastructureQueryDTOSpecifiedItem> _ContentsSpecifiedItems;
        private bool _flagContentsSpecifiedItems;

        /// <summary>
        /// Returns false as ContentsSpecifiedItems should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContentsSpecifiedItems()
        {
            return _flagContentsSpecifiedItems;
        }
        /// <summary>
        /// Gets or Sets ContentsPersonalPossessionsValue
        /// </summary>
        [DataMember(Name = "ContentsPersonalPossessionsValue", EmitDefaultValue = false)]
        public int ContentsPersonalPossessionsValue
        {
            get{ return _ContentsPersonalPossessionsValue;}
            set
            {
                _ContentsPersonalPossessionsValue = value;
                _flagContentsPersonalPossessionsValue = true;
            }
        }
        private int _ContentsPersonalPossessionsValue;
        private bool _flagContentsPersonalPossessionsValue;

        /// <summary>
        /// Returns false as ContentsPersonalPossessionsValue should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeContentsPersonalPossessionsValue()
        {
            return _flagContentsPersonalPossessionsValue;
        }
        /// <summary>
        /// Gets or Sets HomeEmergencyCover
        /// </summary>
        [DataMember(Name = "HomeEmergencyCover", EmitDefaultValue = true)]
        public bool HomeEmergencyCover
        {
            get{ return _HomeEmergencyCover;}
            set
            {
                _HomeEmergencyCover = value;
                _flagHomeEmergencyCover = true;
            }
        }
        private bool _HomeEmergencyCover;
        private bool _flagHomeEmergencyCover;

        /// <summary>
        /// Returns false as HomeEmergencyCover should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeHomeEmergencyCover()
        {
            return _flagHomeEmergencyCover;
        }
        /// <summary>
        /// Gets or Sets FamilyLegalProtection
        /// </summary>
        [DataMember(Name = "FamilyLegalProtection", EmitDefaultValue = true)]
        public bool FamilyLegalProtection
        {
            get{ return _FamilyLegalProtection;}
            set
            {
                _FamilyLegalProtection = value;
                _flagFamilyLegalProtection = true;
            }
        }
        private bool _FamilyLegalProtection;
        private bool _flagFamilyLegalProtection;

        /// <summary>
        /// Returns false as FamilyLegalProtection should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeFamilyLegalProtection()
        {
            return _flagFamilyLegalProtection;
        }
        /// <summary>
        /// Gets or Sets QuoteReference
        /// </summary>
        [DataMember(Name = "QuoteReference", EmitDefaultValue = true)]
        public string QuoteReference
        {
            get{ return _QuoteReference;}
            set
            {
                _QuoteReference = value;
                _flagQuoteReference = true;
            }
        }
        private string _QuoteReference;
        private bool _flagQuoteReference;

        /// <summary>
        /// Returns false as QuoteReference should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuoteReference()
        {
            return _flagQuoteReference;
        }
        /// <summary>
        /// Gets or Sets PolicyStartDate
        /// </summary>
        [DataMember(Name = "PolicyStartDate", EmitDefaultValue = false)]
        public DateTime PolicyStartDate
        {
            get{ return _PolicyStartDate;}
            set
            {
                _PolicyStartDate = value;
                _flagPolicyStartDate = true;
            }
        }
        private DateTime _PolicyStartDate;
        private bool _flagPolicyStartDate;

        /// <summary>
        /// Returns false as PolicyStartDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyStartDate()
        {
            return _flagPolicyStartDate;
        }
        /// <summary>
        /// Gets or Sets CorrespondenceAddress
        /// </summary>
        [DataMember(Name = "CorrespondenceAddress", EmitDefaultValue = false)]
        public UinsureCustomerPortalInfrastructureQueryDTOAddress CorrespondenceAddress
        {
            get{ return _CorrespondenceAddress;}
            set
            {
                _CorrespondenceAddress = value;
                _flagCorrespondenceAddress = true;
            }
        }
        private UinsureCustomerPortalInfrastructureQueryDTOAddress _CorrespondenceAddress;
        private bool _flagCorrespondenceAddress;

        /// <summary>
        /// Returns false as CorrespondenceAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCorrespondenceAddress()
        {
            return _flagCorrespondenceAddress;
        }
        /// <summary>
        /// Gets or Sets QuotePremium
        /// </summary>
        [DataMember(Name = "QuotePremium", EmitDefaultValue = false)]
        public UinsureCustomerPortalInfrastructureQueryDTOQuotePremium QuotePremium
        {
            get{ return _QuotePremium;}
            set
            {
                _QuotePremium = value;
                _flagQuotePremium = true;
            }
        }
        private UinsureCustomerPortalInfrastructureQueryDTOQuotePremium _QuotePremium;
        private bool _flagQuotePremium;

        /// <summary>
        /// Returns false as QuotePremium should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeQuotePremium()
        {
            return _flagQuotePremium;
        }
        /// <summary>
        /// Gets or Sets DoNotAutoRenew
        /// </summary>
        [DataMember(Name = "DoNotAutoRenew", EmitDefaultValue = true)]
        public bool DoNotAutoRenew
        {
            get{ return _DoNotAutoRenew;}
            set
            {
                _DoNotAutoRenew = value;
                _flagDoNotAutoRenew = true;
            }
        }
        private bool _DoNotAutoRenew;
        private bool _flagDoNotAutoRenew;

        /// <summary>
        /// Returns false as DoNotAutoRenew should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDoNotAutoRenew()
        {
            return _flagDoNotAutoRenew;
        }
        /// <summary>
        /// Gets or Sets RenewalInceptionDate
        /// </summary>
        [DataMember(Name = "RenewalInceptionDate", EmitDefaultValue = false)]
        public DateTime RenewalInceptionDate
        {
            get{ return _RenewalInceptionDate;}
            set
            {
                _RenewalInceptionDate = value;
                _flagRenewalInceptionDate = true;
            }
        }
        private DateTime _RenewalInceptionDate;
        private bool _flagRenewalInceptionDate;

        /// <summary>
        /// Returns false as RenewalInceptionDate should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeRenewalInceptionDate()
        {
            return _flagRenewalInceptionDate;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class UinsureCustomerPortalInfrastructureQueryDTORenewalDetails {\n");
            sb.Append("  Client1: ").Append(Client1).Append("\n");
            sb.Append("  Client2: ").Append(Client2).Append("\n");
            sb.Append("  RiskAddress: ").Append(RiskAddress).Append("\n");
            sb.Append("  PropertyType: ").Append(PropertyType).Append("\n");
            sb.Append("  NumberOfBedrooms: ").Append(NumberOfBedrooms).Append("\n");
            sb.Append("  YearOfConstructionRange: ").Append(YearOfConstructionRange).Append("\n");
            sb.Append("  BuildingsCoverIncluded: ").Append(BuildingsCoverIncluded).Append("\n");
            sb.Append("  BuildingsAccidentalDamageIncluded: ").Append(BuildingsAccidentalDamageIncluded).Append("\n");
            sb.Append("  BuildingsCoverLimit: ").Append(BuildingsCoverLimit).Append("\n");
            sb.Append("  BuildingsExcess: ").Append(BuildingsExcess).Append("\n");
            sb.Append("  BuildingsNoClaimsYears: ").Append(BuildingsNoClaimsYears).Append("\n");
            sb.Append("  ContentsCoverIncluded: ").Append(ContentsCoverIncluded).Append("\n");
            sb.Append("  ContentsAccidentalDamageIncluded: ").Append(ContentsAccidentalDamageIncluded).Append("\n");
            sb.Append("  ContentsCoverLimit: ").Append(ContentsCoverLimit).Append("\n");
            sb.Append("  ContentsExcess: ").Append(ContentsExcess).Append("\n");
            sb.Append("  ContentsNoClaimsYears: ").Append(ContentsNoClaimsYears).Append("\n");
            sb.Append("  ContentsSpecifiedItems: ").Append(ContentsSpecifiedItems).Append("\n");
            sb.Append("  ContentsPersonalPossessionsValue: ").Append(ContentsPersonalPossessionsValue).Append("\n");
            sb.Append("  HomeEmergencyCover: ").Append(HomeEmergencyCover).Append("\n");
            sb.Append("  FamilyLegalProtection: ").Append(FamilyLegalProtection).Append("\n");
            sb.Append("  QuoteReference: ").Append(QuoteReference).Append("\n");
            sb.Append("  PolicyStartDate: ").Append(PolicyStartDate).Append("\n");
            sb.Append("  CorrespondenceAddress: ").Append(CorrespondenceAddress).Append("\n");
            sb.Append("  QuotePremium: ").Append(QuotePremium).Append("\n");
            sb.Append("  DoNotAutoRenew: ").Append(DoNotAutoRenew).Append("\n");
            sb.Append("  RenewalInceptionDate: ").Append(RenewalInceptionDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UinsureCustomerPortalInfrastructureQueryDTORenewalDetails);
        }

        /// <summary>
        /// Returns true if UinsureCustomerPortalInfrastructureQueryDTORenewalDetails instances are equal
        /// </summary>
        /// <param name="input">Instance of UinsureCustomerPortalInfrastructureQueryDTORenewalDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UinsureCustomerPortalInfrastructureQueryDTORenewalDetails input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Client1 == input.Client1 ||
                    (this.Client1 != null &&
                    this.Client1.Equals(input.Client1))
                ) && 
                (
                    this.Client2 == input.Client2 ||
                    (this.Client2 != null &&
                    this.Client2.Equals(input.Client2))
                ) && 
                (
                    this.RiskAddress == input.RiskAddress ||
                    (this.RiskAddress != null &&
                    this.RiskAddress.Equals(input.RiskAddress))
                ) && 
                (
                    this.PropertyType == input.PropertyType ||
                    (this.PropertyType != null &&
                    this.PropertyType.Equals(input.PropertyType))
                ) && 
                (
                    this.NumberOfBedrooms == input.NumberOfBedrooms ||
                    this.NumberOfBedrooms.Equals(input.NumberOfBedrooms)
                ) && 
                (
                    this.YearOfConstructionRange == input.YearOfConstructionRange ||
                    (this.YearOfConstructionRange != null &&
                    this.YearOfConstructionRange.Equals(input.YearOfConstructionRange))
                ) && 
                (
                    this.BuildingsCoverIncluded == input.BuildingsCoverIncluded ||
                    this.BuildingsCoverIncluded.Equals(input.BuildingsCoverIncluded)
                ) && 
                (
                    this.BuildingsAccidentalDamageIncluded == input.BuildingsAccidentalDamageIncluded ||
                    this.BuildingsAccidentalDamageIncluded.Equals(input.BuildingsAccidentalDamageIncluded)
                ) && 
                (
                    this.BuildingsCoverLimit == input.BuildingsCoverLimit ||
                    this.BuildingsCoverLimit.Equals(input.BuildingsCoverLimit)
                ) && 
                (
                    this.BuildingsExcess == input.BuildingsExcess ||
                    this.BuildingsExcess.Equals(input.BuildingsExcess)
                ) && 
                (
                    this.BuildingsNoClaimsYears == input.BuildingsNoClaimsYears ||
                    this.BuildingsNoClaimsYears.Equals(input.BuildingsNoClaimsYears)
                ) && 
                (
                    this.ContentsCoverIncluded == input.ContentsCoverIncluded ||
                    this.ContentsCoverIncluded.Equals(input.ContentsCoverIncluded)
                ) && 
                (
                    this.ContentsAccidentalDamageIncluded == input.ContentsAccidentalDamageIncluded ||
                    this.ContentsAccidentalDamageIncluded.Equals(input.ContentsAccidentalDamageIncluded)
                ) && 
                (
                    this.ContentsCoverLimit == input.ContentsCoverLimit ||
                    this.ContentsCoverLimit.Equals(input.ContentsCoverLimit)
                ) && 
                (
                    this.ContentsExcess == input.ContentsExcess ||
                    this.ContentsExcess.Equals(input.ContentsExcess)
                ) && 
                (
                    this.ContentsNoClaimsYears == input.ContentsNoClaimsYears ||
                    this.ContentsNoClaimsYears.Equals(input.ContentsNoClaimsYears)
                ) && 
                (
                    this.ContentsSpecifiedItems == input.ContentsSpecifiedItems ||
                    this.ContentsSpecifiedItems != null &&
                    input.ContentsSpecifiedItems != null &&
                    this.ContentsSpecifiedItems.SequenceEqual(input.ContentsSpecifiedItems)
                ) && 
                (
                    this.ContentsPersonalPossessionsValue == input.ContentsPersonalPossessionsValue ||
                    this.ContentsPersonalPossessionsValue.Equals(input.ContentsPersonalPossessionsValue)
                ) && 
                (
                    this.HomeEmergencyCover == input.HomeEmergencyCover ||
                    this.HomeEmergencyCover.Equals(input.HomeEmergencyCover)
                ) && 
                (
                    this.FamilyLegalProtection == input.FamilyLegalProtection ||
                    this.FamilyLegalProtection.Equals(input.FamilyLegalProtection)
                ) && 
                (
                    this.QuoteReference == input.QuoteReference ||
                    (this.QuoteReference != null &&
                    this.QuoteReference.Equals(input.QuoteReference))
                ) && 
                (
                    this.PolicyStartDate == input.PolicyStartDate ||
                    (this.PolicyStartDate != null &&
                    this.PolicyStartDate.Equals(input.PolicyStartDate))
                ) && 
                (
                    this.CorrespondenceAddress == input.CorrespondenceAddress ||
                    (this.CorrespondenceAddress != null &&
                    this.CorrespondenceAddress.Equals(input.CorrespondenceAddress))
                ) && 
                (
                    this.QuotePremium == input.QuotePremium ||
                    (this.QuotePremium != null &&
                    this.QuotePremium.Equals(input.QuotePremium))
                ) && 
                (
                    this.DoNotAutoRenew == input.DoNotAutoRenew ||
                    this.DoNotAutoRenew.Equals(input.DoNotAutoRenew)
                ) && 
                (
                    this.RenewalInceptionDate == input.RenewalInceptionDate ||
                    (this.RenewalInceptionDate != null &&
                    this.RenewalInceptionDate.Equals(input.RenewalInceptionDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Client1 != null)
                {
                    hashCode = (hashCode * 59) + this.Client1.GetHashCode();
                }
                if (this.Client2 != null)
                {
                    hashCode = (hashCode * 59) + this.Client2.GetHashCode();
                }
                if (this.RiskAddress != null)
                {
                    hashCode = (hashCode * 59) + this.RiskAddress.GetHashCode();
                }
                if (this.PropertyType != null)
                {
                    hashCode = (hashCode * 59) + this.PropertyType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.NumberOfBedrooms.GetHashCode();
                if (this.YearOfConstructionRange != null)
                {
                    hashCode = (hashCode * 59) + this.YearOfConstructionRange.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BuildingsCoverIncluded.GetHashCode();
                hashCode = (hashCode * 59) + this.BuildingsAccidentalDamageIncluded.GetHashCode();
                hashCode = (hashCode * 59) + this.BuildingsCoverLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.BuildingsExcess.GetHashCode();
                hashCode = (hashCode * 59) + this.BuildingsNoClaimsYears.GetHashCode();
                hashCode = (hashCode * 59) + this.ContentsCoverIncluded.GetHashCode();
                hashCode = (hashCode * 59) + this.ContentsAccidentalDamageIncluded.GetHashCode();
                hashCode = (hashCode * 59) + this.ContentsCoverLimit.GetHashCode();
                hashCode = (hashCode * 59) + this.ContentsExcess.GetHashCode();
                hashCode = (hashCode * 59) + this.ContentsNoClaimsYears.GetHashCode();
                if (this.ContentsSpecifiedItems != null)
                {
                    hashCode = (hashCode * 59) + this.ContentsSpecifiedItems.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ContentsPersonalPossessionsValue.GetHashCode();
                hashCode = (hashCode * 59) + this.HomeEmergencyCover.GetHashCode();
                hashCode = (hashCode * 59) + this.FamilyLegalProtection.GetHashCode();
                if (this.QuoteReference != null)
                {
                    hashCode = (hashCode * 59) + this.QuoteReference.GetHashCode();
                }
                if (this.PolicyStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyStartDate.GetHashCode();
                }
                if (this.CorrespondenceAddress != null)
                {
                    hashCode = (hashCode * 59) + this.CorrespondenceAddress.GetHashCode();
                }
                if (this.QuotePremium != null)
                {
                    hashCode = (hashCode * 59) + this.QuotePremium.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DoNotAutoRenew.GetHashCode();
                if (this.RenewalInceptionDate != null)
                {
                    hashCode = (hashCode * 59) + this.RenewalInceptionDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
