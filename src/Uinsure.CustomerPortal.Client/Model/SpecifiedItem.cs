/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// DTO with details relating to a high-value specified item.
    /// </summary>
    [DataContract(Name = "SpecifiedItem")]
    public partial class SpecifiedItem : IEquatable<SpecifiedItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SpecifiedItem" /> class.
        /// </summary>
        /// <param name="type">Specified item type..</param>
        /// <param name="description">Description of the specified item..</param>
        /// <param name="value">Value of the specified item..</param>
        /// <param name="coverAtHome">Is the specified item covered in the home..</param>
        /// <param name="coverAwayFromHome">Is the specified item covered away from the home..</param>
        public SpecifiedItem(string type = default(string), string description = default(string), int value = default(int), bool coverAtHome = default(bool), bool coverAwayFromHome = default(bool))
        {
            this._Type = type;
            if (this.Type != null)
            {
                this._flagType = true;
            }
            this._Description = description;
            if (this.Description != null)
            {
                this._flagDescription = true;
            }
            this._Value = value;
            if (this.Value != null)
            {
                this._flagValue = true;
            }
            this._CoverAtHome = coverAtHome;
            if (this.CoverAtHome != null)
            {
                this._flagCoverAtHome = true;
            }
            this._CoverAwayFromHome = coverAwayFromHome;
            if (this.CoverAwayFromHome != null)
            {
                this._flagCoverAwayFromHome = true;
            }
        }

        /// <summary>
        /// Specified item type.
        /// </summary>
        /// <value>Specified item type.</value>
        [DataMember(Name = "Type", EmitDefaultValue = true)]
        public string Type
        {
            get{ return _Type;}
            set
            {
                _Type = value;
                _flagType = true;
            }
        }
        private string _Type;
        private bool _flagType;

        /// <summary>
        /// Returns false as Type should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeType()
        {
            return _flagType;
        }
        /// <summary>
        /// Description of the specified item.
        /// </summary>
        /// <value>Description of the specified item.</value>
        [DataMember(Name = "Description", EmitDefaultValue = true)]
        public string Description
        {
            get{ return _Description;}
            set
            {
                _Description = value;
                _flagDescription = true;
            }
        }
        private string _Description;
        private bool _flagDescription;

        /// <summary>
        /// Returns false as Description should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDescription()
        {
            return _flagDescription;
        }
        /// <summary>
        /// Value of the specified item.
        /// </summary>
        /// <value>Value of the specified item.</value>
        [DataMember(Name = "Value", EmitDefaultValue = false)]
        public int Value
        {
            get{ return _Value;}
            set
            {
                _Value = value;
                _flagValue = true;
            }
        }
        private int _Value;
        private bool _flagValue;

        /// <summary>
        /// Returns false as Value should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeValue()
        {
            return _flagValue;
        }
        /// <summary>
        /// Is the specified item covered in the home.
        /// </summary>
        /// <value>Is the specified item covered in the home.</value>
        [DataMember(Name = "CoverAtHome", EmitDefaultValue = true)]
        public bool CoverAtHome
        {
            get{ return _CoverAtHome;}
            set
            {
                _CoverAtHome = value;
                _flagCoverAtHome = true;
            }
        }
        private bool _CoverAtHome;
        private bool _flagCoverAtHome;

        /// <summary>
        /// Returns false as CoverAtHome should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCoverAtHome()
        {
            return _flagCoverAtHome;
        }
        /// <summary>
        /// Is the specified item covered away from the home.
        /// </summary>
        /// <value>Is the specified item covered away from the home.</value>
        [DataMember(Name = "CoverAwayFromHome", EmitDefaultValue = true)]
        public bool CoverAwayFromHome
        {
            get{ return _CoverAwayFromHome;}
            set
            {
                _CoverAwayFromHome = value;
                _flagCoverAwayFromHome = true;
            }
        }
        private bool _CoverAwayFromHome;
        private bool _flagCoverAwayFromHome;

        /// <summary>
        /// Returns false as CoverAwayFromHome should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCoverAwayFromHome()
        {
            return _flagCoverAwayFromHome;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SpecifiedItem {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  CoverAtHome: ").Append(CoverAtHome).Append("\n");
            sb.Append("  CoverAwayFromHome: ").Append(CoverAwayFromHome).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SpecifiedItem);
        }

        /// <summary>
        /// Returns true if SpecifiedItem instances are equal
        /// </summary>
        /// <param name="input">Instance of SpecifiedItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SpecifiedItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Value == input.Value ||
                    this.Value.Equals(input.Value)
                ) && 
                (
                    this.CoverAtHome == input.CoverAtHome ||
                    this.CoverAtHome.Equals(input.CoverAtHome)
                ) && 
                (
                    this.CoverAwayFromHome == input.CoverAwayFromHome ||
                    this.CoverAwayFromHome.Equals(input.CoverAwayFromHome)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Value.GetHashCode();
                hashCode = (hashCode * 59) + this.CoverAtHome.GetHashCode();
                hashCode = (hashCode * 59) + this.CoverAwayFromHome.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
