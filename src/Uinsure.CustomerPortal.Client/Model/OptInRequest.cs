/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// Represents a request from a customer to either opt in or out of digital renewals
    /// </summary>
    [DataContract(Name = "OptInRequest")]
    public partial class OptInRequest : IEquatable<OptInRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OptInRequest" /> class.
        /// </summary>
        /// <param name="optedIn">Whether or not the customer has opted in.</param>
        /// <param name="linkSource">linkSource.</param>
        public OptInRequest(bool optedIn = default(bool), string linkSource = default(string))
        {
            this._OptedIn = optedIn;
            if (this.OptedIn != null)
            {
                this._flagOptedIn = true;
            }
            this._LinkSource = linkSource;
            if (this.LinkSource != null)
            {
                this._flagLinkSource = true;
            }
        }

        /// <summary>
        /// Whether or not the customer has opted in
        /// </summary>
        /// <value>Whether or not the customer has opted in</value>
        [DataMember(Name = "OptedIn", EmitDefaultValue = true)]
        public bool OptedIn
        {
            get{ return _OptedIn;}
            set
            {
                _OptedIn = value;
                _flagOptedIn = true;
            }
        }
        private bool _OptedIn;
        private bool _flagOptedIn;

        /// <summary>
        /// Returns false as OptedIn should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeOptedIn()
        {
            return _flagOptedIn;
        }
        /// <summary>
        /// Gets or Sets LinkSource
        /// </summary>
        [DataMember(Name = "LinkSource", EmitDefaultValue = true)]
        public string LinkSource
        {
            get{ return _LinkSource;}
            set
            {
                _LinkSource = value;
                _flagLinkSource = true;
            }
        }
        private string _LinkSource;
        private bool _flagLinkSource;

        /// <summary>
        /// Returns false as LinkSource should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeLinkSource()
        {
            return _flagLinkSource;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OptInRequest {\n");
            sb.Append("  OptedIn: ").Append(OptedIn).Append("\n");
            sb.Append("  LinkSource: ").Append(LinkSource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OptInRequest);
        }

        /// <summary>
        /// Returns true if OptInRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of OptInRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OptInRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OptedIn == input.OptedIn ||
                    this.OptedIn.Equals(input.OptedIn)
                ) && 
                (
                    this.LinkSource == input.LinkSource ||
                    (this.LinkSource != null &&
                    this.LinkSource.Equals(input.LinkSource))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OptedIn.GetHashCode();
                if (this.LinkSource != null)
                {
                    hashCode = (hashCode * 59) + this.LinkSource.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
