/*
 * Uinsure.CustomerPortal.API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Uinsure.CustomerPortal.Client.Client.OpenAPIDateConverter;

namespace Uinsure.CustomerPortal.Client.Model
{
    /// <summary>
    /// DTO with details relating to a policy and policyholder.
    /// </summary>
    [DataContract(Name = "Policyholder")]
    public partial class Policyholder : IEquatable<Policyholder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Policyholder" /> class.
        /// </summary>
        /// <param name="applicant1Title">Applicant 1 title..</param>
        /// <param name="applicant1FirstName">Applicant 1 first name..</param>
        /// <param name="applicant1LastName">Applicant 1 last name..</param>
        /// <param name="applicant1DateOfBirth">Applicant 1 date of birth..</param>
        /// <param name="applicant1Deceased">Is applicant 1 deceased?.</param>
        /// <param name="applicant2Title">Applicant 2 title..</param>
        /// <param name="applicant2FirstName">Applicant 2 first name..</param>
        /// <param name="applicant2LastName">Applicant 2 last name,.</param>
        /// <param name="applicant2DateOfBirth">Applicant 2 date of birth..</param>
        /// <param name="emailAddress">Customer email address..</param>
        /// <param name="telephoneNumber">Customer telephone number..</param>
        /// <param name="telephoneNumberType">Type of contact number..</param>
        /// <param name="correspondenceAddressLine1">Correspondence address line 1..</param>
        /// <param name="correspondenceAddressLine2">Correspondence address line 2..</param>
        /// <param name="correspondenceAddressLine3">Correspondence address line 3..</param>
        /// <param name="correspondencePostcode">Correspondence address postcode..</param>
        /// <param name="doNotAutoRenew">Will the policy auto-renew?.</param>
        /// <param name="policyDocument">Is this customer receiving policy documents by post or digitally?.</param>
        /// <param name="correspondenceRiskAddressMatch">Is the correspondence address the same as the risk address?.</param>
        /// <param name="customerVulnerabilities">Collection containing any customer vulnerabilities..</param>
        public Policyholder(string applicant1Title = default(string), string applicant1FirstName = default(string), string applicant1LastName = default(string), DateTime? applicant1DateOfBirth = default(DateTime?), bool? applicant1Deceased = default(bool?), string applicant2Title = default(string), string applicant2FirstName = default(string), string applicant2LastName = default(string), DateTime? applicant2DateOfBirth = default(DateTime?), string emailAddress = default(string), string telephoneNumber = default(string), string telephoneNumberType = default(string), string correspondenceAddressLine1 = default(string), string correspondenceAddressLine2 = default(string), string correspondenceAddressLine3 = default(string), string correspondencePostcode = default(string), bool? doNotAutoRenew = default(bool?), string policyDocument = default(string), bool? correspondenceRiskAddressMatch = default(bool?), List<string> customerVulnerabilities = default(List<string>))
        {
            this._Applicant1Title = applicant1Title;
            if (this.Applicant1Title != null)
            {
                this._flagApplicant1Title = true;
            }
            this._Applicant1FirstName = applicant1FirstName;
            if (this.Applicant1FirstName != null)
            {
                this._flagApplicant1FirstName = true;
            }
            this._Applicant1LastName = applicant1LastName;
            if (this.Applicant1LastName != null)
            {
                this._flagApplicant1LastName = true;
            }
            this._Applicant1DateOfBirth = applicant1DateOfBirth;
            if (this.Applicant1DateOfBirth != null)
            {
                this._flagApplicant1DateOfBirth = true;
            }
            this._Applicant1Deceased = applicant1Deceased;
            if (this.Applicant1Deceased != null)
            {
                this._flagApplicant1Deceased = true;
            }
            this._Applicant2Title = applicant2Title;
            if (this.Applicant2Title != null)
            {
                this._flagApplicant2Title = true;
            }
            this._Applicant2FirstName = applicant2FirstName;
            if (this.Applicant2FirstName != null)
            {
                this._flagApplicant2FirstName = true;
            }
            this._Applicant2LastName = applicant2LastName;
            if (this.Applicant2LastName != null)
            {
                this._flagApplicant2LastName = true;
            }
            this._Applicant2DateOfBirth = applicant2DateOfBirth;
            if (this.Applicant2DateOfBirth != null)
            {
                this._flagApplicant2DateOfBirth = true;
            }
            this._EmailAddress = emailAddress;
            if (this.EmailAddress != null)
            {
                this._flagEmailAddress = true;
            }
            this._TelephoneNumber = telephoneNumber;
            if (this.TelephoneNumber != null)
            {
                this._flagTelephoneNumber = true;
            }
            this._TelephoneNumberType = telephoneNumberType;
            if (this.TelephoneNumberType != null)
            {
                this._flagTelephoneNumberType = true;
            }
            this._CorrespondenceAddressLine1 = correspondenceAddressLine1;
            if (this.CorrespondenceAddressLine1 != null)
            {
                this._flagCorrespondenceAddressLine1 = true;
            }
            this._CorrespondenceAddressLine2 = correspondenceAddressLine2;
            if (this.CorrespondenceAddressLine2 != null)
            {
                this._flagCorrespondenceAddressLine2 = true;
            }
            this._CorrespondenceAddressLine3 = correspondenceAddressLine3;
            if (this.CorrespondenceAddressLine3 != null)
            {
                this._flagCorrespondenceAddressLine3 = true;
            }
            this._CorrespondencePostcode = correspondencePostcode;
            if (this.CorrespondencePostcode != null)
            {
                this._flagCorrespondencePostcode = true;
            }
            this._DoNotAutoRenew = doNotAutoRenew;
            if (this.DoNotAutoRenew != null)
            {
                this._flagDoNotAutoRenew = true;
            }
            this._PolicyDocument = policyDocument;
            if (this.PolicyDocument != null)
            {
                this._flagPolicyDocument = true;
            }
            this._CorrespondenceRiskAddressMatch = correspondenceRiskAddressMatch;
            if (this.CorrespondenceRiskAddressMatch != null)
            {
                this._flagCorrespondenceRiskAddressMatch = true;
            }
            this._CustomerVulnerabilities = customerVulnerabilities;
            if (this.CustomerVulnerabilities != null)
            {
                this._flagCustomerVulnerabilities = true;
            }
        }

        /// <summary>
        /// Applicant 1 title.
        /// </summary>
        /// <value>Applicant 1 title.</value>
        [DataMember(Name = "Applicant1Title", EmitDefaultValue = true)]
        public string Applicant1Title
        {
            get{ return _Applicant1Title;}
            set
            {
                _Applicant1Title = value;
                _flagApplicant1Title = true;
            }
        }
        private string _Applicant1Title;
        private bool _flagApplicant1Title;

        /// <summary>
        /// Returns false as Applicant1Title should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant1Title()
        {
            return _flagApplicant1Title;
        }
        /// <summary>
        /// Applicant 1 first name.
        /// </summary>
        /// <value>Applicant 1 first name.</value>
        [DataMember(Name = "Applicant1FirstName", EmitDefaultValue = true)]
        public string Applicant1FirstName
        {
            get{ return _Applicant1FirstName;}
            set
            {
                _Applicant1FirstName = value;
                _flagApplicant1FirstName = true;
            }
        }
        private string _Applicant1FirstName;
        private bool _flagApplicant1FirstName;

        /// <summary>
        /// Returns false as Applicant1FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant1FirstName()
        {
            return _flagApplicant1FirstName;
        }
        /// <summary>
        /// Applicant 1 last name.
        /// </summary>
        /// <value>Applicant 1 last name.</value>
        [DataMember(Name = "Applicant1LastName", EmitDefaultValue = true)]
        public string Applicant1LastName
        {
            get{ return _Applicant1LastName;}
            set
            {
                _Applicant1LastName = value;
                _flagApplicant1LastName = true;
            }
        }
        private string _Applicant1LastName;
        private bool _flagApplicant1LastName;

        /// <summary>
        /// Returns false as Applicant1LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant1LastName()
        {
            return _flagApplicant1LastName;
        }
        /// <summary>
        /// Applicant 1 date of birth.
        /// </summary>
        /// <value>Applicant 1 date of birth.</value>
        [DataMember(Name = "Applicant1DateOfBirth", EmitDefaultValue = true)]
        public DateTime? Applicant1DateOfBirth
        {
            get{ return _Applicant1DateOfBirth;}
            set
            {
                _Applicant1DateOfBirth = value;
                _flagApplicant1DateOfBirth = true;
            }
        }
        private DateTime? _Applicant1DateOfBirth;
        private bool _flagApplicant1DateOfBirth;

        /// <summary>
        /// Returns false as Applicant1DateOfBirth should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant1DateOfBirth()
        {
            return _flagApplicant1DateOfBirth;
        }
        /// <summary>
        /// Is applicant 1 deceased?
        /// </summary>
        /// <value>Is applicant 1 deceased?</value>
        [DataMember(Name = "Applicant1Deceased", EmitDefaultValue = true)]
        public bool? Applicant1Deceased
        {
            get{ return _Applicant1Deceased;}
            set
            {
                _Applicant1Deceased = value;
                _flagApplicant1Deceased = true;
            }
        }
        private bool? _Applicant1Deceased;
        private bool _flagApplicant1Deceased;

        /// <summary>
        /// Returns false as Applicant1Deceased should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant1Deceased()
        {
            return _flagApplicant1Deceased;
        }
        /// <summary>
        /// Applicant 2 title.
        /// </summary>
        /// <value>Applicant 2 title.</value>
        [DataMember(Name = "Applicant2Title", EmitDefaultValue = true)]
        public string Applicant2Title
        {
            get{ return _Applicant2Title;}
            set
            {
                _Applicant2Title = value;
                _flagApplicant2Title = true;
            }
        }
        private string _Applicant2Title;
        private bool _flagApplicant2Title;

        /// <summary>
        /// Returns false as Applicant2Title should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant2Title()
        {
            return _flagApplicant2Title;
        }
        /// <summary>
        /// Applicant 2 first name.
        /// </summary>
        /// <value>Applicant 2 first name.</value>
        [DataMember(Name = "Applicant2FirstName", EmitDefaultValue = true)]
        public string Applicant2FirstName
        {
            get{ return _Applicant2FirstName;}
            set
            {
                _Applicant2FirstName = value;
                _flagApplicant2FirstName = true;
            }
        }
        private string _Applicant2FirstName;
        private bool _flagApplicant2FirstName;

        /// <summary>
        /// Returns false as Applicant2FirstName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant2FirstName()
        {
            return _flagApplicant2FirstName;
        }
        /// <summary>
        /// Applicant 2 last name,
        /// </summary>
        /// <value>Applicant 2 last name,</value>
        [DataMember(Name = "Applicant2LastName", EmitDefaultValue = true)]
        public string Applicant2LastName
        {
            get{ return _Applicant2LastName;}
            set
            {
                _Applicant2LastName = value;
                _flagApplicant2LastName = true;
            }
        }
        private string _Applicant2LastName;
        private bool _flagApplicant2LastName;

        /// <summary>
        /// Returns false as Applicant2LastName should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant2LastName()
        {
            return _flagApplicant2LastName;
        }
        /// <summary>
        /// Applicant 2 date of birth.
        /// </summary>
        /// <value>Applicant 2 date of birth.</value>
        [DataMember(Name = "Applicant2DateOfBirth", EmitDefaultValue = true)]
        public DateTime? Applicant2DateOfBirth
        {
            get{ return _Applicant2DateOfBirth;}
            set
            {
                _Applicant2DateOfBirth = value;
                _flagApplicant2DateOfBirth = true;
            }
        }
        private DateTime? _Applicant2DateOfBirth;
        private bool _flagApplicant2DateOfBirth;

        /// <summary>
        /// Returns false as Applicant2DateOfBirth should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplicant2DateOfBirth()
        {
            return _flagApplicant2DateOfBirth;
        }
        /// <summary>
        /// Customer email address.
        /// </summary>
        /// <value>Customer email address.</value>
        [DataMember(Name = "EmailAddress", EmitDefaultValue = true)]
        public string EmailAddress
        {
            get{ return _EmailAddress;}
            set
            {
                _EmailAddress = value;
                _flagEmailAddress = true;
            }
        }
        private string _EmailAddress;
        private bool _flagEmailAddress;

        /// <summary>
        /// Returns false as EmailAddress should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeEmailAddress()
        {
            return _flagEmailAddress;
        }
        /// <summary>
        /// Customer telephone number.
        /// </summary>
        /// <value>Customer telephone number.</value>
        [DataMember(Name = "TelephoneNumber", EmitDefaultValue = true)]
        public string TelephoneNumber
        {
            get{ return _TelephoneNumber;}
            set
            {
                _TelephoneNumber = value;
                _flagTelephoneNumber = true;
            }
        }
        private string _TelephoneNumber;
        private bool _flagTelephoneNumber;

        /// <summary>
        /// Returns false as TelephoneNumber should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTelephoneNumber()
        {
            return _flagTelephoneNumber;
        }
        /// <summary>
        /// Type of contact number.
        /// </summary>
        /// <value>Type of contact number.</value>
        [DataMember(Name = "TelephoneNumberType", EmitDefaultValue = true)]
        public string TelephoneNumberType
        {
            get{ return _TelephoneNumberType;}
            set
            {
                _TelephoneNumberType = value;
                _flagTelephoneNumberType = true;
            }
        }
        private string _TelephoneNumberType;
        private bool _flagTelephoneNumberType;

        /// <summary>
        /// Returns false as TelephoneNumberType should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeTelephoneNumberType()
        {
            return _flagTelephoneNumberType;
        }
        /// <summary>
        /// Correspondence address line 1.
        /// </summary>
        /// <value>Correspondence address line 1.</value>
        [DataMember(Name = "CorrespondenceAddressLine1", EmitDefaultValue = true)]
        public string CorrespondenceAddressLine1
        {
            get{ return _CorrespondenceAddressLine1;}
            set
            {
                _CorrespondenceAddressLine1 = value;
                _flagCorrespondenceAddressLine1 = true;
            }
        }
        private string _CorrespondenceAddressLine1;
        private bool _flagCorrespondenceAddressLine1;

        /// <summary>
        /// Returns false as CorrespondenceAddressLine1 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCorrespondenceAddressLine1()
        {
            return _flagCorrespondenceAddressLine1;
        }
        /// <summary>
        /// Correspondence address line 2.
        /// </summary>
        /// <value>Correspondence address line 2.</value>
        [DataMember(Name = "CorrespondenceAddressLine2", EmitDefaultValue = true)]
        public string CorrespondenceAddressLine2
        {
            get{ return _CorrespondenceAddressLine2;}
            set
            {
                _CorrespondenceAddressLine2 = value;
                _flagCorrespondenceAddressLine2 = true;
            }
        }
        private string _CorrespondenceAddressLine2;
        private bool _flagCorrespondenceAddressLine2;

        /// <summary>
        /// Returns false as CorrespondenceAddressLine2 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCorrespondenceAddressLine2()
        {
            return _flagCorrespondenceAddressLine2;
        }
        /// <summary>
        /// Correspondence address line 3.
        /// </summary>
        /// <value>Correspondence address line 3.</value>
        [DataMember(Name = "CorrespondenceAddressLine3", EmitDefaultValue = true)]
        public string CorrespondenceAddressLine3
        {
            get{ return _CorrespondenceAddressLine3;}
            set
            {
                _CorrespondenceAddressLine3 = value;
                _flagCorrespondenceAddressLine3 = true;
            }
        }
        private string _CorrespondenceAddressLine3;
        private bool _flagCorrespondenceAddressLine3;

        /// <summary>
        /// Returns false as CorrespondenceAddressLine3 should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCorrespondenceAddressLine3()
        {
            return _flagCorrespondenceAddressLine3;
        }
        /// <summary>
        /// Correspondence address postcode.
        /// </summary>
        /// <value>Correspondence address postcode.</value>
        [DataMember(Name = "CorrespondencePostcode", EmitDefaultValue = true)]
        public string CorrespondencePostcode
        {
            get{ return _CorrespondencePostcode;}
            set
            {
                _CorrespondencePostcode = value;
                _flagCorrespondencePostcode = true;
            }
        }
        private string _CorrespondencePostcode;
        private bool _flagCorrespondencePostcode;

        /// <summary>
        /// Returns false as CorrespondencePostcode should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCorrespondencePostcode()
        {
            return _flagCorrespondencePostcode;
        }
        /// <summary>
        /// Will the policy auto-renew?
        /// </summary>
        /// <value>Will the policy auto-renew?</value>
        [DataMember(Name = "DoNotAutoRenew", EmitDefaultValue = true)]
        public bool? DoNotAutoRenew
        {
            get{ return _DoNotAutoRenew;}
            set
            {
                _DoNotAutoRenew = value;
                _flagDoNotAutoRenew = true;
            }
        }
        private bool? _DoNotAutoRenew;
        private bool _flagDoNotAutoRenew;

        /// <summary>
        /// Returns false as DoNotAutoRenew should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDoNotAutoRenew()
        {
            return _flagDoNotAutoRenew;
        }
        /// <summary>
        /// Is this customer receiving policy documents by post or digitally?
        /// </summary>
        /// <value>Is this customer receiving policy documents by post or digitally?</value>
        [DataMember(Name = "PolicyDocument", EmitDefaultValue = true)]
        public string PolicyDocument
        {
            get{ return _PolicyDocument;}
            set
            {
                _PolicyDocument = value;
                _flagPolicyDocument = true;
            }
        }
        private string _PolicyDocument;
        private bool _flagPolicyDocument;

        /// <summary>
        /// Returns false as PolicyDocument should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializePolicyDocument()
        {
            return _flagPolicyDocument;
        }
        /// <summary>
        /// Is the correspondence address the same as the risk address?
        /// </summary>
        /// <value>Is the correspondence address the same as the risk address?</value>
        [DataMember(Name = "CorrespondenceRiskAddressMatch", EmitDefaultValue = true)]
        public bool? CorrespondenceRiskAddressMatch
        {
            get{ return _CorrespondenceRiskAddressMatch;}
            set
            {
                _CorrespondenceRiskAddressMatch = value;
                _flagCorrespondenceRiskAddressMatch = true;
            }
        }
        private bool? _CorrespondenceRiskAddressMatch;
        private bool _flagCorrespondenceRiskAddressMatch;

        /// <summary>
        /// Returns false as CorrespondenceRiskAddressMatch should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCorrespondenceRiskAddressMatch()
        {
            return _flagCorrespondenceRiskAddressMatch;
        }
        /// <summary>
        /// Returns true if the values of Risk address differ from those in Correspondence address (sans address line 4).
        /// </summary>
        /// <value>Returns true if the values of Risk address differ from those in Correspondence address (sans address line 4).</value>
        [DataMember(Name = "IsRiskAddressDifferent", EmitDefaultValue = true)]
        public bool IsRiskAddressDifferent { get; private set; }

        /// <summary>
        /// Returns false as IsRiskAddressDifferent should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsRiskAddressDifferent()
        {
            return false;
        }
        /// <summary>
        /// Collection containing any customer vulnerabilities.
        /// </summary>
        /// <value>Collection containing any customer vulnerabilities.</value>
        [DataMember(Name = "CustomerVulnerabilities", EmitDefaultValue = true)]
        public List<string> CustomerVulnerabilities
        {
            get{ return _CustomerVulnerabilities;}
            set
            {
                _CustomerVulnerabilities = value;
                _flagCustomerVulnerabilities = true;
            }
        }
        private List<string> _CustomerVulnerabilities;
        private bool _flagCustomerVulnerabilities;

        /// <summary>
        /// Returns false as CustomerVulnerabilities should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeCustomerVulnerabilities()
        {
            return _flagCustomerVulnerabilities;
        }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Policyholder {\n");
            sb.Append("  Applicant1Title: ").Append(Applicant1Title).Append("\n");
            sb.Append("  Applicant1FirstName: ").Append(Applicant1FirstName).Append("\n");
            sb.Append("  Applicant1LastName: ").Append(Applicant1LastName).Append("\n");
            sb.Append("  Applicant1DateOfBirth: ").Append(Applicant1DateOfBirth).Append("\n");
            sb.Append("  Applicant1Deceased: ").Append(Applicant1Deceased).Append("\n");
            sb.Append("  Applicant2Title: ").Append(Applicant2Title).Append("\n");
            sb.Append("  Applicant2FirstName: ").Append(Applicant2FirstName).Append("\n");
            sb.Append("  Applicant2LastName: ").Append(Applicant2LastName).Append("\n");
            sb.Append("  Applicant2DateOfBirth: ").Append(Applicant2DateOfBirth).Append("\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  TelephoneNumber: ").Append(TelephoneNumber).Append("\n");
            sb.Append("  TelephoneNumberType: ").Append(TelephoneNumberType).Append("\n");
            sb.Append("  CorrespondenceAddressLine1: ").Append(CorrespondenceAddressLine1).Append("\n");
            sb.Append("  CorrespondenceAddressLine2: ").Append(CorrespondenceAddressLine2).Append("\n");
            sb.Append("  CorrespondenceAddressLine3: ").Append(CorrespondenceAddressLine3).Append("\n");
            sb.Append("  CorrespondencePostcode: ").Append(CorrespondencePostcode).Append("\n");
            sb.Append("  DoNotAutoRenew: ").Append(DoNotAutoRenew).Append("\n");
            sb.Append("  PolicyDocument: ").Append(PolicyDocument).Append("\n");
            sb.Append("  CorrespondenceRiskAddressMatch: ").Append(CorrespondenceRiskAddressMatch).Append("\n");
            sb.Append("  IsRiskAddressDifferent: ").Append(IsRiskAddressDifferent).Append("\n");
            sb.Append("  CustomerVulnerabilities: ").Append(CustomerVulnerabilities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Policyholder);
        }

        /// <summary>
        /// Returns true if Policyholder instances are equal
        /// </summary>
        /// <param name="input">Instance of Policyholder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Policyholder input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Applicant1Title == input.Applicant1Title ||
                    (this.Applicant1Title != null &&
                    this.Applicant1Title.Equals(input.Applicant1Title))
                ) && 
                (
                    this.Applicant1FirstName == input.Applicant1FirstName ||
                    (this.Applicant1FirstName != null &&
                    this.Applicant1FirstName.Equals(input.Applicant1FirstName))
                ) && 
                (
                    this.Applicant1LastName == input.Applicant1LastName ||
                    (this.Applicant1LastName != null &&
                    this.Applicant1LastName.Equals(input.Applicant1LastName))
                ) && 
                (
                    this.Applicant1DateOfBirth == input.Applicant1DateOfBirth ||
                    (this.Applicant1DateOfBirth != null &&
                    this.Applicant1DateOfBirth.Equals(input.Applicant1DateOfBirth))
                ) && 
                (
                    this.Applicant1Deceased == input.Applicant1Deceased ||
                    (this.Applicant1Deceased != null &&
                    this.Applicant1Deceased.Equals(input.Applicant1Deceased))
                ) && 
                (
                    this.Applicant2Title == input.Applicant2Title ||
                    (this.Applicant2Title != null &&
                    this.Applicant2Title.Equals(input.Applicant2Title))
                ) && 
                (
                    this.Applicant2FirstName == input.Applicant2FirstName ||
                    (this.Applicant2FirstName != null &&
                    this.Applicant2FirstName.Equals(input.Applicant2FirstName))
                ) && 
                (
                    this.Applicant2LastName == input.Applicant2LastName ||
                    (this.Applicant2LastName != null &&
                    this.Applicant2LastName.Equals(input.Applicant2LastName))
                ) && 
                (
                    this.Applicant2DateOfBirth == input.Applicant2DateOfBirth ||
                    (this.Applicant2DateOfBirth != null &&
                    this.Applicant2DateOfBirth.Equals(input.Applicant2DateOfBirth))
                ) && 
                (
                    this.EmailAddress == input.EmailAddress ||
                    (this.EmailAddress != null &&
                    this.EmailAddress.Equals(input.EmailAddress))
                ) && 
                (
                    this.TelephoneNumber == input.TelephoneNumber ||
                    (this.TelephoneNumber != null &&
                    this.TelephoneNumber.Equals(input.TelephoneNumber))
                ) && 
                (
                    this.TelephoneNumberType == input.TelephoneNumberType ||
                    (this.TelephoneNumberType != null &&
                    this.TelephoneNumberType.Equals(input.TelephoneNumberType))
                ) && 
                (
                    this.CorrespondenceAddressLine1 == input.CorrespondenceAddressLine1 ||
                    (this.CorrespondenceAddressLine1 != null &&
                    this.CorrespondenceAddressLine1.Equals(input.CorrespondenceAddressLine1))
                ) && 
                (
                    this.CorrespondenceAddressLine2 == input.CorrespondenceAddressLine2 ||
                    (this.CorrespondenceAddressLine2 != null &&
                    this.CorrespondenceAddressLine2.Equals(input.CorrespondenceAddressLine2))
                ) && 
                (
                    this.CorrespondenceAddressLine3 == input.CorrespondenceAddressLine3 ||
                    (this.CorrespondenceAddressLine3 != null &&
                    this.CorrespondenceAddressLine3.Equals(input.CorrespondenceAddressLine3))
                ) && 
                (
                    this.CorrespondencePostcode == input.CorrespondencePostcode ||
                    (this.CorrespondencePostcode != null &&
                    this.CorrespondencePostcode.Equals(input.CorrespondencePostcode))
                ) && 
                (
                    this.DoNotAutoRenew == input.DoNotAutoRenew ||
                    (this.DoNotAutoRenew != null &&
                    this.DoNotAutoRenew.Equals(input.DoNotAutoRenew))
                ) && 
                (
                    this.PolicyDocument == input.PolicyDocument ||
                    (this.PolicyDocument != null &&
                    this.PolicyDocument.Equals(input.PolicyDocument))
                ) && 
                (
                    this.CorrespondenceRiskAddressMatch == input.CorrespondenceRiskAddressMatch ||
                    (this.CorrespondenceRiskAddressMatch != null &&
                    this.CorrespondenceRiskAddressMatch.Equals(input.CorrespondenceRiskAddressMatch))
                ) && 
                (
                    this.IsRiskAddressDifferent == input.IsRiskAddressDifferent ||
                    this.IsRiskAddressDifferent.Equals(input.IsRiskAddressDifferent)
                ) && 
                (
                    this.CustomerVulnerabilities == input.CustomerVulnerabilities ||
                    this.CustomerVulnerabilities != null &&
                    input.CustomerVulnerabilities != null &&
                    this.CustomerVulnerabilities.SequenceEqual(input.CustomerVulnerabilities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Applicant1Title != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant1Title.GetHashCode();
                }
                if (this.Applicant1FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant1FirstName.GetHashCode();
                }
                if (this.Applicant1LastName != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant1LastName.GetHashCode();
                }
                if (this.Applicant1DateOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant1DateOfBirth.GetHashCode();
                }
                if (this.Applicant1Deceased != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant1Deceased.GetHashCode();
                }
                if (this.Applicant2Title != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant2Title.GetHashCode();
                }
                if (this.Applicant2FirstName != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant2FirstName.GetHashCode();
                }
                if (this.Applicant2LastName != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant2LastName.GetHashCode();
                }
                if (this.Applicant2DateOfBirth != null)
                {
                    hashCode = (hashCode * 59) + this.Applicant2DateOfBirth.GetHashCode();
                }
                if (this.EmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.EmailAddress.GetHashCode();
                }
                if (this.TelephoneNumber != null)
                {
                    hashCode = (hashCode * 59) + this.TelephoneNumber.GetHashCode();
                }
                if (this.TelephoneNumberType != null)
                {
                    hashCode = (hashCode * 59) + this.TelephoneNumberType.GetHashCode();
                }
                if (this.CorrespondenceAddressLine1 != null)
                {
                    hashCode = (hashCode * 59) + this.CorrespondenceAddressLine1.GetHashCode();
                }
                if (this.CorrespondenceAddressLine2 != null)
                {
                    hashCode = (hashCode * 59) + this.CorrespondenceAddressLine2.GetHashCode();
                }
                if (this.CorrespondenceAddressLine3 != null)
                {
                    hashCode = (hashCode * 59) + this.CorrespondenceAddressLine3.GetHashCode();
                }
                if (this.CorrespondencePostcode != null)
                {
                    hashCode = (hashCode * 59) + this.CorrespondencePostcode.GetHashCode();
                }
                if (this.DoNotAutoRenew != null)
                {
                    hashCode = (hashCode * 59) + this.DoNotAutoRenew.GetHashCode();
                }
                if (this.PolicyDocument != null)
                {
                    hashCode = (hashCode * 59) + this.PolicyDocument.GetHashCode();
                }
                if (this.CorrespondenceRiskAddressMatch != null)
                {
                    hashCode = (hashCode * 59) + this.CorrespondenceRiskAddressMatch.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsRiskAddressDifferent.GetHashCode();
                if (this.CustomerVulnerabilities != null)
                {
                    hashCode = (hashCode * 59) + this.CustomerVulnerabilities.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
